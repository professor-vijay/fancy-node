{"ast":null,"code":"import _slicedToArray from \"D:/master-sp-new/Biz1Maket_Single_Store/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"D:/master-sp-new/Biz1Maket_Single_Store/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/master-sp-new/Biz1Maket_Single_Store/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { CommonModule } from '@angular/common';\nimport { Pipe, NgModule } from '@angular/core';\nimport { timeUnits } from 'ng-zorro-antd/core/time';\nimport { padStart } from 'ng-zorro-antd/core/util';\n/**\n * @fileoverview added by tsickle\n * Generated from: nz-css-unit.pipe.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nvar NzToCssUnitPipe = /*#__PURE__*/function () {\n  function NzToCssUnitPipe() {\n    _classCallCheck(this, NzToCssUnitPipe);\n  }\n\n  _createClass(NzToCssUnitPipe, [{\n    key: \"transform\",\n    value:\n    /**\n     * @param {?} value\n     * @param {?=} defaultUnit\n     * @return {?}\n     */\n    function transform(value) {\n      var defaultUnit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'px';\n\n      /** @type {?} */\n      var formatted = +value;\n      return isNaN(formatted) ? \"\".concat(value) : \"\".concat(formatted).concat(defaultUnit);\n    }\n  }]);\n\n  return NzToCssUnitPipe;\n}();\n\nNzToCssUnitPipe.ɵfac = function NzToCssUnitPipe_Factory(t) {\n  return new (t || NzToCssUnitPipe)();\n};\n\nNzToCssUnitPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({\n  name: \"nzToCssUnit\",\n  type: NzToCssUnitPipe,\n  pure: true\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NzToCssUnitPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'nzToCssUnit'\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: time-range.pipe.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar NzTimeRangePipe = /*#__PURE__*/function () {\n  function NzTimeRangePipe() {\n    _classCallCheck(this, NzTimeRangePipe);\n  }\n\n  _createClass(NzTimeRangePipe, [{\n    key: \"transform\",\n    value:\n    /**\n     * @param {?} value\n     * @param {?=} format\n     * @return {?}\n     */\n    function transform(value) {\n      var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'HH:mm:ss';\n\n      /** @type {?} */\n      var duration = Number(value || 0);\n      return timeUnits.reduce(\n      /**\n      * @param {?} current\n      * @param {?} __1\n      * @return {?}\n      */\n      function (current, _ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            name = _ref2[0],\n            unit = _ref2[1];\n\n        if (current.indexOf(name) !== -1) {\n          /** @type {?} */\n          var v = Math.floor(duration / unit);\n          duration -= v * unit;\n          return current.replace(new RegExp(\"\".concat(name, \"+\"), 'g'),\n          /**\n          * @param {?} match\n          * @return {?}\n          */\n          function (match) {\n            return padStart(v.toString(), match.length, '0');\n          });\n        }\n\n        return current;\n      }, format);\n    }\n  }]);\n\n  return NzTimeRangePipe;\n}();\n\nNzTimeRangePipe.ɵfac = function NzTimeRangePipe_Factory(t) {\n  return new (t || NzTimeRangePipe)();\n};\n\nNzTimeRangePipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({\n  name: \"nzTimeRange\",\n  type: NzTimeRangePipe,\n  pure: true\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NzTimeRangePipe, [{\n    type: Pipe,\n    args: [{\n      name: 'nzTimeRange',\n      pure: true\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: nz-pipe.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar NzPipesModule = /*#__PURE__*/_createClass(function NzPipesModule() {\n  _classCallCheck(this, NzPipesModule);\n});\n\nNzPipesModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: NzPipesModule\n});\nNzPipesModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function NzPipesModule_Factory(t) {\n    return new (t || NzPipesModule)();\n  },\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NzPipesModule, {\n    declarations: function declarations() {\n      return [NzTimeRangePipe, NzToCssUnitPipe];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [NzTimeRangePipe, NzToCssUnitPipe];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NzPipesModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      exports: [NzTimeRangePipe, NzToCssUnitPipe],\n      declarations: [NzTimeRangePipe, NzToCssUnitPipe]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: ng-zorro-antd-core-pipe.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { NzPipesModule, NzTimeRangePipe, NzToCssUnitPipe };","map":{"version":3,"sources":["ng-zorro-antd/core/pipe/nz-css-unit.pipe.ts","ng-zorro-antd/core/pipe/time-range.pipe.ts","ng-zorro-antd/core/pipe/nz-pipe.module.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'nzToCssUnit'\n})\nexport class NzToCssUnitPipe implements PipeTransform {\n  transform(value: number | string, defaultUnit: string = 'px'): string {\n    const formatted = +value; // force convert\n    return isNaN(formatted) ? `${value}` : `${formatted}${defaultUnit}`;\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { timeUnits } from 'ng-zorro-antd/core/time';\nimport { padStart } from 'ng-zorro-antd/core/util';\n\n@Pipe({\n  name: 'nzTimeRange',\n  pure: true\n})\nexport class NzTimeRangePipe implements PipeTransform {\n  transform(value: string | number, format: string = 'HH:mm:ss'): string {\n    let duration = Number(value || 0);\n\n    return timeUnits.reduce((current, [name, unit]) => {\n      if (current.indexOf(name) !== -1) {\n        const v = Math.floor(duration / unit);\n        duration -= v * unit;\n        return current.replace(new RegExp(`${name}+`, 'g'), (match: string) => {\n          return padStart(v.toString(), match.length, '0');\n        });\n      }\n      return current;\n    }, format);\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { NzToCssUnitPipe } from './nz-css-unit.pipe';\nimport { NzTimeRangePipe } from './time-range.pipe';\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [NzTimeRangePipe, NzToCssUnitPipe],\n  declarations: [NzTimeRangePipe, NzToCssUnitPipe]\n})\nexport class NzPipesModule {}\n"]},"metadata":{},"sourceType":"module"}