{"ast":null,"code":"import _createForOfIteratorHelper from \"D:/master-sp-new/Biz1Maket_Single_Store/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _defineProperty from \"D:/master-sp-new/Biz1Maket_Single_Store/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _inherits from \"D:/master-sp-new/Biz1Maket_Single_Store/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"D:/master-sp-new/Biz1Maket_Single_Store/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _createClass from \"D:/master-sp-new/Biz1Maket_Single_Store/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"D:/master-sp-new/Biz1Maket_Single_Store/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { Injectable, EventEmitter, InjectionToken, Inject, Directive, ElementRef, ChangeDetectorRef, Input, Pipe, NgModule } from '@angular/core';\nimport { of, isObservable, forkJoin, concat, defer } from 'rxjs';\nimport { take, shareReplay, map, concatMap, switchMap } from 'rxjs/operators';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @abstract\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nvar TranslateLoader = /*#__PURE__*/_createClass(function TranslateLoader() {\n  _classCallCheck(this, TranslateLoader);\n});\n\nif (false) {\n  /**\n   * @abstract\n   * @param {?} lang\n   * @return {?}\n   */\n  TranslateLoader.prototype.getTranslation = function (lang) {};\n}\n/**\n * This loader is just a placeholder that does nothing, in case you don't need a loader at all\n */\n\n\nvar TranslateFakeLoader = /*#__PURE__*/function (_TranslateLoader) {\n  _inherits(TranslateFakeLoader, _TranslateLoader);\n\n  var _super = _createSuper(TranslateFakeLoader);\n\n  function TranslateFakeLoader() {\n    _classCallCheck(this, TranslateFakeLoader);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(TranslateFakeLoader, [{\n    key: \"getTranslation\",\n    value:\n    /**\n     * @param {?} lang\n     * @return {?}\n     */\n    function getTranslation(lang) {\n      return of({});\n    }\n  }]);\n\n  return TranslateFakeLoader;\n}(TranslateLoader);\n\nTranslateFakeLoader.ɵfac = function TranslateFakeLoader_Factory(t) {\n  return ɵTranslateFakeLoader_BaseFactory(t || TranslateFakeLoader);\n};\n\nTranslateFakeLoader.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: TranslateFakeLoader,\n  factory: TranslateFakeLoader.ɵfac\n});\nvar ɵTranslateFakeLoader_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(TranslateFakeLoader);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(TranslateFakeLoader, [{\n    type: Injectable\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @record\n */\n\n\nfunction MissingTranslationHandlerParams() {}\n\nif (false) {\n  /**\n   * the key that's missing in translation files\n   * @type {?}\n   */\n  MissingTranslationHandlerParams.prototype.key;\n  /**\n   * an instance of the service that was unable to translate the key.\n   * @type {?}\n   */\n\n  MissingTranslationHandlerParams.prototype.translateService;\n  /**\n   * interpolation params that were passed along for translating the given key.\n   * @type {?|undefined}\n   */\n\n  MissingTranslationHandlerParams.prototype.interpolateParams;\n}\n/**\n * @abstract\n */\n\n\nvar MissingTranslationHandler = /*#__PURE__*/_createClass(function MissingTranslationHandler() {\n  _classCallCheck(this, MissingTranslationHandler);\n});\n\nif (false) {\n  /**\n   * A function that handles missing translations.\n   *\n   * @abstract\n   * @param {?} params context for resolving a missing translation\n   * @return {?} a value or an observable\n   * If it returns a value, then this value is used.\n   * If it return an observable, the value returned by this observable will be used (except if the method was \"instant\").\n   * If it doesn't return then the key will be used as a value\n   */\n  MissingTranslationHandler.prototype.handle = function (params) {};\n}\n/**\n * This handler is just a placeholder that does nothing, in case you don't need a missing translation handler at all\n */\n\n\nvar FakeMissingTranslationHandler = /*#__PURE__*/function () {\n  function FakeMissingTranslationHandler() {\n    _classCallCheck(this, FakeMissingTranslationHandler);\n  }\n\n  _createClass(FakeMissingTranslationHandler, [{\n    key: \"handle\",\n    value:\n    /**\n     * @param {?} params\n     * @return {?}\n     */\n    function handle(params) {\n      return params.key;\n    }\n  }]);\n\n  return FakeMissingTranslationHandler;\n}();\n\nFakeMissingTranslationHandler.ɵfac = function FakeMissingTranslationHandler_Factory(t) {\n  return new (t || FakeMissingTranslationHandler)();\n};\n\nFakeMissingTranslationHandler.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: FakeMissingTranslationHandler,\n  factory: FakeMissingTranslationHandler.ɵfac\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(FakeMissingTranslationHandler, [{\n    type: Injectable\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/* tslint:disable */\n\n/**\n * Determines if two objects or two values are equivalent.\n *\n * Two objects or values are considered equivalent if at least one of the following is true:\n *\n * * Both objects or values pass `===` comparison.\n * * Both objects or values are of the same type and all of their properties are equal by\n *   comparing them with `equals`.\n *\n * @param {?} o1 Object or value to compare.\n * @param {?} o2 Object or value to compare.\n * @return {?} true if arguments are equal.\n */\n\n\nfunction equals(o1, o2) {\n  if (o1 === o2) return true;\n  if (o1 === null || o2 === null) return false;\n  if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN\n  // NaN === NaN\n\n  /** @type {?} */\n\n  var t1 = typeof o1;\n  /** @type {?} */\n\n  var t2 = typeof o2;\n  /** @type {?} */\n\n  var length;\n  /** @type {?} */\n\n  var key;\n  /** @type {?} */\n\n  var keySet;\n\n  if (t1 == t2 && t1 == 'object') {\n    if (Array.isArray(o1)) {\n      if (!Array.isArray(o2)) return false;\n\n      if ((length = o1.length) == o2.length) {\n        for (key = 0; key < length; key++) {\n          if (!equals(o1[key], o2[key])) return false;\n        }\n\n        return true;\n      }\n    } else {\n      if (Array.isArray(o2)) {\n        return false;\n      }\n\n      keySet = Object.create(null);\n\n      for (key in o1) {\n        if (!equals(o1[key], o2[key])) {\n          return false;\n        }\n\n        keySet[key] = true;\n      }\n\n      for (key in o2) {\n        if (!(key in keySet) && typeof o2[key] !== 'undefined') {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }\n\n  return false;\n}\n/* tslint:enable */\n\n/**\n * @param {?} value\n * @return {?}\n */\n\n\nfunction isDefined(value) {\n  return typeof value !== 'undefined' && value !== null;\n}\n/**\n * @param {?} item\n * @return {?}\n */\n\n\nfunction isObject(item) {\n  return item && typeof item === 'object' && !Array.isArray(item);\n}\n/**\n * @param {?} target\n * @param {?} source\n * @return {?}\n */\n\n\nfunction mergeDeep(target, source) {\n  /** @type {?} */\n  var output = Object.assign({}, target);\n\n  if (isObject(target) && isObject(source)) {\n    Object.keys(source).forEach(\n    /**\n    * @param {?} key\n    * @return {?}\n    */\n    function (key) {\n      if (isObject(source[key])) {\n        if (!(key in target)) {\n          Object.assign(output, _defineProperty({}, key, source[key]));\n        } else {\n          output[key] = mergeDeep(target[key], source[key]);\n        }\n      } else {\n        Object.assign(output, _defineProperty({}, key, source[key]));\n      }\n    });\n  }\n\n  return output;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @abstract\n */\n\n\nvar TranslateParser = /*#__PURE__*/_createClass(function TranslateParser() {\n  _classCallCheck(this, TranslateParser);\n});\n\nif (false) {\n  /**\n   * Interpolates a string to replace parameters\n   * \"This is a {{ key }}\" ==> \"This is a value\", with params = { key: \"value\" }\n   * @abstract\n   * @param {?} expr\n   * @param {?=} params\n   * @return {?}\n   */\n  TranslateParser.prototype.interpolate = function (expr, params) {};\n  /**\n   * Gets a value from an object by composed key\n   * parser.getValue({ key1: { keyA: 'valueI' }}, 'key1.keyA') ==> 'valueI'\n   * @abstract\n   * @param {?} target\n   * @param {?} key\n   * @return {?}\n   */\n\n\n  TranslateParser.prototype.getValue = function (target, key) {};\n}\n\nvar TranslateDefaultParser = /*#__PURE__*/function (_TranslateParser) {\n  _inherits(TranslateDefaultParser, _TranslateParser);\n\n  var _super2 = _createSuper(TranslateDefaultParser);\n\n  function TranslateDefaultParser() {\n    var _this;\n\n    _classCallCheck(this, TranslateDefaultParser);\n\n    _this = _super2.apply(this, arguments);\n    _this.templateMatcher = /{{\\s?([^{}\\s]*)\\s?}}/g;\n    return _this;\n  }\n  /**\n   * @param {?} expr\n   * @param {?=} params\n   * @return {?}\n   */\n\n\n  _createClass(TranslateDefaultParser, [{\n    key: \"interpolate\",\n    value: function interpolate(expr, params) {\n      /** @type {?} */\n      var result;\n\n      if (typeof expr === 'string') {\n        result = this.interpolateString(expr, params);\n      } else if (typeof expr === 'function') {\n        result = this.interpolateFunction(expr, params);\n      } else {\n        // this should not happen, but an unrelated TranslateService test depends on it\n        result =\n        /** @type {?} */\n        expr;\n      }\n\n      return result;\n    }\n    /**\n     * @param {?} target\n     * @param {?} key\n     * @return {?}\n     */\n\n  }, {\n    key: \"getValue\",\n    value: function getValue(target, key) {\n      /** @type {?} */\n      var keys = typeof key === 'string' ? key.split('.') : [key];\n      key = '';\n\n      do {\n        key += keys.shift();\n\n        if (isDefined(target) && isDefined(target[key]) && (typeof target[key] === 'object' || !keys.length)) {\n          target = target[key];\n          key = '';\n        } else if (!keys.length) {\n          target = undefined;\n        } else {\n          key += '.';\n        }\n      } while (keys.length);\n\n      return target;\n    }\n    /**\n     * @private\n     * @param {?} fn\n     * @param {?=} params\n     * @return {?}\n     */\n\n  }, {\n    key: \"interpolateFunction\",\n    value: function interpolateFunction(fn, params) {\n      return fn(params);\n    }\n    /**\n     * @private\n     * @param {?} expr\n     * @param {?=} params\n     * @return {?}\n     */\n\n  }, {\n    key: \"interpolateString\",\n    value: function interpolateString(expr, params) {\n      var _this2 = this;\n\n      if (!params) {\n        return expr;\n      }\n\n      return expr.replace(this.templateMatcher,\n      /**\n      * @param {?} substring\n      * @param {?} b\n      * @return {?}\n      */\n      function (substring, b) {\n        /** @type {?} */\n        var r = _this2.getValue(params, b);\n\n        return isDefined(r) ? r : substring;\n      });\n    }\n  }]);\n\n  return TranslateDefaultParser;\n}(TranslateParser);\n\nTranslateDefaultParser.ɵfac = function TranslateDefaultParser_Factory(t) {\n  return ɵTranslateDefaultParser_BaseFactory(t || TranslateDefaultParser);\n};\n\nTranslateDefaultParser.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: TranslateDefaultParser,\n  factory: TranslateDefaultParser.ɵfac\n});\nvar ɵTranslateDefaultParser_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(TranslateDefaultParser);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(TranslateDefaultParser, [{\n    type: Injectable\n  }], null, null);\n})();\n\nif (false) {\n  /** @type {?} */\n  TranslateDefaultParser.prototype.templateMatcher;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @abstract\n */\n\n\nvar TranslateCompiler = /*#__PURE__*/_createClass(function TranslateCompiler() {\n  _classCallCheck(this, TranslateCompiler);\n});\n\nif (false) {\n  /**\n   * @abstract\n   * @param {?} value\n   * @param {?} lang\n   * @return {?}\n   */\n  TranslateCompiler.prototype.compile = function (value, lang) {};\n  /**\n   * @abstract\n   * @param {?} translations\n   * @param {?} lang\n   * @return {?}\n   */\n\n\n  TranslateCompiler.prototype.compileTranslations = function (translations, lang) {};\n}\n/**\n * This compiler is just a placeholder that does nothing, in case you don't need a compiler at all\n */\n\n\nvar TranslateFakeCompiler = /*#__PURE__*/function (_TranslateCompiler) {\n  _inherits(TranslateFakeCompiler, _TranslateCompiler);\n\n  var _super3 = _createSuper(TranslateFakeCompiler);\n\n  function TranslateFakeCompiler() {\n    _classCallCheck(this, TranslateFakeCompiler);\n\n    return _super3.apply(this, arguments);\n  }\n\n  _createClass(TranslateFakeCompiler, [{\n    key: \"compile\",\n    value:\n    /**\n     * @param {?} value\n     * @param {?} lang\n     * @return {?}\n     */\n    function compile(value, lang) {\n      return value;\n    }\n    /**\n     * @param {?} translations\n     * @param {?} lang\n     * @return {?}\n     */\n\n  }, {\n    key: \"compileTranslations\",\n    value: function compileTranslations(translations, lang) {\n      return translations;\n    }\n  }]);\n\n  return TranslateFakeCompiler;\n}(TranslateCompiler);\n\nTranslateFakeCompiler.ɵfac = function TranslateFakeCompiler_Factory(t) {\n  return ɵTranslateFakeCompiler_BaseFactory(t || TranslateFakeCompiler);\n};\n\nTranslateFakeCompiler.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: TranslateFakeCompiler,\n  factory: TranslateFakeCompiler.ɵfac\n});\nvar ɵTranslateFakeCompiler_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(TranslateFakeCompiler);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(TranslateFakeCompiler, [{\n    type: Injectable\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar TranslateStore = /*#__PURE__*/_createClass(function TranslateStore() {\n  _classCallCheck(this, TranslateStore);\n\n  /**\n   * The lang currently used\n   */\n  this.currentLang = this.defaultLang;\n  /**\n   * a list of translations per lang\n   */\n\n  this.translations = {};\n  /**\n   * an array of langs\n   */\n\n  this.langs = [];\n  /**\n   * An EventEmitter to listen to translation change events\n   * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n   *     // do something\n   * });\n   */\n\n  this.onTranslationChange = new EventEmitter();\n  /**\n   * An EventEmitter to listen to lang change events\n   * onLangChange.subscribe((params: LangChangeEvent) => {\n   *     // do something\n   * });\n   */\n\n  this.onLangChange = new EventEmitter();\n  /**\n   * An EventEmitter to listen to default lang change events\n   * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n   *     // do something\n   * });\n   */\n\n  this.onDefaultLangChange = new EventEmitter();\n});\n\nif (false) {\n  /**\n   * The default lang to fallback when translations are missing on the current lang\n   * @type {?}\n   */\n  TranslateStore.prototype.defaultLang;\n  /**\n   * The lang currently used\n   * @type {?}\n   */\n\n  TranslateStore.prototype.currentLang;\n  /**\n   * a list of translations per lang\n   * @type {?}\n   */\n\n  TranslateStore.prototype.translations;\n  /**\n   * an array of langs\n   * @type {?}\n   */\n\n  TranslateStore.prototype.langs;\n  /**\n   * An EventEmitter to listen to translation change events\n   * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n   *     // do something\n   * });\n   * @type {?}\n   */\n\n  TranslateStore.prototype.onTranslationChange;\n  /**\n   * An EventEmitter to listen to lang change events\n   * onLangChange.subscribe((params: LangChangeEvent) => {\n   *     // do something\n   * });\n   * @type {?}\n   */\n\n  TranslateStore.prototype.onLangChange;\n  /**\n   * An EventEmitter to listen to default lang change events\n   * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n   *     // do something\n   * });\n   * @type {?}\n   */\n\n  TranslateStore.prototype.onDefaultLangChange;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar USE_STORE = new InjectionToken('USE_STORE');\n/** @type {?} */\n\nvar USE_DEFAULT_LANG = new InjectionToken('USE_DEFAULT_LANG');\n/** @type {?} */\n\nvar DEFAULT_LANGUAGE = new InjectionToken('DEFAULT_LANGUAGE');\n/** @type {?} */\n\nvar USE_EXTEND = new InjectionToken('USE_EXTEND');\n/**\n * @record\n */\n\nfunction TranslationChangeEvent() {}\n\nif (false) {\n  /** @type {?} */\n  TranslationChangeEvent.prototype.translations;\n  /** @type {?} */\n\n  TranslationChangeEvent.prototype.lang;\n}\n/**\n * @record\n */\n\n\nfunction LangChangeEvent() {}\n\nif (false) {\n  /** @type {?} */\n  LangChangeEvent.prototype.lang;\n  /** @type {?} */\n\n  LangChangeEvent.prototype.translations;\n}\n/**\n * @record\n */\n\n\nfunction DefaultLangChangeEvent() {}\n\nif (false) {\n  /** @type {?} */\n  DefaultLangChangeEvent.prototype.lang;\n  /** @type {?} */\n\n  DefaultLangChangeEvent.prototype.translations;\n}\n\nvar TranslateService = /*#__PURE__*/function () {\n  /**\n   *\n   * @param {?} store an instance of the store (that is supposed to be unique)\n   * @param {?} currentLoader An instance of the loader currently used\n   * @param {?} compiler An instance of the compiler currently used\n   * @param {?} parser An instance of the parser currently used\n   * @param {?} missingTranslationHandler A handler for missing translations.\n   * @param {?=} useDefaultLang whether we should use default language translation when current language translation is missing.\n   * @param {?=} isolate whether this service should use the store or not\n   * @param {?=} extend To make a child module extend (and use) translations from parent modules.\n   * @param {?=} defaultLanguage Set the default language using configuration\n   */\n  function TranslateService(store, currentLoader, compiler, parser, missingTranslationHandler) {\n    var useDefaultLang = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n    var isolate = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n    var extend = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : false;\n    var defaultLanguage = arguments.length > 8 ? arguments[8] : undefined;\n\n    _classCallCheck(this, TranslateService);\n\n    this.store = store;\n    this.currentLoader = currentLoader;\n    this.compiler = compiler;\n    this.parser = parser;\n    this.missingTranslationHandler = missingTranslationHandler;\n    this.useDefaultLang = useDefaultLang;\n    this.isolate = isolate;\n    this.extend = extend;\n    this.pending = false;\n    this._onTranslationChange = new EventEmitter();\n    this._onLangChange = new EventEmitter();\n    this._onDefaultLangChange = new EventEmitter();\n    this._langs = [];\n    this._translations = {};\n    this._translationRequests = {};\n    /** set the default language from configuration */\n\n    if (defaultLanguage) {\n      this.setDefaultLang(defaultLanguage);\n    }\n  }\n  /**\n   * An EventEmitter to listen to translation change events\n   * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n   *     // do something\n   * });\n   * @return {?}\n   */\n\n\n  _createClass(TranslateService, [{\n    key: \"onTranslationChange\",\n    get: function get() {\n      return this.isolate ? this._onTranslationChange : this.store.onTranslationChange;\n    }\n    /**\n     * An EventEmitter to listen to lang change events\n     * onLangChange.subscribe((params: LangChangeEvent) => {\n     *     // do something\n     * });\n     * @return {?}\n     */\n\n  }, {\n    key: \"onLangChange\",\n    get: function get() {\n      return this.isolate ? this._onLangChange : this.store.onLangChange;\n    }\n    /**\n     * An EventEmitter to listen to default lang change events\n     * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n     *     // do something\n     * });\n     * @return {?}\n     */\n\n  }, {\n    key: \"onDefaultLangChange\",\n    get: function get() {\n      return this.isolate ? this._onDefaultLangChange : this.store.onDefaultLangChange;\n    }\n    /**\n     * The default lang to fallback when translations are missing on the current lang\n     * @return {?}\n     */\n\n  }, {\n    key: \"defaultLang\",\n    get: function get() {\n      return this.isolate ? this._defaultLang : this.store.defaultLang;\n    }\n    /**\n     * @param {?} defaultLang\n     * @return {?}\n     */\n    ,\n    set: function set(defaultLang) {\n      if (this.isolate) {\n        this._defaultLang = defaultLang;\n      } else {\n        this.store.defaultLang = defaultLang;\n      }\n    }\n    /**\n     * The lang currently used\n     * @return {?}\n     */\n\n  }, {\n    key: \"currentLang\",\n    get: function get() {\n      return this.isolate ? this._currentLang : this.store.currentLang;\n    }\n    /**\n     * @param {?} currentLang\n     * @return {?}\n     */\n    ,\n    set: function set(currentLang) {\n      if (this.isolate) {\n        this._currentLang = currentLang;\n      } else {\n        this.store.currentLang = currentLang;\n      }\n    }\n    /**\n     * an array of langs\n     * @return {?}\n     */\n\n  }, {\n    key: \"langs\",\n    get: function get() {\n      return this.isolate ? this._langs : this.store.langs;\n    }\n    /**\n     * @param {?} langs\n     * @return {?}\n     */\n    ,\n    set: function set(langs) {\n      if (this.isolate) {\n        this._langs = langs;\n      } else {\n        this.store.langs = langs;\n      }\n    }\n    /**\n     * a list of translations per lang\n     * @return {?}\n     */\n\n  }, {\n    key: \"translations\",\n    get: function get() {\n      return this.isolate ? this._translations : this.store.translations;\n    }\n    /**\n     * @param {?} translations\n     * @return {?}\n     */\n    ,\n    set: function set(translations) {\n      if (this.isolate) {\n        this._translations = translations;\n      } else {\n        this.store.translations = translations;\n      }\n    }\n    /**\n     * Sets the default language to use as a fallback\n     * @param {?} lang\n     * @return {?}\n     */\n\n  }, {\n    key: \"setDefaultLang\",\n    value: function setDefaultLang(lang) {\n      var _this3 = this;\n\n      if (lang === this.defaultLang) {\n        return;\n      }\n      /** @type {?} */\n\n\n      var pending = this.retrieveTranslations(lang);\n\n      if (typeof pending !== \"undefined\") {\n        // on init set the defaultLang immediately\n        if (this.defaultLang == null) {\n          this.defaultLang = lang;\n        }\n\n        pending.pipe(take(1)).subscribe(\n        /**\n        * @param {?} res\n        * @return {?}\n        */\n        function (res) {\n          _this3.changeDefaultLang(lang);\n        });\n      } else {\n        // we already have this language\n        this.changeDefaultLang(lang);\n      }\n    }\n    /**\n     * Gets the default language used\n     * @return {?}\n     */\n\n  }, {\n    key: \"getDefaultLang\",\n    value: function getDefaultLang() {\n      return this.defaultLang;\n    }\n    /**\n     * Changes the lang currently used\n     * @param {?} lang\n     * @return {?}\n     */\n\n  }, {\n    key: \"use\",\n    value: function use(lang) {\n      var _this4 = this;\n\n      // don't change the language if the language given is already selected\n      if (lang === this.currentLang) {\n        return of(this.translations[lang]);\n      }\n      /** @type {?} */\n\n\n      var pending = this.retrieveTranslations(lang);\n\n      if (typeof pending !== \"undefined\") {\n        // on init set the currentLang immediately\n        if (!this.currentLang) {\n          this.currentLang = lang;\n        }\n\n        pending.pipe(take(1)).subscribe(\n        /**\n        * @param {?} res\n        * @return {?}\n        */\n        function (res) {\n          _this4.changeLang(lang);\n        });\n        return pending;\n      } else {\n        // we have this language, return an Observable\n        this.changeLang(lang);\n        return of(this.translations[lang]);\n      }\n    }\n    /**\n     * Retrieves the given translations\n     * @private\n     * @param {?} lang\n     * @return {?}\n     */\n\n  }, {\n    key: \"retrieveTranslations\",\n    value: function retrieveTranslations(lang) {\n      /** @type {?} */\n      var pending; // if this language is unavailable or extend is true, ask for it\n\n      if (typeof this.translations[lang] === \"undefined\" || this.extend) {\n        this._translationRequests[lang] = this._translationRequests[lang] || this.getTranslation(lang);\n        pending = this._translationRequests[lang];\n      }\n\n      return pending;\n    }\n    /**\n     * Gets an object of translations for a given language with the current loader\n     * and passes it through the compiler\n     * @param {?} lang\n     * @return {?}\n     */\n\n  }, {\n    key: \"getTranslation\",\n    value: function getTranslation(lang) {\n      var _this5 = this;\n\n      this.pending = true;\n      /** @type {?} */\n\n      var loadingTranslations = this.currentLoader.getTranslation(lang).pipe(shareReplay(1), take(1));\n      this.loadingTranslations = loadingTranslations.pipe(map(\n      /**\n      * @param {?} res\n      * @return {?}\n      */\n      function (res) {\n        return _this5.compiler.compileTranslations(res, lang);\n      }), shareReplay(1), take(1));\n      this.loadingTranslations.subscribe({\n        next:\n        /**\n        * @param {?} res\n        * @return {?}\n        */\n        function next(res) {\n          _this5.translations[lang] = _this5.extend && _this5.translations[lang] ? Object.assign(Object.assign({}, res), _this5.translations[lang]) : res;\n\n          _this5.updateLangs();\n\n          _this5.pending = false;\n        },\n        error:\n        /**\n        * @param {?} err\n        * @return {?}\n        */\n        function error(err) {\n          _this5.pending = false;\n        }\n      });\n      return loadingTranslations;\n    }\n    /**\n     * Manually sets an object of translations for a given language\n     * after passing it through the compiler\n     * @param {?} lang\n     * @param {?} translations\n     * @param {?=} shouldMerge\n     * @return {?}\n     */\n\n  }, {\n    key: \"setTranslation\",\n    value: function setTranslation(lang, translations) {\n      var shouldMerge = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      translations = this.compiler.compileTranslations(translations, lang);\n\n      if ((shouldMerge || this.extend) && this.translations[lang]) {\n        this.translations[lang] = mergeDeep(this.translations[lang], translations);\n      } else {\n        this.translations[lang] = translations;\n      }\n\n      this.updateLangs();\n      this.onTranslationChange.emit({\n        lang: lang,\n        translations: this.translations[lang]\n      });\n    }\n    /**\n     * Returns an array of currently available langs\n     * @return {?}\n     */\n\n  }, {\n    key: \"getLangs\",\n    value: function getLangs() {\n      return this.langs;\n    }\n    /**\n     * Add available langs\n     * @param {?} langs\n     * @return {?}\n     */\n\n  }, {\n    key: \"addLangs\",\n    value: function addLangs(langs) {\n      var _this6 = this;\n\n      langs.forEach(\n      /**\n      * @param {?} lang\n      * @return {?}\n      */\n      function (lang) {\n        if (_this6.langs.indexOf(lang) === -1) {\n          _this6.langs.push(lang);\n        }\n      });\n    }\n    /**\n     * Update the list of available langs\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"updateLangs\",\n    value: function updateLangs() {\n      this.addLangs(Object.keys(this.translations));\n    }\n    /**\n     * Returns the parsed result of the translations\n     * @param {?} translations\n     * @param {?} key\n     * @param {?=} interpolateParams\n     * @return {?}\n     */\n\n  }, {\n    key: \"getParsedResult\",\n    value: function getParsedResult(translations, key, interpolateParams) {\n      /** @type {?} */\n      var res;\n\n      if (key instanceof Array) {\n        /** @type {?} */\n        var result = {};\n        /** @type {?} */\n\n        var observables = false;\n\n        var _iterator = _createForOfIteratorHelper(key),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var k = _step.value;\n            result[k] = this.getParsedResult(translations, k, interpolateParams);\n\n            if (isObservable(result[k])) {\n              observables = true;\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        if (observables) {\n          /** @type {?} */\n          var sources = key.map(\n          /**\n          * @param {?} k\n          * @return {?}\n          */\n          function (k) {\n            return isObservable(result[k]) ? result[k] : of(\n            /** @type {?} */\n            result[k]);\n          });\n          return forkJoin(sources).pipe(map(\n          /**\n          * @param {?} arr\n          * @return {?}\n          */\n          function (arr) {\n            /** @type {?} */\n            var obj = {};\n            arr.forEach(\n            /**\n            * @param {?} value\n            * @param {?} index\n            * @return {?}\n            */\n            function (value, index) {\n              obj[key[index]] = value;\n            });\n            return obj;\n          }));\n        }\n\n        return result;\n      }\n\n      if (translations) {\n        res = this.parser.interpolate(this.parser.getValue(translations, key), interpolateParams);\n      }\n\n      if (typeof res === \"undefined\" && this.defaultLang != null && this.defaultLang !== this.currentLang && this.useDefaultLang) {\n        res = this.parser.interpolate(this.parser.getValue(this.translations[this.defaultLang], key), interpolateParams);\n      }\n\n      if (typeof res === \"undefined\") {\n        /** @type {?} */\n        var params = {\n          key: key,\n          translateService: this\n        };\n\n        if (typeof interpolateParams !== 'undefined') {\n          params.interpolateParams = interpolateParams;\n        }\n\n        res = this.missingTranslationHandler.handle(params);\n      }\n\n      return typeof res !== \"undefined\" ? res : key;\n    }\n    /**\n     * Gets the translated value of a key (or an array of keys)\n     * @param {?} key\n     * @param {?=} interpolateParams\n     * @return {?} the translated key, or an object of translated keys\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(key, interpolateParams) {\n      var _this7 = this;\n\n      if (!isDefined(key) || !key.length) {\n        throw new Error(\"Parameter \\\"key\\\" required\");\n      } // check if we are loading a new translation to use\n\n\n      if (this.pending) {\n        return this.loadingTranslations.pipe(concatMap(\n        /**\n        * @param {?} res\n        * @return {?}\n        */\n        function (res) {\n          res = _this7.getParsedResult(res, key, interpolateParams);\n          return isObservable(res) ? res : of(res);\n        }));\n      } else {\n        /** @type {?} */\n        var res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n        return isObservable(res) ? res : of(res);\n      }\n    }\n    /**\n     * Returns a stream of translated values of a key (or an array of keys) which updates\n     * whenever the translation changes.\n     * @param {?} key\n     * @param {?=} interpolateParams\n     * @return {?} A stream of the translated key, or an object of translated keys\n     */\n\n  }, {\n    key: \"getStreamOnTranslationChange\",\n    value: function getStreamOnTranslationChange(key, interpolateParams) {\n      var _this8 = this;\n\n      if (!isDefined(key) || !key.length) {\n        throw new Error(\"Parameter \\\"key\\\" required\");\n      }\n\n      return concat(defer(\n      /**\n      * @return {?}\n      */\n      function () {\n        return _this8.get(key, interpolateParams);\n      }), this.onTranslationChange.pipe(switchMap(\n      /**\n      * @param {?} event\n      * @return {?}\n      */\n      function (event) {\n        /** @type {?} */\n        var res = _this8.getParsedResult(event.translations, key, interpolateParams);\n\n        if (typeof res.subscribe === 'function') {\n          return res;\n        } else {\n          return of(res);\n        }\n      })));\n    }\n    /**\n     * Returns a stream of translated values of a key (or an array of keys) which updates\n     * whenever the language changes.\n     * @param {?} key\n     * @param {?=} interpolateParams\n     * @return {?} A stream of the translated key, or an object of translated keys\n     */\n\n  }, {\n    key: \"stream\",\n    value: function stream(key, interpolateParams) {\n      var _this9 = this;\n\n      if (!isDefined(key) || !key.length) {\n        throw new Error(\"Parameter \\\"key\\\" required\");\n      }\n\n      return concat(defer(\n      /**\n      * @return {?}\n      */\n      function () {\n        return _this9.get(key, interpolateParams);\n      }), this.onLangChange.pipe(switchMap(\n      /**\n      * @param {?} event\n      * @return {?}\n      */\n      function (event) {\n        /** @type {?} */\n        var res = _this9.getParsedResult(event.translations, key, interpolateParams);\n\n        return isObservable(res) ? res : of(res);\n      })));\n    }\n    /**\n     * Returns a translation instantly from the internal state of loaded translation.\n     * All rules regarding the current language, the preferred language of even fallback languages will be used except any promise handling.\n     * @param {?} key\n     * @param {?=} interpolateParams\n     * @return {?}\n     */\n\n  }, {\n    key: \"instant\",\n    value: function instant(key, interpolateParams) {\n      if (!isDefined(key) || !key.length) {\n        throw new Error(\"Parameter \\\"key\\\" required\");\n      }\n      /** @type {?} */\n\n\n      var res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n\n      if (isObservable(res)) {\n        if (key instanceof Array) {\n          /** @type {?} */\n          var obj = {};\n          key.forEach(\n          /**\n          * @param {?} value\n          * @param {?} index\n          * @return {?}\n          */\n          function (value, index) {\n            obj[key[index]] = key[index];\n          });\n          return obj;\n        }\n\n        return key;\n      } else {\n        return res;\n      }\n    }\n    /**\n     * Sets the translated value of a key, after compiling it\n     * @param {?} key\n     * @param {?} value\n     * @param {?=} lang\n     * @return {?}\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(key, value) {\n      var lang = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.currentLang;\n      this.translations[lang][key] = this.compiler.compile(value, lang);\n      this.updateLangs();\n      this.onTranslationChange.emit({\n        lang: lang,\n        translations: this.translations[lang]\n      });\n    }\n    /**\n     * Changes the current lang\n     * @private\n     * @param {?} lang\n     * @return {?}\n     */\n\n  }, {\n    key: \"changeLang\",\n    value: function changeLang(lang) {\n      this.currentLang = lang;\n      this.onLangChange.emit({\n        lang: lang,\n        translations: this.translations[lang]\n      }); // if there is no default lang, use the one that we just set\n\n      if (this.defaultLang == null) {\n        this.changeDefaultLang(lang);\n      }\n    }\n    /**\n     * Changes the default lang\n     * @private\n     * @param {?} lang\n     * @return {?}\n     */\n\n  }, {\n    key: \"changeDefaultLang\",\n    value: function changeDefaultLang(lang) {\n      this.defaultLang = lang;\n      this.onDefaultLangChange.emit({\n        lang: lang,\n        translations: this.translations[lang]\n      });\n    }\n    /**\n     * Allows to reload the lang file from the file\n     * @param {?} lang\n     * @return {?}\n     */\n\n  }, {\n    key: \"reloadLang\",\n    value: function reloadLang(lang) {\n      this.resetLang(lang);\n      return this.getTranslation(lang);\n    }\n    /**\n     * Deletes inner translation\n     * @param {?} lang\n     * @return {?}\n     */\n\n  }, {\n    key: \"resetLang\",\n    value: function resetLang(lang) {\n      this._translationRequests[lang] = undefined;\n      this.translations[lang] = undefined;\n    }\n    /**\n     * Returns the language code name from the browser, e.g. \"de\"\n     * @return {?}\n     */\n\n  }, {\n    key: \"getBrowserLang\",\n    value: function getBrowserLang() {\n      if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n        return undefined;\n      }\n      /** @type {?} */\n\n\n      var browserLang = window.navigator.languages ? window.navigator.languages[0] : null;\n      browserLang = browserLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n\n      if (typeof browserLang === 'undefined') {\n        return undefined;\n      }\n\n      if (browserLang.indexOf('-') !== -1) {\n        browserLang = browserLang.split('-')[0];\n      }\n\n      if (browserLang.indexOf('_') !== -1) {\n        browserLang = browserLang.split('_')[0];\n      }\n\n      return browserLang;\n    }\n    /**\n     * Returns the culture language code name from the browser, e.g. \"de-DE\"\n     * @return {?}\n     */\n\n  }, {\n    key: \"getBrowserCultureLang\",\n    value: function getBrowserCultureLang() {\n      if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n        return undefined;\n      }\n      /** @type {?} */\n\n\n      var browserCultureLang = window.navigator.languages ? window.navigator.languages[0] : null;\n      browserCultureLang = browserCultureLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n      return browserCultureLang;\n    }\n  }]);\n\n  return TranslateService;\n}();\n\nTranslateService.ɵfac = function TranslateService_Factory(t) {\n  return new (t || TranslateService)(ɵngcc0.ɵɵinject(TranslateStore), ɵngcc0.ɵɵinject(TranslateLoader), ɵngcc0.ɵɵinject(TranslateCompiler), ɵngcc0.ɵɵinject(TranslateParser), ɵngcc0.ɵɵinject(MissingTranslationHandler), ɵngcc0.ɵɵinject(USE_DEFAULT_LANG), ɵngcc0.ɵɵinject(USE_STORE), ɵngcc0.ɵɵinject(USE_EXTEND), ɵngcc0.ɵɵinject(DEFAULT_LANGUAGE));\n};\n\nTranslateService.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: TranslateService,\n  factory: TranslateService.ɵfac\n});\n/** @nocollapse */\n\nTranslateService.ctorParameters = function () {\n  return [{\n    type: TranslateStore\n  }, {\n    type: TranslateLoader\n  }, {\n    type: TranslateCompiler\n  }, {\n    type: TranslateParser\n  }, {\n    type: MissingTranslationHandler\n  }, {\n    type: Boolean,\n    decorators: [{\n      type: Inject,\n      args: [USE_DEFAULT_LANG]\n    }]\n  }, {\n    type: Boolean,\n    decorators: [{\n      type: Inject,\n      args: [USE_STORE]\n    }]\n  }, {\n    type: Boolean,\n    decorators: [{\n      type: Inject,\n      args: [USE_EXTEND]\n    }]\n  }, {\n    type: String,\n    decorators: [{\n      type: Inject,\n      args: [DEFAULT_LANGUAGE]\n    }]\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(TranslateService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: TranslateStore\n    }, {\n      type: TranslateLoader\n    }, {\n      type: TranslateCompiler\n    }, {\n      type: TranslateParser\n    }, {\n      type: MissingTranslationHandler\n    }, {\n      type: Boolean,\n      decorators: [{\n        type: Inject,\n        args: [USE_DEFAULT_LANG]\n      }]\n    }, {\n      type: Boolean,\n      decorators: [{\n        type: Inject,\n        args: [USE_STORE]\n      }]\n    }, {\n      type: Boolean,\n      decorators: [{\n        type: Inject,\n        args: [USE_EXTEND]\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Inject,\n        args: [DEFAULT_LANGUAGE]\n      }]\n    }];\n  }, null);\n})();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  TranslateService.prototype.loadingTranslations;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TranslateService.prototype.pending;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TranslateService.prototype._onTranslationChange;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TranslateService.prototype._onLangChange;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TranslateService.prototype._onDefaultLangChange;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TranslateService.prototype._defaultLang;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TranslateService.prototype._currentLang;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TranslateService.prototype._langs;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TranslateService.prototype._translations;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TranslateService.prototype._translationRequests;\n  /** @type {?} */\n\n  TranslateService.prototype.store;\n  /** @type {?} */\n\n  TranslateService.prototype.currentLoader;\n  /** @type {?} */\n\n  TranslateService.prototype.compiler;\n  /** @type {?} */\n\n  TranslateService.prototype.parser;\n  /** @type {?} */\n\n  TranslateService.prototype.missingTranslationHandler;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TranslateService.prototype.useDefaultLang;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TranslateService.prototype.isolate;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TranslateService.prototype.extend;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar TranslateDirective = /*#__PURE__*/function () {\n  /**\n   * @param {?} translateService\n   * @param {?} element\n   * @param {?} _ref\n   */\n  function TranslateDirective(translateService, element, _ref) {\n    var _this10 = this;\n\n    _classCallCheck(this, TranslateDirective);\n\n    this.translateService = translateService;\n    this.element = element;\n    this._ref = _ref; // subscribe to onTranslationChange event, in case the translations of the current lang change\n\n    if (!this.onTranslationChangeSub) {\n      this.onTranslationChangeSub = this.translateService.onTranslationChange.subscribe(\n      /**\n      * @param {?} event\n      * @return {?}\n      */\n      function (event) {\n        if (event.lang === _this10.translateService.currentLang) {\n          _this10.checkNodes(true, event.translations);\n        }\n      });\n    } // subscribe to onLangChange event, in case the language changes\n\n\n    if (!this.onLangChangeSub) {\n      this.onLangChangeSub = this.translateService.onLangChange.subscribe(\n      /**\n      * @param {?} event\n      * @return {?}\n      */\n      function (event) {\n        _this10.checkNodes(true, event.translations);\n      });\n    } // subscribe to onDefaultLangChange event, in case the default language changes\n\n\n    if (!this.onDefaultLangChangeSub) {\n      this.onDefaultLangChangeSub = this.translateService.onDefaultLangChange.subscribe(\n      /**\n      * @param {?} event\n      * @return {?}\n      */\n      function (event) {\n        _this10.checkNodes(true);\n      });\n    }\n  }\n  /**\n   * @param {?} key\n   * @return {?}\n   */\n\n\n  _createClass(TranslateDirective, [{\n    key: \"translate\",\n    set: function set(key) {\n      if (key) {\n        this.key = key;\n        this.checkNodes();\n      }\n    }\n    /**\n     * @param {?} params\n     * @return {?}\n     */\n\n  }, {\n    key: \"translateParams\",\n    set: function set(params) {\n      if (!equals(this.currentParams, params)) {\n        this.currentParams = params;\n        this.checkNodes(true);\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterViewChecked\",\n    value: function ngAfterViewChecked() {\n      this.checkNodes();\n    }\n    /**\n     * @param {?=} forceUpdate\n     * @param {?=} translations\n     * @return {?}\n     */\n\n  }, {\n    key: \"checkNodes\",\n    value: function checkNodes() {\n      var forceUpdate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var translations = arguments.length > 1 ? arguments[1] : undefined;\n\n      /** @type {?} */\n      var nodes = this.element.nativeElement.childNodes; // if the element is empty\n\n      if (!nodes.length) {\n        // we add the key as content\n        this.setContent(this.element.nativeElement, this.key);\n        nodes = this.element.nativeElement.childNodes;\n      }\n\n      for (var i = 0; i < nodes.length; ++i) {\n        /** @type {?} */\n        var node = nodes[i];\n\n        if (node.nodeType === 3) {\n          // node type 3 is a text node\n          // node type 3 is a text node\n\n          /** @type {?} */\n          var key = void 0;\n\n          if (forceUpdate) {\n            node.lastKey = null;\n          }\n\n          if (isDefined(node.lookupKey)) {\n            key = node.lookupKey;\n          } else if (this.key) {\n            key = this.key;\n          } else {\n            /** @type {?} */\n            var content = this.getContent(node);\n            /** @type {?} */\n\n            var trimmedContent = content.trim();\n\n            if (trimmedContent.length) {\n              node.lookupKey = trimmedContent; // we want to use the content as a key, not the translation value\n\n              if (content !== node.currentValue) {\n                key = trimmedContent; // the content was changed from the user, we'll use it as a reference if needed\n\n                node.originalContent = content || node.originalContent;\n              } else if (node.originalContent) {\n                // the content seems ok, but the lang has changed\n                // the current content is the translation, not the key, use the last real content as key\n                key = node.originalContent.trim();\n              } else if (content !== node.currentValue) {\n                // we want to use the content as a key, not the translation value\n                key = trimmedContent; // the content was changed from the user, we'll use it as a reference if needed\n\n                node.originalContent = content || node.originalContent;\n              }\n            }\n          }\n\n          this.updateValue(key, node, translations);\n        }\n      }\n    }\n    /**\n     * @param {?} key\n     * @param {?} node\n     * @param {?} translations\n     * @return {?}\n     */\n\n  }, {\n    key: \"updateValue\",\n    value: function updateValue(key, node, translations) {\n      var _this11 = this;\n\n      if (key) {\n        if (node.lastKey === key && this.lastParams === this.currentParams) {\n          return;\n        }\n\n        this.lastParams = this.currentParams;\n        /** @type {?} */\n\n        var onTranslation =\n        /**\n        * @param {?} res\n        * @return {?}\n        */\n        function onTranslation(res) {\n          if (res !== key) {\n            node.lastKey = key;\n          }\n\n          if (!node.originalContent) {\n            node.originalContent = _this11.getContent(node);\n          }\n\n          node.currentValue = isDefined(res) ? res : node.originalContent || key; // we replace in the original content to preserve spaces that we might have trimmed\n\n          _this11.setContent(node, _this11.key ? node.currentValue : node.originalContent.replace(key, node.currentValue));\n\n          _this11._ref.markForCheck();\n        };\n\n        if (isDefined(translations)) {\n          /** @type {?} */\n          var res = this.translateService.getParsedResult(translations, key, this.currentParams);\n\n          if (isObservable(res)) {\n            res.subscribe(onTranslation);\n          } else {\n            onTranslation(res);\n          }\n        } else {\n          this.translateService.get(key, this.currentParams).subscribe(onTranslation);\n        }\n      }\n    }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n\n  }, {\n    key: \"getContent\",\n    value: function getContent(node) {\n      return isDefined(node.textContent) ? node.textContent : node.data;\n    }\n    /**\n     * @param {?} node\n     * @param {?} content\n     * @return {?}\n     */\n\n  }, {\n    key: \"setContent\",\n    value: function setContent(node, content) {\n      if (isDefined(node.textContent)) {\n        node.textContent = content;\n      } else {\n        node.data = content;\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this.onLangChangeSub) {\n        this.onLangChangeSub.unsubscribe();\n      }\n\n      if (this.onDefaultLangChangeSub) {\n        this.onDefaultLangChangeSub.unsubscribe();\n      }\n\n      if (this.onTranslationChangeSub) {\n        this.onTranslationChangeSub.unsubscribe();\n      }\n    }\n  }]);\n\n  return TranslateDirective;\n}();\n\nTranslateDirective.ɵfac = function TranslateDirective_Factory(t) {\n  return new (t || TranslateDirective)(ɵngcc0.ɵɵdirectiveInject(TranslateService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n};\n\nTranslateDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: TranslateDirective,\n  selectors: [[\"\", \"translate\", \"\"], [\"\", \"ngx-translate\", \"\"]],\n  inputs: {\n    translate: \"translate\",\n    translateParams: \"translateParams\"\n  }\n});\n/** @nocollapse */\n\nTranslateDirective.ctorParameters = function () {\n  return [{\n    type: TranslateService\n  }, {\n    type: ElementRef\n  }, {\n    type: ChangeDetectorRef\n  }];\n};\n\nTranslateDirective.propDecorators = {\n  translate: [{\n    type: Input\n  }],\n  translateParams: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(TranslateDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[translate],[ngx-translate]'\n    }]\n  }], function () {\n    return [{\n      type: TranslateService\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }];\n  }, {\n    translate: [{\n      type: Input\n    }],\n    translateParams: [{\n      type: Input\n    }]\n  });\n})();\n\nif (false) {\n  /** @type {?} */\n  TranslateDirective.prototype.key;\n  /** @type {?} */\n\n  TranslateDirective.prototype.lastParams;\n  /** @type {?} */\n\n  TranslateDirective.prototype.currentParams;\n  /** @type {?} */\n\n  TranslateDirective.prototype.onLangChangeSub;\n  /** @type {?} */\n\n  TranslateDirective.prototype.onDefaultLangChangeSub;\n  /** @type {?} */\n\n  TranslateDirective.prototype.onTranslationChangeSub;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TranslateDirective.prototype.translateService;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TranslateDirective.prototype.element;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TranslateDirective.prototype._ref;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar TranslatePipe = /*#__PURE__*/function () {\n  /**\n   * @param {?} translate\n   * @param {?} _ref\n   */\n  function TranslatePipe(translate, _ref) {\n    _classCallCheck(this, TranslatePipe);\n\n    this.translate = translate;\n    this._ref = _ref;\n    this.value = '';\n  }\n  /**\n   * @param {?} key\n   * @param {?=} interpolateParams\n   * @param {?=} translations\n   * @return {?}\n   */\n\n\n  _createClass(TranslatePipe, [{\n    key: \"updateValue\",\n    value: function updateValue(key, interpolateParams, translations) {\n      var _this12 = this;\n\n      /** @type {?} */\n      var onTranslation =\n      /**\n      * @param {?} res\n      * @return {?}\n      */\n      function onTranslation(res) {\n        _this12.value = res !== undefined ? res : key;\n        _this12.lastKey = key;\n\n        _this12._ref.markForCheck();\n      };\n\n      if (translations) {\n        /** @type {?} */\n        var res = this.translate.getParsedResult(translations, key, interpolateParams);\n\n        if (isObservable(res.subscribe)) {\n          res.subscribe(onTranslation);\n        } else {\n          onTranslation(res);\n        }\n      }\n\n      this.translate.get(key, interpolateParams).subscribe(onTranslation);\n    }\n    /**\n     * @param {?} query\n     * @param {...?} args\n     * @return {?}\n     */\n\n  }, {\n    key: \"transform\",\n    value: function transform(query) {\n      var _this13 = this;\n\n      if (!query || !query.length) {\n        return query;\n      } // if we ask another time for the same key, return the last value\n\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      if (equals(query, this.lastKey) && equals(args, this.lastParams)) {\n        return this.value;\n      }\n      /** @type {?} */\n\n\n      var interpolateParams;\n\n      if (isDefined(args[0]) && args.length) {\n        if (typeof args[0] === 'string' && args[0].length) {\n          // we accept objects written in the template such as {n:1}, {'n':1}, {n:'v'}\n          // which is why we might need to change it to real JSON objects such as {\"n\":1} or {\"n\":\"v\"}\n\n          /** @type {?} */\n          var validArgs = args[0].replace(/(\\')?([a-zA-Z0-9_]+)(\\')?(\\s)?:/g, '\"$2\":').replace(/:(\\s)?(\\')(.*?)(\\')/g, ':\"$3\"');\n\n          try {\n            interpolateParams = JSON.parse(validArgs);\n          } catch (e) {\n            throw new SyntaxError(\"Wrong parameter in TranslatePipe. Expected a valid Object, received: \".concat(args[0]));\n          }\n        } else if (typeof args[0] === 'object' && !Array.isArray(args[0])) {\n          interpolateParams = args[0];\n        }\n      } // store the query, in case it changes\n\n\n      this.lastKey = query; // store the params, in case they change\n\n      this.lastParams = args; // set the value\n\n      this.updateValue(query, interpolateParams); // if there is a subscription to onLangChange, clean it\n\n      this._dispose(); // subscribe to onTranslationChange event, in case the translations change\n\n\n      if (!this.onTranslationChange) {\n        this.onTranslationChange = this.translate.onTranslationChange.subscribe(\n        /**\n        * @param {?} event\n        * @return {?}\n        */\n        function (event) {\n          if (_this13.lastKey && event.lang === _this13.translate.currentLang) {\n            _this13.lastKey = null;\n\n            _this13.updateValue(query, interpolateParams, event.translations);\n          }\n        });\n      } // subscribe to onLangChange event, in case the language changes\n\n\n      if (!this.onLangChange) {\n        this.onLangChange = this.translate.onLangChange.subscribe(\n        /**\n        * @param {?} event\n        * @return {?}\n        */\n        function (event) {\n          if (_this13.lastKey) {\n            _this13.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n\n            _this13.updateValue(query, interpolateParams, event.translations);\n          }\n        });\n      } // subscribe to onDefaultLangChange event, in case the default language changes\n\n\n      if (!this.onDefaultLangChange) {\n        this.onDefaultLangChange = this.translate.onDefaultLangChange.subscribe(\n        /**\n        * @return {?}\n        */\n        function () {\n          if (_this13.lastKey) {\n            _this13.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n\n            _this13.updateValue(query, interpolateParams);\n          }\n        });\n      }\n\n      return this.value;\n    }\n    /**\n     * Clean any existing subscription to change events\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_dispose\",\n    value: function _dispose() {\n      if (typeof this.onTranslationChange !== 'undefined') {\n        this.onTranslationChange.unsubscribe();\n        this.onTranslationChange = undefined;\n      }\n\n      if (typeof this.onLangChange !== 'undefined') {\n        this.onLangChange.unsubscribe();\n        this.onLangChange = undefined;\n      }\n\n      if (typeof this.onDefaultLangChange !== 'undefined') {\n        this.onDefaultLangChange.unsubscribe();\n        this.onDefaultLangChange = undefined;\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._dispose();\n    }\n  }]);\n\n  return TranslatePipe;\n}();\n\nTranslatePipe.ɵfac = function TranslatePipe_Factory(t) {\n  return new (t || TranslatePipe)(ɵngcc0.ɵɵdirectiveInject(TranslateService), ɵngcc0.ɵɵinjectPipeChangeDetectorRef());\n};\n\nTranslatePipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({\n  name: \"translate\",\n  type: TranslatePipe,\n  pure: false\n});\nTranslatePipe.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: TranslatePipe,\n  factory: TranslatePipe.ɵfac\n});\n/** @nocollapse */\n\nTranslatePipe.ctorParameters = function () {\n  return [{\n    type: TranslateService\n  }, {\n    type: ChangeDetectorRef\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(TranslatePipe, [{\n    type: Injectable\n  }, {\n    type: Pipe,\n    args: [{\n      name: 'translate',\n      pure: false // required to update the value when the promise is resolved\n\n    }]\n  }], function () {\n    return [{\n      type: TranslateService\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }];\n  }, null);\n})();\n\nif (false) {\n  /** @type {?} */\n  TranslatePipe.prototype.value;\n  /** @type {?} */\n\n  TranslatePipe.prototype.lastKey;\n  /** @type {?} */\n\n  TranslatePipe.prototype.lastParams;\n  /** @type {?} */\n\n  TranslatePipe.prototype.onTranslationChange;\n  /** @type {?} */\n\n  TranslatePipe.prototype.onLangChange;\n  /** @type {?} */\n\n  TranslatePipe.prototype.onDefaultLangChange;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TranslatePipe.prototype.translate;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TranslatePipe.prototype._ref;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @record\n */\n\n\nfunction TranslateModuleConfig() {}\n\nif (false) {\n  /** @type {?|undefined} */\n  TranslateModuleConfig.prototype.loader;\n  /** @type {?|undefined} */\n\n  TranslateModuleConfig.prototype.compiler;\n  /** @type {?|undefined} */\n\n  TranslateModuleConfig.prototype.parser;\n  /** @type {?|undefined} */\n\n  TranslateModuleConfig.prototype.missingTranslationHandler;\n  /** @type {?|undefined} */\n\n  TranslateModuleConfig.prototype.isolate;\n  /** @type {?|undefined} */\n\n  TranslateModuleConfig.prototype.extend;\n  /** @type {?|undefined} */\n\n  TranslateModuleConfig.prototype.useDefaultLang;\n  /** @type {?|undefined} */\n\n  TranslateModuleConfig.prototype.defaultLanguage;\n}\n\nvar TranslateModule = /*#__PURE__*/function () {\n  function TranslateModule() {\n    _classCallCheck(this, TranslateModule);\n  }\n\n  _createClass(TranslateModule, null, [{\n    key: \"forRoot\",\n    value:\n    /**\n     * Use this method in your root module to provide the TranslateService\n     * @param {?=} config\n     * @return {?}\n     */\n    function forRoot() {\n      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return {\n        ngModule: TranslateModule,\n        providers: [config.loader || {\n          provide: TranslateLoader,\n          useClass: TranslateFakeLoader\n        }, config.compiler || {\n          provide: TranslateCompiler,\n          useClass: TranslateFakeCompiler\n        }, config.parser || {\n          provide: TranslateParser,\n          useClass: TranslateDefaultParser\n        }, config.missingTranslationHandler || {\n          provide: MissingTranslationHandler,\n          useClass: FakeMissingTranslationHandler\n        }, TranslateStore, {\n          provide: USE_STORE,\n          useValue: config.isolate\n        }, {\n          provide: USE_DEFAULT_LANG,\n          useValue: config.useDefaultLang\n        }, {\n          provide: USE_EXTEND,\n          useValue: config.extend\n        }, {\n          provide: DEFAULT_LANGUAGE,\n          useValue: config.defaultLanguage\n        }, TranslateService]\n      };\n    }\n    /**\n     * Use this method in your other (non root) modules to import the directive/pipe\n     * @param {?=} config\n     * @return {?}\n     */\n\n  }, {\n    key: \"forChild\",\n    value: function forChild() {\n      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return {\n        ngModule: TranslateModule,\n        providers: [config.loader || {\n          provide: TranslateLoader,\n          useClass: TranslateFakeLoader\n        }, config.compiler || {\n          provide: TranslateCompiler,\n          useClass: TranslateFakeCompiler\n        }, config.parser || {\n          provide: TranslateParser,\n          useClass: TranslateDefaultParser\n        }, config.missingTranslationHandler || {\n          provide: MissingTranslationHandler,\n          useClass: FakeMissingTranslationHandler\n        }, {\n          provide: USE_STORE,\n          useValue: config.isolate\n        }, {\n          provide: USE_DEFAULT_LANG,\n          useValue: config.useDefaultLang\n        }, {\n          provide: USE_EXTEND,\n          useValue: config.extend\n        }, {\n          provide: DEFAULT_LANGUAGE,\n          useValue: config.defaultLanguage\n        }, TranslateService]\n      };\n    }\n  }]);\n\n  return TranslateModule;\n}();\n\nTranslateModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: TranslateModule\n});\nTranslateModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function TranslateModule_Factory(t) {\n    return new (t || TranslateModule)();\n  }\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TranslateModule, {\n    declarations: [TranslatePipe, TranslateDirective],\n    exports: [TranslatePipe, TranslateDirective]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(TranslateModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [TranslatePipe, TranslateDirective],\n      exports: [TranslatePipe, TranslateDirective]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { DEFAULT_LANGUAGE, FakeMissingTranslationHandler, MissingTranslationHandler, TranslateCompiler, TranslateDefaultParser, TranslateDirective, TranslateFakeCompiler, TranslateFakeLoader, TranslateLoader, TranslateModule, TranslateParser, TranslatePipe, TranslateService, TranslateStore, USE_DEFAULT_LANG, USE_EXTEND, USE_STORE };","map":{"version":3,"sources":["@ngx-translate/core/lib/translate.loader.ts","@ngx-translate/core/lib/missing-translation-handler.ts","@ngx-translate/core/lib/util.ts","@ngx-translate/core/lib/translate.parser.ts","@ngx-translate/core/lib/translate.compiler.ts","@ngx-translate/core/lib/translate.store.ts","@ngx-translate/core/lib/translate.service.ts","@ngx-translate/core/lib/translate.directive.ts","@ngx-translate/core/lib/translate.pipe.ts","@ngx-translate/core/public_api.ts"],"names":[],"mappings":"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","sourcesContent":["import {Injectable} from \"@angular/core\";\nimport {Observable, of} from \"rxjs\";\n\nexport abstract class TranslateLoader {\n  abstract getTranslation(lang: string): Observable<any>;\n}\n\n/**\n * This loader is just a placeholder that does nothing, in case you don't need a loader at all\n */\n@Injectable()\nexport class TranslateFakeLoader extends TranslateLoader {\n  getTranslation(lang: string): Observable<any> {\n    return of({});\n  }\n}\n","import {Injectable} from \"@angular/core\";\nimport {TranslateService} from \"./translate.service\";\n\nexport interface MissingTranslationHandlerParams {\n  /**\n   * the key that's missing in translation files\n   */\n  key: string;\n\n  /**\n   * an instance of the service that was unable to translate the key.\n   */\n  translateService: TranslateService;\n\n  /**\n   * interpolation params that were passed along for translating the given key.\n   */\n  interpolateParams?: Object;\n}\n\nexport abstract class MissingTranslationHandler {\n  /**\n   * A function that handles missing translations.\n   *\n   * @param params context for resolving a missing translation\n   * @returns a value or an observable\n   * If it returns a value, then this value is used.\n   * If it return an observable, the value returned by this observable will be used (except if the method was \"instant\").\n   * If it doesn't return then the key will be used as a value\n   */\n  abstract handle(params: MissingTranslationHandlerParams): any;\n}\n\n/**\n * This handler is just a placeholder that does nothing, in case you don't need a missing translation handler at all\n */\n@Injectable()\nexport class FakeMissingTranslationHandler implements MissingTranslationHandler {\n  handle(params: MissingTranslationHandlerParams): string {\n    return params.key;\n  }\n}\n","/* tslint:disable */\n/**\n * Determines if two objects or two values are equivalent.\n *\n * Two objects or values are considered equivalent if at least one of the following is true:\n *\n * * Both objects or values pass `===` comparison.\n * * Both objects or values are of the same type and all of their properties are equal by\n *   comparing them with `equals`.\n *\n * @param o1 Object or value to compare.\n * @param o2 Object or value to compare.\n * @returns true if arguments are equal.\n */\nexport function equals(o1: any, o2: any): boolean {\n  if (o1 === o2) return true;\n  if (o1 === null || o2 === null) return false;\n  if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN\n  let t1 = typeof o1, t2 = typeof o2, length: number, key: any, keySet: any;\n  if (t1 == t2 && t1 == 'object') {\n    if (Array.isArray(o1)) {\n      if (!Array.isArray(o2)) return false;\n      if ((length = o1.length) == o2.length) {\n        for (key = 0; key < length; key++) {\n          if (!equals(o1[key], o2[key])) return false;\n        }\n        return true;\n      }\n    } else {\n      if (Array.isArray(o2)) {\n        return false;\n      }\n      keySet = Object.create(null);\n      for (key in o1) {\n        if (!equals(o1[key], o2[key])) {\n          return false;\n        }\n        keySet[key] = true;\n      }\n      for (key in o2) {\n        if (!(key in keySet) && typeof o2[key] !== 'undefined') {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n  return false;\n}\n/* tslint:enable */\n\nexport function isDefined(value: any): boolean {\n  return typeof value !== 'undefined' && value !== null;\n}\n\nexport function isObject(item: any): boolean {\n  return (item && typeof item === 'object' && !Array.isArray(item));\n}\n\nexport function mergeDeep(target: any, source: any): any {\n  let output = Object.assign({}, target);\n  if (isObject(target) && isObject(source)) {\n    Object.keys(source).forEach((key: any) => {\n      if (isObject(source[key])) {\n        if (!(key in target)) {\n          Object.assign(output, {[key]: source[key]});\n        } else {\n          output[key] = mergeDeep(target[key], source[key]);\n        }\n      } else {\n        Object.assign(output, {[key]: source[key]});\n      }\n    });\n  }\n  return output;\n}\n","import {Injectable} from \"@angular/core\";\nimport {isDefined} from \"./util\";\n\nexport abstract class TranslateParser {\n  /**\n   * Interpolates a string to replace parameters\n   * \"This is a {{ key }}\" ==> \"This is a value\", with params = { key: \"value\" }\n   * @param expr\n   * @param params\n   */\n  abstract interpolate(expr: string | Function, params?: any): string;\n\n  /**\n   * Gets a value from an object by composed key\n   * parser.getValue({ key1: { keyA: 'valueI' }}, 'key1.keyA') ==> 'valueI'\n   * @param target\n   * @param key\n   */\n  abstract getValue(target: any, key: string): any\n}\n\n@Injectable()\nexport class TranslateDefaultParser extends TranslateParser {\n  templateMatcher: RegExp = /{{\\s?([^{}\\s]*)\\s?}}/g;\n\n  public interpolate(expr: string | Function, params?: any): string {\n    let result: string;\n\n    if (typeof expr === 'string') {\n      result = this.interpolateString(expr, params);\n    } else if (typeof expr === 'function') {\n      result = this.interpolateFunction(expr, params);\n    } else {\n      // this should not happen, but an unrelated TranslateService test depends on it\n      result = expr as string;\n    }\n\n    return result;\n  }\n\n  getValue(target: any, key: string): any {\n    let keys = typeof key === 'string' ? key.split('.') : [key];\n    key = '';\n    do {\n      key += keys.shift();\n      if (isDefined(target) && isDefined(target[key]) && (typeof target[key] === 'object' || !keys.length)) {\n        target = target[key];\n        key = '';\n      } else if (!keys.length) {\n        target = undefined;\n      } else {\n        key += '.';\n      }\n    } while (keys.length);\n\n    return target;\n  }\n\n  private interpolateFunction(fn: Function, params?: any) {\n    return fn(params);\n  }\n\n  private interpolateString(expr: string, params?: any) {\n    if (!params) {\n      return expr;\n    }\n\n    return expr.replace(this.templateMatcher, (substring: string, b: string) => {\n      let r = this.getValue(params, b);\n      return isDefined(r) ? r : substring;\n    });\n  }\n}\n","import {Injectable} from \"@angular/core\";\n\nexport abstract class TranslateCompiler {\n  abstract compile(value: string, lang: string): string | Function;\n\n  abstract compileTranslations(translations: any, lang: string): any;\n}\n\n/**\n * This compiler is just a placeholder that does nothing, in case you don't need a compiler at all\n */\n@Injectable()\nexport class TranslateFakeCompiler extends TranslateCompiler {\n  compile(value: string, lang: string): string | Function {\n    return value;\n  }\n\n  compileTranslations(translations: any, lang: string): any {\n    return translations;\n  }\n}\n","import {EventEmitter} from \"@angular/core\";\nimport {DefaultLangChangeEvent, LangChangeEvent, TranslationChangeEvent} from \"./translate.service\";\n\nexport class TranslateStore {\n  /**\n   * The default lang to fallback when translations are missing on the current lang\n   */\n  public defaultLang: string;\n\n  /**\n   * The lang currently used\n   */\n  public currentLang: string = this.defaultLang;\n\n  /**\n   * a list of translations per lang\n   */\n  public translations: any = {};\n\n  /**\n   * an array of langs\n   */\n  public langs: Array<string> = [];\n\n  /**\n   * An EventEmitter to listen to translation change events\n   * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n     *     // do something\n     * });\n   */\n  public onTranslationChange: EventEmitter<TranslationChangeEvent> = new EventEmitter<TranslationChangeEvent>();\n\n  /**\n   * An EventEmitter to listen to lang change events\n   * onLangChange.subscribe((params: LangChangeEvent) => {\n     *     // do something\n     * });\n   */\n  public onLangChange: EventEmitter<LangChangeEvent> = new EventEmitter<LangChangeEvent>();\n\n  /**\n   * An EventEmitter to listen to default lang change events\n   * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n     *     // do something\n     * });\n   */\n  public onDefaultLangChange: EventEmitter<DefaultLangChangeEvent> = new EventEmitter<DefaultLangChangeEvent>();\n}\n","import {EventEmitter, Inject, Injectable, InjectionToken} from \"@angular/core\";\nimport {concat, forkJoin, isObservable, Observable, of, defer} from \"rxjs\";\nimport {concatMap, map, shareReplay, switchMap, take} from \"rxjs/operators\";\nimport {MissingTranslationHandler, MissingTranslationHandlerParams} from \"./missing-translation-handler\";\nimport {TranslateCompiler} from \"./translate.compiler\";\nimport {TranslateLoader} from \"./translate.loader\";\nimport {TranslateParser} from \"./translate.parser\";\n\nimport {TranslateStore} from \"./translate.store\";\nimport {isDefined, mergeDeep} from \"./util\";\n\nexport const USE_STORE = new InjectionToken<string>('USE_STORE');\nexport const USE_DEFAULT_LANG = new InjectionToken<string>('USE_DEFAULT_LANG');\nexport const DEFAULT_LANGUAGE = new InjectionToken<string>('DEFAULT_LANGUAGE');\nexport const USE_EXTEND = new InjectionToken<string>('USE_EXTEND');\n\nexport interface TranslationChangeEvent {\n  translations: any;\n  lang: string;\n}\n\nexport interface LangChangeEvent {\n  lang: string;\n  translations: any;\n}\n\nexport interface DefaultLangChangeEvent {\n  lang: string;\n  translations: any;\n}\n\ndeclare interface Window {\n  navigator: any;\n}\n\ndeclare const window: Window;\n\n@Injectable()\nexport class TranslateService {\n  private loadingTranslations: Observable<any>;\n  private pending: boolean = false;\n  private _onTranslationChange: EventEmitter<TranslationChangeEvent> = new EventEmitter<TranslationChangeEvent>();\n  private _onLangChange: EventEmitter<LangChangeEvent> = new EventEmitter<LangChangeEvent>();\n  private _onDefaultLangChange: EventEmitter<DefaultLangChangeEvent> = new EventEmitter<DefaultLangChangeEvent>();\n  private _defaultLang: string;\n  private _currentLang: string;\n  private _langs: Array<string> = [];\n  private _translations: any = {};\n  private _translationRequests: any = {};\n\n  /**\n   * An EventEmitter to listen to translation change events\n   * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n     *     // do something\n     * });\n   */\n  get onTranslationChange(): EventEmitter<TranslationChangeEvent> {\n    return this.isolate ? this._onTranslationChange : this.store.onTranslationChange;\n  }\n\n  /**\n   * An EventEmitter to listen to lang change events\n   * onLangChange.subscribe((params: LangChangeEvent) => {\n     *     // do something\n     * });\n   */\n  get onLangChange(): EventEmitter<LangChangeEvent> {\n    return this.isolate ? this._onLangChange : this.store.onLangChange;\n  }\n\n  /**\n   * An EventEmitter to listen to default lang change events\n   * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n     *     // do something\n     * });\n   */\n  get onDefaultLangChange() {\n    return this.isolate ? this._onDefaultLangChange : this.store.onDefaultLangChange;\n  }\n\n  /**\n   * The default lang to fallback when translations are missing on the current lang\n   */\n  get defaultLang(): string {\n    return this.isolate ? this._defaultLang : this.store.defaultLang;\n  }\n\n  set defaultLang(defaultLang: string) {\n    if (this.isolate) {\n      this._defaultLang = defaultLang;\n    } else {\n      this.store.defaultLang = defaultLang;\n    }\n  }\n\n  /**\n   * The lang currently used\n   */\n  get currentLang(): string {\n    return this.isolate ? this._currentLang : this.store.currentLang;\n  }\n\n  set currentLang(currentLang: string) {\n    if (this.isolate) {\n      this._currentLang = currentLang;\n    } else {\n      this.store.currentLang = currentLang;\n    }\n  }\n\n  /**\n   * an array of langs\n   */\n  get langs(): string[] {\n    return this.isolate ? this._langs : this.store.langs;\n  }\n\n  set langs(langs: string[]) {\n    if (this.isolate) {\n      this._langs = langs;\n    } else {\n      this.store.langs = langs;\n    }\n  }\n\n  /**\n   * a list of translations per lang\n   */\n  get translations(): any {\n    return this.isolate ? this._translations : this.store.translations;\n  }\n\n  set translations(translations: any) {\n    if (this.isolate) {\n      this._translations = translations;\n    } else {\n      this.store.translations = translations;\n    }\n  }\n\n  /**\n   *\n   * @param store an instance of the store (that is supposed to be unique)\n   * @param currentLoader An instance of the loader currently used\n   * @param compiler An instance of the compiler currently used\n   * @param parser An instance of the parser currently used\n   * @param missingTranslationHandler A handler for missing translations.\n   * @param useDefaultLang whether we should use default language translation when current language translation is missing.\n   * @param isolate whether this service should use the store or not\n   * @param extend To make a child module extend (and use) translations from parent modules.\n   * @param defaultLanguage Set the default language using configuration\n   */\n  constructor(public store: TranslateStore,\n              public currentLoader: TranslateLoader,\n              public compiler: TranslateCompiler,\n              public parser: TranslateParser,\n              public missingTranslationHandler: MissingTranslationHandler,\n              @Inject(USE_DEFAULT_LANG) private useDefaultLang: boolean = true,\n              @Inject(USE_STORE) private isolate: boolean = false,\n              @Inject(USE_EXTEND) private extend: boolean = false,\n              @Inject(DEFAULT_LANGUAGE) defaultLanguage: string) {\n    /** set the default language from configuration */\n    if (defaultLanguage) {\n      this.setDefaultLang(defaultLanguage);\n    }\n  }\n\n  /**\n   * Sets the default language to use as a fallback\n   */\n  public setDefaultLang(lang: string): void {\n    if (lang === this.defaultLang) {\n      return;\n    }\n\n    let pending: Observable<any> = this.retrieveTranslations(lang);\n\n    if (typeof pending !== \"undefined\") {\n      // on init set the defaultLang immediately\n      if (this.defaultLang == null) {\n        this.defaultLang = lang;\n      }\n\n      pending.pipe(take(1))\n        .subscribe((res: any) => {\n          this.changeDefaultLang(lang);\n        });\n    } else { // we already have this language\n      this.changeDefaultLang(lang);\n    }\n  }\n\n  /**\n   * Gets the default language used\n   */\n  public getDefaultLang(): string {\n    return this.defaultLang;\n  }\n\n  /**\n   * Changes the lang currently used\n   */\n  public use(lang: string): Observable<any> {\n    // don't change the language if the language given is already selected\n    if (lang === this.currentLang) {\n      return of(this.translations[lang]);\n    }\n\n    let pending: Observable<any> = this.retrieveTranslations(lang);\n\n    if (typeof pending !== \"undefined\") {\n      // on init set the currentLang immediately\n      if (!this.currentLang) {\n        this.currentLang = lang;\n      }\n\n      pending.pipe(take(1))\n        .subscribe((res: any) => {\n          this.changeLang(lang);\n        });\n\n      return pending;\n    } else { // we have this language, return an Observable\n      this.changeLang(lang);\n\n      return of(this.translations[lang]);\n    }\n  }\n\n  /**\n   * Retrieves the given translations\n   */\n  private retrieveTranslations(lang: string): Observable<any> {\n    let pending: Observable<any>;\n\n    // if this language is unavailable or extend is true, ask for it\n    if (typeof this.translations[lang] === \"undefined\" || this.extend) {\n      this._translationRequests[lang] = this._translationRequests[lang] || this.getTranslation(lang);\n      pending = this._translationRequests[lang];\n    }\n\n    return pending;\n  }\n\n  /**\n   * Gets an object of translations for a given language with the current loader\n   * and passes it through the compiler\n   */\n  public getTranslation(lang: string): Observable<any> {\n    this.pending = true;\n    const loadingTranslations = this.currentLoader.getTranslation(lang).pipe(\n      shareReplay(1),\n      take(1),\n    );\n\n    this.loadingTranslations = loadingTranslations.pipe(\n      map((res: Object) => this.compiler.compileTranslations(res, lang)),\n      shareReplay(1),\n      take(1),\n    );\n\n    this.loadingTranslations\n      .subscribe({\n        next: (res: Object) => {\n          this.translations[lang] = this.extend && this.translations[lang] ? { ...res, ...this.translations[lang] } : res;\n          this.updateLangs();\n          this.pending = false;\n        },\n        error: (err: any) => {\n          this.pending = false;\n        }\n      });\n\n    return loadingTranslations;\n  }\n\n  /**\n   * Manually sets an object of translations for a given language\n   * after passing it through the compiler\n   */\n  public setTranslation(lang: string, translations: Object, shouldMerge: boolean = false): void {\n    translations = this.compiler.compileTranslations(translations, lang);\n    if ((shouldMerge || this.extend) && this.translations[lang]) {\n      this.translations[lang] = mergeDeep(this.translations[lang], translations);\n    } else {\n      this.translations[lang] = translations;\n    }\n    this.updateLangs();\n    this.onTranslationChange.emit({lang: lang, translations: this.translations[lang]});\n  }\n\n  /**\n   * Returns an array of currently available langs\n   */\n  public getLangs(): Array<string> {\n    return this.langs;\n  }\n\n  /**\n   * Add available langs\n   */\n  public addLangs(langs: Array<string>): void {\n    langs.forEach((lang: string) => {\n      if (this.langs.indexOf(lang) === -1) {\n        this.langs.push(lang);\n      }\n    });\n  }\n\n  /**\n   * Update the list of available langs\n   */\n  private updateLangs(): void {\n    this.addLangs(Object.keys(this.translations));\n  }\n\n  /**\n   * Returns the parsed result of the translations\n   */\n  public getParsedResult(translations: any, key: any, interpolateParams?: Object): any {\n    let res: string | Observable<string>;\n\n    if (key instanceof Array) {\n      let result: any = {},\n        observables: boolean = false;\n      for (let k of key) {\n        result[k] = this.getParsedResult(translations, k, interpolateParams);\n        if (isObservable(result[k])) {\n          observables = true;\n        }\n      }\n      if (observables) {\n        const sources = key.map(k => isObservable(result[k]) ? result[k] : of(result[k] as string));\n        return forkJoin(sources).pipe(\n          map((arr: Array<string>) => {\n            let obj: any = {};\n            arr.forEach((value: string, index: number) => {\n              obj[key[index]] = value;\n            });\n            return obj;\n          })\n        );\n      }\n      return result;\n    }\n\n    if (translations) {\n      res = this.parser.interpolate(this.parser.getValue(translations, key), interpolateParams);\n    }\n\n    if (typeof res === \"undefined\" && this.defaultLang != null && this.defaultLang !== this.currentLang && this.useDefaultLang) {\n      res = this.parser.interpolate(this.parser.getValue(this.translations[this.defaultLang], key), interpolateParams);\n    }\n\n    if (typeof res === \"undefined\") {\n      let params: MissingTranslationHandlerParams = {key, translateService: this};\n      if (typeof interpolateParams !== 'undefined') {\n        params.interpolateParams = interpolateParams;\n      }\n      res = this.missingTranslationHandler.handle(params);\n    }\n\n    return typeof res !== \"undefined\" ? res : key;\n  }\n\n  /**\n   * Gets the translated value of a key (or an array of keys)\n   * @returns the translated key, or an object of translated keys\n   */\n  public get(key: string | Array<string>, interpolateParams?: Object): Observable<string | any> {\n    if (!isDefined(key) || !key.length) {\n      throw new Error(`Parameter \"key\" required`);\n    }\n    // check if we are loading a new translation to use\n    if (this.pending) {\n      return this.loadingTranslations.pipe(\n        concatMap((res: any) => {\n          res = this.getParsedResult(res, key, interpolateParams);\n          return isObservable(res) ? res : of(res);\n        }),\n      );\n    } else {\n      let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n      return isObservable(res) ? res : of(res);\n    }\n  }\n\n  /**\n   * Returns a stream of translated values of a key (or an array of keys) which updates\n   * whenever the translation changes.\n   * @returns A stream of the translated key, or an object of translated keys\n   */\n  public getStreamOnTranslationChange(key: string | Array<string>, interpolateParams?: Object): Observable<string | any> {\n    if (!isDefined(key) || !key.length) {\n      throw new Error(`Parameter \"key\" required`);\n    }\n\n    return concat(\n      defer(() => this.get(key, interpolateParams)),\n      this.onTranslationChange.pipe(\n        switchMap((event: TranslationChangeEvent) => {\n          const res = this.getParsedResult(event.translations, key, interpolateParams);\n          if (typeof res.subscribe === 'function') {\n            return res;\n          } else {\n            return of(res);\n          }\n        })\n      )\n    );\n  }\n\n  /**\n   * Returns a stream of translated values of a key (or an array of keys) which updates\n   * whenever the language changes.\n   * @returns A stream of the translated key, or an object of translated keys\n   */\n  public stream(key: string | Array<string>, interpolateParams?: Object): Observable<string | any> {\n    if (!isDefined(key) || !key.length) {\n      throw new Error(`Parameter \"key\" required`);\n    }\n\n    return concat(\n      defer(() => this.get(key, interpolateParams)),\n      this.onLangChange.pipe(\n        switchMap((event: LangChangeEvent) => {\n          const res = this.getParsedResult(event.translations, key, interpolateParams);\n          return isObservable(res) ? res : of(res);\n        })\n      ));\n  }\n\n  /**\n   * Returns a translation instantly from the internal state of loaded translation.\n   * All rules regarding the current language, the preferred language of even fallback languages will be used except any promise handling.\n   */\n  public instant(key: string | Array<string>, interpolateParams?: Object): string | any {\n    if (!isDefined(key) || !key.length) {\n      throw new Error(`Parameter \"key\" required`);\n    }\n\n    let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n    if (isObservable(res)) {\n      if (key instanceof Array) {\n        let obj: any = {};\n        key.forEach((value: string, index: number) => {\n          obj[key[index]] = key[index];\n        });\n        return obj;\n      }\n      return key;\n    } else {\n      return res;\n    }\n  }\n\n  /**\n   * Sets the translated value of a key, after compiling it\n   */\n  public set(key: string, value: string, lang: string = this.currentLang): void {\n    this.translations[lang][key] = this.compiler.compile(value, lang);\n    this.updateLangs();\n    this.onTranslationChange.emit({lang: lang, translations: this.translations[lang]});\n  }\n\n  /**\n   * Changes the current lang\n   */\n  private changeLang(lang: string): void {\n    this.currentLang = lang;\n    this.onLangChange.emit({lang: lang, translations: this.translations[lang]});\n\n    // if there is no default lang, use the one that we just set\n    if (this.defaultLang == null) {\n      this.changeDefaultLang(lang);\n    }\n  }\n\n  /**\n   * Changes the default lang\n   */\n  private changeDefaultLang(lang: string): void {\n    this.defaultLang = lang;\n    this.onDefaultLangChange.emit({lang: lang, translations: this.translations[lang]});\n  }\n\n  /**\n   * Allows to reload the lang file from the file\n   */\n  public reloadLang(lang: string): Observable<any> {\n    this.resetLang(lang);\n    return this.getTranslation(lang);\n  }\n\n  /**\n   * Deletes inner translation\n   */\n  public resetLang(lang: string): void {\n    this._translationRequests[lang] = undefined;\n    this.translations[lang] = undefined;\n  }\n\n  /**\n   * Returns the language code name from the browser, e.g. \"de\"\n   */\n  public getBrowserLang(): string {\n    if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n      return undefined;\n    }\n\n    let browserLang: any = window.navigator.languages ? window.navigator.languages[0] : null;\n    browserLang = browserLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n\n    if (typeof browserLang === 'undefined') {\n      return undefined\n    }\n\n    if (browserLang.indexOf('-') !== -1) {\n      browserLang = browserLang.split('-')[0];\n    }\n\n    if (browserLang.indexOf('_') !== -1) {\n      browserLang = browserLang.split('_')[0];\n    }\n\n    return browserLang;\n  }\n\n  /**\n   * Returns the culture language code name from the browser, e.g. \"de-DE\"\n   */\n  public getBrowserCultureLang(): string {\n    if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n      return undefined;\n    }\n\n    let browserCultureLang: any = window.navigator.languages ? window.navigator.languages[0] : null;\n    browserCultureLang = browserCultureLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n\n    return browserCultureLang;\n  }\n}\n","import {AfterViewChecked, ChangeDetectorRef, Directive, ElementRef, Input, OnDestroy} from '@angular/core';\nimport {Subscription, isObservable} from 'rxjs';\nimport {DefaultLangChangeEvent, LangChangeEvent, TranslateService, TranslationChangeEvent} from './translate.service';\nimport {equals, isDefined} from './util';\n\n@Directive({\n  selector: '[translate],[ngx-translate]'\n})\nexport class TranslateDirective implements AfterViewChecked, OnDestroy {\n  key: string;\n  lastParams: any;\n  currentParams: any;\n  onLangChangeSub: Subscription;\n  onDefaultLangChangeSub: Subscription;\n  onTranslationChangeSub: Subscription;\n\n  @Input() set translate(key: string) {\n    if (key) {\n      this.key = key;\n      this.checkNodes();\n    }\n  }\n\n  @Input() set translateParams(params: any) {\n    if (!equals(this.currentParams, params)) {\n      this.currentParams = params;\n      this.checkNodes(true);\n    }\n  }\n\n  constructor(private translateService: TranslateService, private element: ElementRef, private _ref: ChangeDetectorRef) {\n    // subscribe to onTranslationChange event, in case the translations of the current lang change\n    if (!this.onTranslationChangeSub) {\n      this.onTranslationChangeSub = this.translateService.onTranslationChange.subscribe((event: TranslationChangeEvent) => {\n        if (event.lang === this.translateService.currentLang) {\n          this.checkNodes(true, event.translations);\n        }\n      });\n    }\n\n    // subscribe to onLangChange event, in case the language changes\n    if (!this.onLangChangeSub) {\n      this.onLangChangeSub = this.translateService.onLangChange.subscribe((event: LangChangeEvent) => {\n        this.checkNodes(true, event.translations);\n      });\n    }\n\n    // subscribe to onDefaultLangChange event, in case the default language changes\n    if (!this.onDefaultLangChangeSub) {\n      this.onDefaultLangChangeSub = this.translateService.onDefaultLangChange.subscribe((event: DefaultLangChangeEvent) => {\n        this.checkNodes(true);\n      });\n    }\n  }\n\n  ngAfterViewChecked() {\n    this.checkNodes();\n  }\n\n  checkNodes(forceUpdate = false, translations?: any) {\n    let nodes: NodeList = this.element.nativeElement.childNodes;\n    // if the element is empty\n    if (!nodes.length) {\n      // we add the key as content\n      this.setContent(this.element.nativeElement, this.key);\n      nodes = this.element.nativeElement.childNodes;\n    }\n    for (let i = 0; i < nodes.length; ++i) {\n      let node: any = nodes[i];\n      if (node.nodeType === 3) { // node type 3 is a text node\n        let key: string;\n        if (forceUpdate) {\n          node.lastKey = null;\n        }\n        if(isDefined(node.lookupKey)) {\n          key = node.lookupKey;\n        } else if (this.key) {\n          key = this.key;\n        } else {\n          let content = this.getContent(node);\n          let trimmedContent = content.trim();\n          if (trimmedContent.length) {\n            node.lookupKey = trimmedContent;\n            // we want to use the content as a key, not the translation value\n            if (content !== node.currentValue) {\n              key = trimmedContent;\n              // the content was changed from the user, we'll use it as a reference if needed\n              node.originalContent = content || node.originalContent;\n            } else if (node.originalContent) { // the content seems ok, but the lang has changed\n              // the current content is the translation, not the key, use the last real content as key\n              key = node.originalContent.trim();\n            } else if (content !== node.currentValue) {\n              // we want to use the content as a key, not the translation value\n              key = trimmedContent;\n              // the content was changed from the user, we'll use it as a reference if needed\n              node.originalContent = content || node.originalContent;\n            }\n          }\n        }\n        this.updateValue(key, node, translations);\n      }\n    }\n  }\n\n  updateValue(key: string, node: any, translations: any) {\n    if (key) {\n      if (node.lastKey === key && this.lastParams === this.currentParams) {\n        return;\n      }\n\n      this.lastParams = this.currentParams;\n\n      let onTranslation = (res: string) => {\n        if (res !== key) {\n          node.lastKey = key;\n        }\n        if (!node.originalContent) {\n          node.originalContent = this.getContent(node);\n        }\n        node.currentValue = isDefined(res) ? res : (node.originalContent || key);\n        // we replace in the original content to preserve spaces that we might have trimmed\n        this.setContent(node, this.key ? node.currentValue : node.originalContent.replace(key, node.currentValue));\n        this._ref.markForCheck();\n      };\n\n      if (isDefined(translations)) {\n        let res = this.translateService.getParsedResult(translations, key, this.currentParams);\n        if (isObservable(res)) {\n          res.subscribe(onTranslation);\n        } else {\n          onTranslation(res);\n        }\n      } else {\n        this.translateService.get(key, this.currentParams).subscribe(onTranslation);\n      }\n    }\n  }\n\n  getContent(node: any): string {\n    return isDefined(node.textContent) ? node.textContent : node.data;\n  }\n\n  setContent(node: any, content: string): void {\n    if (isDefined(node.textContent)) {\n      node.textContent = content;\n    } else {\n      node.data = content;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.onLangChangeSub) {\n      this.onLangChangeSub.unsubscribe();\n    }\n\n    if (this.onDefaultLangChangeSub) {\n      this.onDefaultLangChangeSub.unsubscribe();\n    }\n\n    if (this.onTranslationChangeSub) {\n      this.onTranslationChangeSub.unsubscribe();\n    }\n  }\n}\n","import {ChangeDetectorRef, EventEmitter, Injectable, OnDestroy, Pipe, PipeTransform} from '@angular/core';\nimport {isObservable} from 'rxjs';\nimport {DefaultLangChangeEvent, LangChangeEvent, TranslateService, TranslationChangeEvent} from './translate.service';\nimport {equals, isDefined} from './util';\nimport { Subscription } from 'rxjs';\n\n@Injectable()\n@Pipe({\n  name: 'translate',\n  pure: false // required to update the value when the promise is resolved\n})\nexport class TranslatePipe implements PipeTransform, OnDestroy {\n  value: string = '';\n  lastKey: string;\n  lastParams: any[];\n  onTranslationChange: Subscription;\n  onLangChange: Subscription;\n  onDefaultLangChange: Subscription;\n\n  constructor(private translate: TranslateService, private _ref: ChangeDetectorRef) {\n  }\n\n  updateValue(key: string, interpolateParams?: Object, translations?: any): void {\n    let onTranslation = (res: string) => {\n      this.value = res !== undefined ? res : key;\n      this.lastKey = key;\n      this._ref.markForCheck();\n    };\n    if (translations) {\n      let res = this.translate.getParsedResult(translations, key, interpolateParams);\n      if (isObservable(res.subscribe)) {\n        res.subscribe(onTranslation);\n      } else {\n        onTranslation(res);\n      }\n    }\n    this.translate.get(key, interpolateParams).subscribe(onTranslation);\n  }\n\n  transform(query: string, ...args: any[]): any {\n    if (!query || !query.length) {\n      return query;\n    }\n\n    // if we ask another time for the same key, return the last value\n    if (equals(query, this.lastKey) && equals(args, this.lastParams)) {\n      return this.value;\n    }\n\n    let interpolateParams: Object;\n    if (isDefined(args[0]) && args.length) {\n      if (typeof args[0] === 'string' && args[0].length) {\n        // we accept objects written in the template such as {n:1}, {'n':1}, {n:'v'}\n        // which is why we might need to change it to real JSON objects such as {\"n\":1} or {\"n\":\"v\"}\n        let validArgs: string = args[0]\n          .replace(/(\\')?([a-zA-Z0-9_]+)(\\')?(\\s)?:/g, '\"$2\":')\n          .replace(/:(\\s)?(\\')(.*?)(\\')/g, ':\"$3\"');\n        try {\n          interpolateParams = JSON.parse(validArgs);\n        } catch (e) {\n          throw new SyntaxError(`Wrong parameter in TranslatePipe. Expected a valid Object, received: ${args[0]}`);\n        }\n      } else if (typeof args[0] === 'object' && !Array.isArray(args[0])) {\n        interpolateParams = args[0];\n      }\n    }\n\n    // store the query, in case it changes\n    this.lastKey = query;\n\n    // store the params, in case they change\n    this.lastParams = args;\n\n    // set the value\n    this.updateValue(query, interpolateParams);\n\n    // if there is a subscription to onLangChange, clean it\n    this._dispose();\n\n    // subscribe to onTranslationChange event, in case the translations change\n    if (!this.onTranslationChange) {\n      this.onTranslationChange = this.translate.onTranslationChange.subscribe((event: TranslationChangeEvent) => {\n        if (this.lastKey && event.lang === this.translate.currentLang) {\n          this.lastKey = null;\n          this.updateValue(query, interpolateParams, event.translations);\n        }\n      });\n    }\n\n    // subscribe to onLangChange event, in case the language changes\n    if (!this.onLangChange) {\n      this.onLangChange = this.translate.onLangChange.subscribe((event: LangChangeEvent) => {\n        if (this.lastKey) {\n          this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n          this.updateValue(query, interpolateParams, event.translations);\n        }\n      });\n    }\n\n    // subscribe to onDefaultLangChange event, in case the default language changes\n    if (!this.onDefaultLangChange) {\n      this.onDefaultLangChange = this.translate.onDefaultLangChange.subscribe(() => {\n        if (this.lastKey) {\n          this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n          this.updateValue(query, interpolateParams);\n        }\n      });\n    }\n\n    return this.value;\n  }\n\n  /**\n   * Clean any existing subscription to change events\n   */\n  private _dispose(): void {\n    if (typeof this.onTranslationChange !== 'undefined') {\n      this.onTranslationChange.unsubscribe();\n      this.onTranslationChange = undefined;\n    }\n    if (typeof this.onLangChange !== 'undefined') {\n      this.onLangChange.unsubscribe();\n      this.onLangChange = undefined;\n    }\n    if (typeof this.onDefaultLangChange !== 'undefined') {\n      this.onDefaultLangChange.unsubscribe();\n      this.onDefaultLangChange = undefined;\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._dispose();\n  }\n}\n","import {NgModule, ModuleWithProviders, Provider} from \"@angular/core\";\nimport {TranslateLoader, TranslateFakeLoader} from \"./lib/translate.loader\";\nimport {MissingTranslationHandler, FakeMissingTranslationHandler} from \"./lib/missing-translation-handler\";\nimport {TranslateParser, TranslateDefaultParser} from \"./lib/translate.parser\";\nimport {TranslateCompiler, TranslateFakeCompiler} from \"./lib/translate.compiler\";\nimport {TranslateDirective} from \"./lib/translate.directive\";\nimport {TranslatePipe} from \"./lib/translate.pipe\";\nimport {TranslateStore} from \"./lib/translate.store\";\nimport {USE_DEFAULT_LANG, DEFAULT_LANGUAGE, USE_STORE, TranslateService, USE_EXTEND} from \"./lib/translate.service\";\n\nexport * from \"./lib/translate.loader\";\nexport * from \"./lib/translate.service\";\nexport * from \"./lib/missing-translation-handler\";\nexport * from \"./lib/translate.parser\";\nexport * from \"./lib/translate.compiler\";\nexport * from \"./lib/translate.directive\";\nexport * from \"./lib/translate.pipe\";\nexport * from \"./lib/translate.store\";\n\nexport interface TranslateModuleConfig {\n  loader?: Provider;\n  compiler?: Provider;\n  parser?: Provider;\n  missingTranslationHandler?: Provider;\n  // isolate the service instance, only works for lazy loaded modules or components with the \"providers\" property\n  isolate?: boolean;\n  // extends translations for a given language instead of ignoring them if present\n  extend?: boolean;\n  useDefaultLang?: boolean;\n  defaultLanguage?: string;\n}\n\n@NgModule({\n  declarations: [\n    TranslatePipe,\n    TranslateDirective\n  ],\n  exports: [\n    TranslatePipe,\n    TranslateDirective\n  ]\n})\nexport class TranslateModule {\n  /**\n   * Use this method in your root module to provide the TranslateService\n   */\n  static forRoot(config: TranslateModuleConfig = {}): ModuleWithProviders<TranslateModule> {\n    return {\n      ngModule: TranslateModule,\n      providers: [\n        config.loader || {provide: TranslateLoader, useClass: TranslateFakeLoader},\n        config.compiler || {provide: TranslateCompiler, useClass: TranslateFakeCompiler},\n        config.parser || {provide: TranslateParser, useClass: TranslateDefaultParser},\n        config.missingTranslationHandler || {provide: MissingTranslationHandler, useClass: FakeMissingTranslationHandler},\n        TranslateStore,\n        {provide: USE_STORE, useValue: config.isolate},\n        {provide: USE_DEFAULT_LANG, useValue: config.useDefaultLang},\n        {provide: USE_EXTEND, useValue: config.extend},\n        {provide: DEFAULT_LANGUAGE, useValue: config.defaultLanguage},\n        TranslateService\n      ]\n    };\n  }\n\n  /**\n   * Use this method in your other (non root) modules to import the directive/pipe\n   */\n  static forChild(config: TranslateModuleConfig = {}): ModuleWithProviders<TranslateModule> {\n    return {\n      ngModule: TranslateModule,\n      providers: [\n        config.loader || {provide: TranslateLoader, useClass: TranslateFakeLoader},\n        config.compiler || {provide: TranslateCompiler, useClass: TranslateFakeCompiler},\n        config.parser || {provide: TranslateParser, useClass: TranslateDefaultParser},\n        config.missingTranslationHandler || {provide: MissingTranslationHandler, useClass: FakeMissingTranslationHandler},\n        {provide: USE_STORE, useValue: config.isolate},\n        {provide: USE_DEFAULT_LANG, useValue: config.useDefaultLang},\n        {provide: USE_EXTEND, useValue: config.extend},\n        {provide: DEFAULT_LANGUAGE, useValue: config.defaultLanguage},\n        TranslateService\n      ]\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}