{"ast":null,"code":"import _toConsumableArray from \"D:/Biz1-Market-0.01/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"D:/Biz1-Market-0.01/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/Biz1-Market-0.01/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Component, ChangeDetectionStrategy, ViewEncapsulation, ChangeDetectorRef, Renderer2, ElementRef, Input, Directive, NgModule } from '@angular/core';\nimport { toCssPixel } from 'ng-zorro-antd/core/util';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * Generated from: skeleton.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nfunction NzSkeletonComponent_ng_container_0_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 5);\n    ɵngcc0.ɵɵelement(1, \"nz-skeleton-element\", 6);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"nzSize\", ctx_r2.avatar.size)(\"nzShape\", ctx_r2.avatar.shape);\n  }\n}\n\nfunction NzSkeletonComponent_ng_container_0_h3_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"h3\", 7);\n  }\n\n  if (rf & 2) {\n    var ctx_r3 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵstyleProp(\"width\", ctx_r3.toCSSUnit(ctx_r3.title.width));\n  }\n}\n\nfunction NzSkeletonComponent_ng_container_0_ul_4_li_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"li\");\n  }\n\n  if (rf & 2) {\n    var i_r7 = ctx.index;\n    var ctx_r5 = ɵngcc0.ɵɵnextContext(3);\n    ɵngcc0.ɵɵstyleProp(\"width\", ctx_r5.toCSSUnit(ctx_r5.widthList[i_r7]));\n  }\n}\n\nfunction NzSkeletonComponent_ng_container_0_ul_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"ul\", 8);\n    ɵngcc0.ɵɵtemplate(1, NzSkeletonComponent_ng_container_0_ul_4_li_1_Template, 1, 2, \"li\", 9);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r4 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r4.rowsList);\n  }\n}\n\nfunction NzSkeletonComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, NzSkeletonComponent_ng_container_0_div_1_Template, 2, 2, \"div\", 1);\n    ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n    ɵngcc0.ɵɵtemplate(3, NzSkeletonComponent_ng_container_0_h3_3_Template, 1, 2, \"h3\", 3);\n    ɵngcc0.ɵɵtemplate(4, NzSkeletonComponent_ng_container_0_ul_4_Template, 2, 1, \"ul\", 4);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !!ctx_r0.nzAvatar);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !!ctx_r0.nzTitle);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !!ctx_r0.nzParagraph);\n  }\n}\n\nfunction NzSkeletonComponent_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵprojection(1);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n}\n\nvar _c0 = [\"*\"];\nvar _c1 = [\"nzType\", \"button\"];\nvar _c2 = [\"nzType\", \"avatar\"];\nvar _c3 = [\"nzType\", \"input\"];\n\nvar NzSkeletonComponent = /*#__PURE__*/function () {\n  /**\n   * @param {?} cdr\n   * @param {?} renderer\n   * @param {?} elementRef\n   */\n  function NzSkeletonComponent(cdr, renderer, elementRef) {\n    _classCallCheck(this, NzSkeletonComponent);\n\n    this.cdr = cdr;\n    this.nzActive = false;\n    this.nzLoading = true;\n    this.nzTitle = true;\n    this.nzAvatar = false;\n    this.nzParagraph = true;\n    this.rowsList = [];\n    this.widthList = [];\n    renderer.addClass(elementRef.nativeElement, 'ant-skeleton');\n  }\n  /**\n   * @param {?=} value\n   * @return {?}\n   */\n\n\n  _createClass(NzSkeletonComponent, [{\n    key: \"toCSSUnit\",\n    value: function toCSSUnit() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      return toCssPixel(value);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"getTitleProps\",\n    value: function getTitleProps() {\n      /** @type {?} */\n      var hasAvatar = !!this.nzAvatar;\n      /** @type {?} */\n\n      var hasParagraph = !!this.nzParagraph;\n      /** @type {?} */\n\n      var width = '';\n\n      if (!hasAvatar && hasParagraph) {\n        width = '38%';\n      } else if (hasAvatar && hasParagraph) {\n        width = '50%';\n      }\n\n      return Object.assign({\n        width: width\n      }, this.getProps(this.nzTitle));\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"getAvatarProps\",\n    value: function getAvatarProps() {\n      /** @type {?} */\n      var shape = !!this.nzTitle && !this.nzParagraph ? 'square' : 'circle';\n      /** @type {?} */\n\n      var size = 'large';\n      return Object.assign({\n        shape: shape,\n        size: size\n      }, this.getProps(this.nzAvatar));\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"getParagraphProps\",\n    value: function getParagraphProps() {\n      /** @type {?} */\n      var hasAvatar = !!this.nzAvatar;\n      /** @type {?} */\n\n      var hasTitle = !!this.nzTitle;\n      /** @type {?} */\n\n      var basicProps = {}; // Width\n\n      if (!hasAvatar || !hasTitle) {\n        basicProps.width = '61%';\n      } // Rows\n\n\n      if (!hasAvatar && hasTitle) {\n        basicProps.rows = 3;\n      } else {\n        basicProps.rows = 2;\n      }\n\n      return Object.assign(Object.assign({}, basicProps), this.getProps(this.nzParagraph));\n    }\n    /**\n     * @private\n     * @template T\n     * @param {?} prop\n     * @return {?}\n     */\n\n  }, {\n    key: \"getProps\",\n    value: function getProps(prop) {\n      return prop && typeof prop === 'object' ? prop : {};\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"getWidthList\",\n    value: function getWidthList() {\n      var _this$paragraph = this.paragraph,\n          width = _this$paragraph.width,\n          rows = _this$paragraph.rows;\n      /** @type {?} */\n\n      var widthList = [];\n\n      if (width && Array.isArray(width)) {\n        widthList = width;\n      } else if (width && !Array.isArray(width)) {\n        widthList = [];\n        widthList[\n        /** @type {?} */\n        rows - 1] = width;\n      }\n\n      return widthList;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"updateProps\",\n    value: function updateProps() {\n      this.title = this.getTitleProps();\n      this.avatar = this.getAvatarProps();\n      this.paragraph = this.getParagraphProps();\n      this.rowsList = _toConsumableArray(Array(this.paragraph.rows));\n      this.widthList = this.getWidthList();\n      this.cdr.markForCheck();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this.updateProps();\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if (changes.nzTitle || changes.nzAvatar || changes.nzParagraph) {\n        this.updateProps();\n      }\n    }\n  }]);\n\n  return NzSkeletonComponent;\n}();\n\nNzSkeletonComponent.ɵfac = function NzSkeletonComponent_Factory(t) {\n  return new (t || NzSkeletonComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nNzSkeletonComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: NzSkeletonComponent,\n  selectors: [[\"nz-skeleton\"]],\n  hostVars: 4,\n  hostBindings: function NzSkeletonComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"ant-skeleton-with-avatar\", !!ctx.nzAvatar)(\"ant-skeleton-active\", ctx.nzActive);\n    }\n  },\n  inputs: {\n    nzActive: \"nzActive\",\n    nzLoading: \"nzLoading\",\n    nzTitle: \"nzTitle\",\n    nzAvatar: \"nzAvatar\",\n    nzParagraph: \"nzParagraph\"\n  },\n  exportAs: [\"nzSkeleton\"],\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c0,\n  decls: 2,\n  vars: 2,\n  consts: [[4, \"ngIf\"], [\"class\", \"ant-skeleton-header\", 4, \"ngIf\"], [1, \"ant-skeleton-content\"], [\"class\", \"ant-skeleton-title\", 3, \"width\", 4, \"ngIf\"], [\"class\", \"ant-skeleton-paragraph\", 4, \"ngIf\"], [1, \"ant-skeleton-header\"], [\"nzType\", \"avatar\", 3, \"nzSize\", \"nzShape\"], [1, \"ant-skeleton-title\"], [1, \"ant-skeleton-paragraph\"], [3, \"width\", 4, \"ngFor\", \"ngForOf\"]],\n  template: function NzSkeletonComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵtemplate(0, NzSkeletonComponent_ng_container_0_Template, 5, 3, \"ng-container\", 0);\n      ɵngcc0.ɵɵtemplate(1, NzSkeletonComponent_ng_container_1_Template, 2, 0, \"ng-container\", 0);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.nzLoading);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.nzLoading);\n    }\n  },\n  directives: function directives() {\n    return [ɵngcc1.NgIf, NzSkeletonElementDirective, NzSkeletonElementAvatarComponent, ɵngcc1.NgForOf];\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nNzSkeletonComponent.ctorParameters = function () {\n  return [{\n    type: ChangeDetectorRef\n  }, {\n    type: Renderer2\n  }, {\n    type: ElementRef\n  }];\n};\n\nNzSkeletonComponent.propDecorators = {\n  nzActive: [{\n    type: Input\n  }],\n  nzLoading: [{\n    type: Input\n  }],\n  nzTitle: [{\n    type: Input\n  }],\n  nzAvatar: [{\n    type: Input\n  }],\n  nzParagraph: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NzSkeletonComponent, [{\n    type: Component,\n    args: [{\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      selector: 'nz-skeleton',\n      exportAs: 'nzSkeleton',\n      host: {\n        '[class.ant-skeleton-with-avatar]': '!!nzAvatar',\n        '[class.ant-skeleton-active]': 'nzActive'\n      },\n      template: \"\\n    <ng-container *ngIf=\\\"nzLoading\\\">\\n      <div class=\\\"ant-skeleton-header\\\" *ngIf=\\\"!!nzAvatar\\\">\\n        <nz-skeleton-element nzType=\\\"avatar\\\" [nzSize]=\\\"avatar.size\\\" [nzShape]=\\\"avatar.shape\\\"></nz-skeleton-element>\\n      </div>\\n      <div class=\\\"ant-skeleton-content\\\">\\n        <h3 *ngIf=\\\"!!nzTitle\\\" class=\\\"ant-skeleton-title\\\" [style.width]=\\\"toCSSUnit(title.width)\\\"></h3>\\n        <ul *ngIf=\\\"!!nzParagraph\\\" class=\\\"ant-skeleton-paragraph\\\">\\n          <li *ngFor=\\\"let row of rowsList; let i = index\\\" [style.width]=\\\"toCSSUnit(widthList[i])\\\"></li>\\n        </ul>\\n      </div>\\n    </ng-container>\\n    <ng-container *ngIf=\\\"!nzLoading\\\">\\n      <ng-content></ng-content>\\n    </ng-container>\\n  \"\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc0.Renderer2\n    }, {\n      type: ɵngcc0.ElementRef\n    }];\n  }, {\n    nzActive: [{\n      type: Input\n    }],\n    nzLoading: [{\n      type: Input\n    }],\n    nzTitle: [{\n      type: Input\n    }],\n    nzAvatar: [{\n      type: Input\n    }],\n    nzParagraph: [{\n      type: Input\n    }]\n  });\n})();\n\nif (false) {\n  /** @type {?} */\n  NzSkeletonComponent.prototype.nzActive;\n  /** @type {?} */\n\n  NzSkeletonComponent.prototype.nzLoading;\n  /** @type {?} */\n\n  NzSkeletonComponent.prototype.nzTitle;\n  /** @type {?} */\n\n  NzSkeletonComponent.prototype.nzAvatar;\n  /** @type {?} */\n\n  NzSkeletonComponent.prototype.nzParagraph;\n  /** @type {?} */\n\n  NzSkeletonComponent.prototype.title;\n  /** @type {?} */\n\n  NzSkeletonComponent.prototype.avatar;\n  /** @type {?} */\n\n  NzSkeletonComponent.prototype.paragraph;\n  /** @type {?} */\n\n  NzSkeletonComponent.prototype.rowsList;\n  /** @type {?} */\n\n  NzSkeletonComponent.prototype.widthList;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NzSkeletonComponent.prototype.cdr;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: skeleton-element.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar NzSkeletonElementDirective = /*#__PURE__*/_createClass(function NzSkeletonElementDirective() {\n  _classCallCheck(this, NzSkeletonElementDirective);\n\n  this.nzActive = false;\n});\n\nNzSkeletonElementDirective.ɵfac = function NzSkeletonElementDirective_Factory(t) {\n  return new (t || NzSkeletonElementDirective)();\n};\n\nNzSkeletonElementDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: NzSkeletonElementDirective,\n  selectors: [[\"nz-skeleton-element\"]],\n  hostVars: 6,\n  hostBindings: function NzSkeletonElementDirective_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"ant-skeleton\", true)(\"ant-skeleton-element\", true)(\"ant-skeleton-active\", ctx.nzActive);\n    }\n  },\n  inputs: {\n    nzActive: \"nzActive\",\n    nzType: \"nzType\"\n  }\n});\nNzSkeletonElementDirective.propDecorators = {\n  nzActive: [{\n    type: Input\n  }],\n  nzType: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NzSkeletonElementDirective, [{\n    type: Directive,\n    args: [{\n      selector: 'nz-skeleton-element',\n      host: {\n        '[class.ant-skeleton]': 'true',\n        '[class.ant-skeleton-element]': 'true',\n        '[class.ant-skeleton-active]': 'nzActive'\n      }\n    }]\n  }], function () {\n    return [];\n  }, {\n    nzActive: [{\n      type: Input\n    }],\n    nzType: [{\n      type: Input\n    }]\n  });\n})();\n\nif (false) {\n  /** @type {?} */\n  NzSkeletonElementDirective.prototype.nzActive;\n  /** @type {?} */\n\n  NzSkeletonElementDirective.prototype.nzType;\n}\n\nvar NzSkeletonElementButtonComponent = /*#__PURE__*/_createClass(function NzSkeletonElementButtonComponent() {\n  _classCallCheck(this, NzSkeletonElementButtonComponent);\n\n  this.nzShape = 'default';\n  this.nzSize = 'default';\n});\n\nNzSkeletonElementButtonComponent.ɵfac = function NzSkeletonElementButtonComponent_Factory(t) {\n  return new (t || NzSkeletonElementButtonComponent)();\n};\n\nNzSkeletonElementButtonComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: NzSkeletonElementButtonComponent,\n  selectors: [[\"nz-skeleton-element\", \"nzType\", \"button\"]],\n  inputs: {\n    nzShape: \"nzShape\",\n    nzSize: \"nzSize\"\n  },\n  attrs: _c1,\n  decls: 1,\n  vars: 10,\n  template: function NzSkeletonElementButtonComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelement(0, \"span\");\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"ant-skeleton-button\", true)(\"ant-skeleton-button-round\", ctx.nzShape === \"round\")(\"ant-skeleton-button-circle\", ctx.nzShape === \"circle\")(\"ant-skeleton-button-lg\", ctx.nzSize === \"large\")(\"ant-skeleton-button-sm\", ctx.nzSize === \"small\");\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\nNzSkeletonElementButtonComponent.propDecorators = {\n  nzShape: [{\n    type: Input\n  }],\n  nzSize: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NzSkeletonElementButtonComponent, [{\n    type: Component,\n    args: [{\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      selector: 'nz-skeleton-element[nzType=\"button\"]',\n      template: \"\\n    <span\\n      [class.ant-skeleton-button]=\\\"true\\\"\\n      [class.ant-skeleton-button-round]=\\\"nzShape === 'round'\\\"\\n      [class.ant-skeleton-button-circle]=\\\"nzShape === 'circle'\\\"\\n      [class.ant-skeleton-button-lg]=\\\"nzSize === 'large'\\\"\\n      [class.ant-skeleton-button-sm]=\\\"nzSize === 'small'\\\"\\n    >\\n    </span>\\n  \"\n    }]\n  }], function () {\n    return [];\n  }, {\n    nzShape: [{\n      type: Input\n    }],\n    nzSize: [{\n      type: Input\n    }]\n  });\n})();\n\nif (false) {\n  /** @type {?} */\n  NzSkeletonElementButtonComponent.prototype.nzShape;\n  /** @type {?} */\n\n  NzSkeletonElementButtonComponent.prototype.nzSize;\n}\n\nvar NzSkeletonElementAvatarComponent = /*#__PURE__*/function () {\n  function NzSkeletonElementAvatarComponent() {\n    _classCallCheck(this, NzSkeletonElementAvatarComponent);\n\n    this.nzShape = 'circle';\n    this.nzSize = 'default';\n    this.styleMap = {};\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n\n\n  _createClass(NzSkeletonElementAvatarComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if (changes.nzSize && typeof this.nzSize === 'number') {\n        /** @type {?} */\n        var sideLength = \"\".concat(this.nzSize, \"px\");\n        this.styleMap = {\n          width: sideLength,\n          height: sideLength,\n          'line-height': sideLength\n        };\n      } else {\n        this.styleMap = {};\n      }\n    }\n  }]);\n\n  return NzSkeletonElementAvatarComponent;\n}();\n\nNzSkeletonElementAvatarComponent.ɵfac = function NzSkeletonElementAvatarComponent_Factory(t) {\n  return new (t || NzSkeletonElementAvatarComponent)();\n};\n\nNzSkeletonElementAvatarComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: NzSkeletonElementAvatarComponent,\n  selectors: [[\"nz-skeleton-element\", \"nzType\", \"avatar\"]],\n  inputs: {\n    nzShape: \"nzShape\",\n    nzSize: \"nzSize\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  attrs: _c2,\n  decls: 1,\n  vars: 11,\n  consts: [[3, \"ngStyle\"]],\n  template: function NzSkeletonElementAvatarComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelement(0, \"span\", 0);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"ant-skeleton-avatar\", true)(\"ant-skeleton-avatar-square\", ctx.nzShape === \"square\")(\"ant-skeleton-avatar-circle\", ctx.nzShape === \"circle\")(\"ant-skeleton-avatar-lg\", ctx.nzSize === \"large\")(\"ant-skeleton-avatar-sm\", ctx.nzSize === \"small\");\n      ɵngcc0.ɵɵproperty(\"ngStyle\", ctx.styleMap);\n    }\n  },\n  directives: [ɵngcc1.NgStyle],\n  encapsulation: 2,\n  changeDetection: 0\n});\nNzSkeletonElementAvatarComponent.propDecorators = {\n  nzShape: [{\n    type: Input\n  }],\n  nzSize: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NzSkeletonElementAvatarComponent, [{\n    type: Component,\n    args: [{\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      selector: 'nz-skeleton-element[nzType=\"avatar\"]',\n      template: \"\\n    <span\\n      [class.ant-skeleton-avatar]=\\\"true\\\"\\n      [class.ant-skeleton-avatar-square]=\\\"nzShape === 'square'\\\"\\n      [class.ant-skeleton-avatar-circle]=\\\"nzShape === 'circle'\\\"\\n      [class.ant-skeleton-avatar-lg]=\\\"nzSize === 'large'\\\"\\n      [class.ant-skeleton-avatar-sm]=\\\"nzSize === 'small'\\\"\\n      [ngStyle]=\\\"styleMap\\\"\\n    >\\n    </span>\\n  \"\n    }]\n  }], function () {\n    return [];\n  }, {\n    nzShape: [{\n      type: Input\n    }],\n    nzSize: [{\n      type: Input\n    }]\n  });\n})();\n\nif (false) {\n  /** @type {?} */\n  NzSkeletonElementAvatarComponent.ngAcceptInputType_nzShape;\n  /** @type {?} */\n\n  NzSkeletonElementAvatarComponent.ngAcceptInputType_AvatarSize;\n  /** @type {?} */\n\n  NzSkeletonElementAvatarComponent.prototype.nzShape;\n  /** @type {?} */\n\n  NzSkeletonElementAvatarComponent.prototype.nzSize;\n  /** @type {?} */\n\n  NzSkeletonElementAvatarComponent.prototype.styleMap;\n}\n\nvar NzSkeletonElementInputComponent = /*#__PURE__*/_createClass(function NzSkeletonElementInputComponent() {\n  _classCallCheck(this, NzSkeletonElementInputComponent);\n\n  this.nzSize = 'default';\n});\n\nNzSkeletonElementInputComponent.ɵfac = function NzSkeletonElementInputComponent_Factory(t) {\n  return new (t || NzSkeletonElementInputComponent)();\n};\n\nNzSkeletonElementInputComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: NzSkeletonElementInputComponent,\n  selectors: [[\"nz-skeleton-element\", \"nzType\", \"input\"]],\n  inputs: {\n    nzSize: \"nzSize\"\n  },\n  attrs: _c3,\n  decls: 1,\n  vars: 6,\n  template: function NzSkeletonElementInputComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelement(0, \"span\");\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"ant-skeleton-input\", true)(\"ant-skeleton-input-lg\", ctx.nzSize === \"large\")(\"ant-skeleton-input-sm\", ctx.nzSize === \"small\");\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\nNzSkeletonElementInputComponent.propDecorators = {\n  nzSize: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NzSkeletonElementInputComponent, [{\n    type: Component,\n    args: [{\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      selector: 'nz-skeleton-element[nzType=\"input\"]',\n      template: \"\\n    <span\\n      [class.ant-skeleton-input]=\\\"true\\\"\\n      [class.ant-skeleton-input-lg]=\\\"nzSize === 'large'\\\"\\n      [class.ant-skeleton-input-sm]=\\\"nzSize === 'small'\\\"\\n    >\\n    </span>\\n  \"\n    }]\n  }], function () {\n    return [];\n  }, {\n    nzSize: [{\n      type: Input\n    }]\n  });\n})();\n\nif (false) {\n  /** @type {?} */\n  NzSkeletonElementInputComponent.prototype.nzSize;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: skeleton.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar NzSkeletonModule = /*#__PURE__*/_createClass(function NzSkeletonModule() {\n  _classCallCheck(this, NzSkeletonModule);\n});\n\nNzSkeletonModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: NzSkeletonModule\n});\nNzSkeletonModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function NzSkeletonModule_Factory(t) {\n    return new (t || NzSkeletonModule)();\n  },\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NzSkeletonModule, {\n    declarations: function declarations() {\n      return [NzSkeletonComponent, NzSkeletonElementDirective, NzSkeletonElementButtonComponent, NzSkeletonElementAvatarComponent, NzSkeletonElementInputComponent];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [NzSkeletonComponent, NzSkeletonElementDirective, NzSkeletonElementButtonComponent, NzSkeletonElementAvatarComponent, NzSkeletonElementInputComponent];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NzSkeletonModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [NzSkeletonComponent, NzSkeletonElementDirective, NzSkeletonElementButtonComponent, NzSkeletonElementAvatarComponent, NzSkeletonElementInputComponent],\n      imports: [CommonModule],\n      exports: [NzSkeletonComponent, NzSkeletonElementDirective, NzSkeletonElementButtonComponent, NzSkeletonElementAvatarComponent, NzSkeletonElementInputComponent]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: skeleton.type.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * @record\n */\n\n\nfunction NzSkeletonAvatar() {}\n\nif (false) {\n  /** @type {?|undefined} */\n  NzSkeletonAvatar.prototype.size;\n  /** @type {?|undefined} */\n\n  NzSkeletonAvatar.prototype.shape;\n}\n/**\n * @record\n */\n\n\nfunction NzSkeletonTitle() {}\n\nif (false) {\n  /** @type {?|undefined} */\n  NzSkeletonTitle.prototype.width;\n}\n/**\n * @record\n */\n\n\nfunction NzSkeletonParagraph() {}\n\nif (false) {\n  /** @type {?|undefined} */\n  NzSkeletonParagraph.prototype.rows;\n  /** @type {?|undefined} */\n\n  NzSkeletonParagraph.prototype.width;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: ng-zorro-antd-skeleton.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { NzSkeletonComponent, NzSkeletonElementAvatarComponent, NzSkeletonElementButtonComponent, NzSkeletonElementDirective, NzSkeletonElementInputComponent, NzSkeletonModule };","map":{"version":3,"sources":["ng-zorro-antd/skeleton/skeleton.component.ts","ng-zorro-antd/skeleton/skeleton-element.component.ts","ng-zorro-antd/skeleton/skeleton.module.ts","ng-zorro-antd/skeleton/skeleton.type.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  Renderer2,\n  SimpleChanges,\n  ViewEncapsulation\n} from '@angular/core';\n\nimport { toCssPixel } from 'ng-zorro-antd/core/util';\nimport { NzSkeletonAvatar, NzSkeletonAvatarShape, NzSkeletonAvatarSize, NzSkeletonParagraph, NzSkeletonTitle } from './skeleton.type';\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  selector: 'nz-skeleton',\n  exportAs: 'nzSkeleton',\n  host: {\n    '[class.ant-skeleton-with-avatar]': '!!nzAvatar',\n    '[class.ant-skeleton-active]': 'nzActive'\n  },\n  template: `\n    <ng-container *ngIf=\"nzLoading\">\n      <div class=\"ant-skeleton-header\" *ngIf=\"!!nzAvatar\">\n        <nz-skeleton-element nzType=\"avatar\" [nzSize]=\"avatar.size\" [nzShape]=\"avatar.shape\"></nz-skeleton-element>\n      </div>\n      <div class=\"ant-skeleton-content\">\n        <h3 *ngIf=\"!!nzTitle\" class=\"ant-skeleton-title\" [style.width]=\"toCSSUnit(title.width)\"></h3>\n        <ul *ngIf=\"!!nzParagraph\" class=\"ant-skeleton-paragraph\">\n          <li *ngFor=\"let row of rowsList; let i = index\" [style.width]=\"toCSSUnit(widthList[i])\"></li>\n        </ul>\n      </div>\n    </ng-container>\n    <ng-container *ngIf=\"!nzLoading\">\n      <ng-content></ng-content>\n    </ng-container>\n  `\n})\nexport class NzSkeletonComponent implements OnInit, OnChanges {\n  @Input() nzActive = false;\n  @Input() nzLoading = true;\n  @Input() nzTitle: NzSkeletonTitle | boolean = true;\n  @Input() nzAvatar: NzSkeletonAvatar | boolean = false;\n  @Input() nzParagraph: NzSkeletonParagraph | boolean = true;\n\n  title!: NzSkeletonTitle;\n  avatar!: NzSkeletonAvatar;\n  paragraph!: NzSkeletonParagraph;\n  rowsList: number[] = [];\n  widthList: Array<number | string> = [];\n\n  constructor(private cdr: ChangeDetectorRef, renderer: Renderer2, elementRef: ElementRef) {\n    renderer.addClass(elementRef.nativeElement, 'ant-skeleton');\n  }\n\n  toCSSUnit(value: number | string = ''): string {\n    return toCssPixel(value);\n  }\n\n  private getTitleProps(): NzSkeletonTitle {\n    const hasAvatar: boolean = !!this.nzAvatar;\n    const hasParagraph: boolean = !!this.nzParagraph;\n    let width = '';\n    if (!hasAvatar && hasParagraph) {\n      width = '38%';\n    } else if (hasAvatar && hasParagraph) {\n      width = '50%';\n    }\n    return { width, ...this.getProps(this.nzTitle) };\n  }\n\n  private getAvatarProps(): NzSkeletonAvatar {\n    const shape: NzSkeletonAvatarShape = !!this.nzTitle && !this.nzParagraph ? 'square' : 'circle';\n    const size: NzSkeletonAvatarSize = 'large';\n    return { shape, size, ...this.getProps(this.nzAvatar) };\n  }\n\n  private getParagraphProps(): NzSkeletonParagraph {\n    const hasAvatar: boolean = !!this.nzAvatar;\n    const hasTitle: boolean = !!this.nzTitle;\n    const basicProps: NzSkeletonParagraph = {};\n    // Width\n    if (!hasAvatar || !hasTitle) {\n      basicProps.width = '61%';\n    }\n    // Rows\n    if (!hasAvatar && hasTitle) {\n      basicProps.rows = 3;\n    } else {\n      basicProps.rows = 2;\n    }\n    return { ...basicProps, ...this.getProps(this.nzParagraph) };\n  }\n\n  private getProps<T>(prop: T | boolean | undefined): T | {} {\n    return prop && typeof prop === 'object' ? prop : {};\n  }\n\n  private getWidthList(): Array<number | string> {\n    const { width, rows } = this.paragraph;\n    let widthList: Array<string | number> = [];\n    if (width && Array.isArray(width)) {\n      widthList = width;\n    } else if (width && !Array.isArray(width)) {\n      widthList = [];\n      widthList[rows! - 1] = width;\n    }\n    return widthList;\n  }\n\n  private updateProps(): void {\n    this.title = this.getTitleProps();\n    this.avatar = this.getAvatarProps();\n    this.paragraph = this.getParagraphProps();\n    this.rowsList = [...Array(this.paragraph.rows)];\n    this.widthList = this.getWidthList();\n    this.cdr.markForCheck();\n  }\n\n  ngOnInit(): void {\n    this.updateProps();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.nzTitle || changes.nzAvatar || changes.nzParagraph) {\n      this.updateProps();\n    }\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { ChangeDetectionStrategy, Component, Directive, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport {\n  NzSkeletonAvatarShape,\n  NzSkeletonAvatarSize,\n  NzSkeletonButtonShape,\n  NzSkeletonButtonSize,\n  NzSkeletonInputSize\n} from './skeleton.type';\n\n@Directive({\n  selector: 'nz-skeleton-element',\n  host: {\n    '[class.ant-skeleton]': 'true',\n    '[class.ant-skeleton-element]': 'true',\n    '[class.ant-skeleton-active]': 'nzActive'\n  }\n})\nexport class NzSkeletonElementDirective {\n  @Input() nzActive: boolean = false;\n  @Input() nzType!: 'button' | 'input' | 'avatar';\n}\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'nz-skeleton-element[nzType=\"button\"]',\n  template: `\n    <span\n      [class.ant-skeleton-button]=\"true\"\n      [class.ant-skeleton-button-round]=\"nzShape === 'round'\"\n      [class.ant-skeleton-button-circle]=\"nzShape === 'circle'\"\n      [class.ant-skeleton-button-lg]=\"nzSize === 'large'\"\n      [class.ant-skeleton-button-sm]=\"nzSize === 'small'\"\n    >\n    </span>\n  `\n})\nexport class NzSkeletonElementButtonComponent {\n  @Input() nzShape: NzSkeletonButtonShape = 'default';\n  @Input() nzSize: NzSkeletonButtonSize = 'default';\n}\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'nz-skeleton-element[nzType=\"avatar\"]',\n  template: `\n    <span\n      [class.ant-skeleton-avatar]=\"true\"\n      [class.ant-skeleton-avatar-square]=\"nzShape === 'square'\"\n      [class.ant-skeleton-avatar-circle]=\"nzShape === 'circle'\"\n      [class.ant-skeleton-avatar-lg]=\"nzSize === 'large'\"\n      [class.ant-skeleton-avatar-sm]=\"nzSize === 'small'\"\n      [ngStyle]=\"styleMap\"\n    >\n    </span>\n  `\n})\nexport class NzSkeletonElementAvatarComponent implements OnChanges {\n  static ngAcceptInputType_nzShape: NzSkeletonAvatarShape | undefined | null;\n  static ngAcceptInputType_AvatarSize: NzSkeletonAvatarSize | undefined | null;\n\n  @Input() nzShape: NzSkeletonAvatarShape = 'circle';\n  @Input() nzSize: NzSkeletonAvatarSize = 'default';\n\n  styleMap = {};\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.nzSize && typeof this.nzSize === 'number') {\n      const sideLength = `${this.nzSize}px`;\n      this.styleMap = { width: sideLength, height: sideLength, 'line-height': sideLength };\n    } else {\n      this.styleMap = {};\n    }\n  }\n}\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'nz-skeleton-element[nzType=\"input\"]',\n  template: `\n    <span\n      [class.ant-skeleton-input]=\"true\"\n      [class.ant-skeleton-input-lg]=\"nzSize === 'large'\"\n      [class.ant-skeleton-input-sm]=\"nzSize === 'small'\"\n    >\n    </span>\n  `\n})\nexport class NzSkeletonElementInputComponent {\n  @Input() nzSize: NzSkeletonInputSize = 'default';\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  NzSkeletonElementAvatarComponent,\n  NzSkeletonElementButtonComponent,\n  NzSkeletonElementDirective,\n  NzSkeletonElementInputComponent\n} from './skeleton-element.component';\nimport { NzSkeletonComponent } from './skeleton.component';\n\n@NgModule({\n  declarations: [\n    NzSkeletonComponent,\n    NzSkeletonElementDirective,\n    NzSkeletonElementButtonComponent,\n    NzSkeletonElementAvatarComponent,\n    NzSkeletonElementInputComponent\n  ],\n  imports: [CommonModule],\n  exports: [\n    NzSkeletonComponent,\n    NzSkeletonElementDirective,\n    NzSkeletonElementButtonComponent,\n    NzSkeletonElementAvatarComponent,\n    NzSkeletonElementInputComponent\n  ]\n})\nexport class NzSkeletonModule {}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nexport type NzSkeletonParagraphWidth = number | string | Array<number | string>;\nexport type NzSkeletonButtonShape = 'circle' | 'round' | 'default';\nexport type NzSkeletonAvatarShape = 'square' | 'circle';\nexport type NzSkeletonInputSize = 'large' | 'small' | 'default';\nexport type NzSkeletonButtonSize = NzSkeletonInputSize;\nexport type NzSkeletonAvatarSize = NzSkeletonInputSize | number;\n\nexport interface NzSkeletonAvatar {\n  size?: NzSkeletonAvatarSize;\n  shape?: NzSkeletonAvatarShape;\n}\n\nexport interface NzSkeletonTitle {\n  width?: number | string;\n}\n\nexport interface NzSkeletonParagraph {\n  rows?: number;\n  width?: NzSkeletonParagraphWidth;\n}\n"]},"metadata":{},"sourceType":"module"}