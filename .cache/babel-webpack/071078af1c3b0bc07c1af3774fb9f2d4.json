{"ast":null,"code":"import _toConsumableArray from \"D:/queen-supermarket/Biz1Market_EXE/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _createClass from \"D:/queen-supermarket/Biz1Market_EXE/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"D:/queen-supermarket/Biz1Market_EXE/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { InjectionToken, Injectable, Optional, Inject, NgModule, defineInjectable, inject } from '@angular/core';\nimport { Router, NavigationStart, NavigationEnd, NavigationCancel, NavigationError } from '@angular/router';\nimport { of } from 'rxjs';\nimport { tap, delay, switchMap, filter } from 'rxjs/operators';\nimport { NgProgress } from '@ngx-progressbar/core';\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/** @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@ngx-progressbar/core';\nimport * as ɵngcc2 from '@angular/router';\nvar NG_PROGRESS_ROUTER_CONFIG = new InjectionToken('ngProgressRouterConfig');\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * Check if a router event type exists in an array of router event types\r\n * @param {?} routerEvent\r\n * @param {?} events\r\n * @return {?}\r\n */\n\nfunction eventExists(routerEvent, events) {\n  /** @type {?} */\n  var res = false;\n  events.map(\n  /**\r\n  * @param {?} event\r\n  * @return {?}\r\n  */\n  function (event) {\n    return res = res || routerEvent instanceof event;\n  });\n  return res;\n}\n\nvar NgProgressRouter = /*#__PURE__*/_createClass(\n/**\r\n * @param {?} progress\r\n * @param {?} router\r\n * @param {?} config\r\n */\nfunction NgProgressRouter(progress, router, config) {\n  var _this = this;\n\n  _classCallCheck(this, NgProgressRouter);\n\n  this._config = {\n    id: 'root',\n    delay: 0,\n    startEvents: [NavigationStart],\n    completeEvents: [NavigationEnd, NavigationCancel, NavigationError]\n  };\n  this._config = config ? Object.assign({}, this._config, config) : this._config;\n  /** @type {?} */\n\n  var progressRef = progress.ref(this._config.id);\n  /** @type {?} */\n\n  var startProgress = of({}).pipe(tap(\n  /**\r\n  * @return {?}\r\n  */\n  function () {\n    return progressRef.start();\n  }));\n  /** @type {?} */\n\n  var completeProgress = of({}).pipe(delay(this._config.delay), tap(\n  /**\r\n  * @return {?}\r\n  */\n  function () {\n    return progressRef.complete();\n  }));\n  /** @type {?} */\n\n  var filterEvents = [].concat(_toConsumableArray(this._config.startEvents), _toConsumableArray(this._config.completeEvents));\n  router.events.pipe(filter(\n  /**\r\n  * @param {?} event\r\n  * @return {?}\r\n  */\n  function (event) {\n    return eventExists(event, filterEvents);\n  }), switchMap(\n  /**\r\n  * @param {?} event\r\n  * @return {?}\r\n  */\n  function (event) {\n    return eventExists(event, _this._config.startEvents) ? startProgress : completeProgress;\n  })).subscribe();\n});\n\nNgProgressRouter.ɵfac = function NgProgressRouter_Factory(t) {\n  return new (t || NgProgressRouter)(ɵngcc0.ɵɵinject(ɵngcc1.NgProgress), ɵngcc0.ɵɵinject(ɵngcc2.Router), ɵngcc0.ɵɵinject(NG_PROGRESS_ROUTER_CONFIG, 8));\n};\n\nNgProgressRouter.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: NgProgressRouter,\n  factory: NgProgressRouter.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nNgProgressRouter.ctorParameters = function () {\n  return [{\n    type: NgProgress\n  }, {\n    type: Router\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [NG_PROGRESS_ROUTER_CONFIG]\n    }]\n  }];\n};\n/** @nocollapse */\n\n\nNgProgressRouter.ngInjectableDef = defineInjectable({\n  factory: function NgProgressRouter_Factory() {\n    return new NgProgressRouter(inject(NgProgress), inject(Router), inject(NG_PROGRESS_ROUTER_CONFIG, 8));\n  },\n  token: NgProgressRouter,\n  providedIn: \"root\"\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NgProgressRouter, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.NgProgress\n    }, {\n      type: ɵngcc2.Router\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [NG_PROGRESS_ROUTER_CONFIG]\n      }]\n    }];\n  }, null);\n})();\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n\nvar NgProgressRouterModule = /*#__PURE__*/function () {\n  // Inject the service to activate it\n\n  /**\r\n   * @param {?} ngProgressRouter\r\n   */\n  function NgProgressRouterModule(ngProgressRouter) {\n    _classCallCheck(this, NgProgressRouterModule);\n  }\n  /**\r\n   * @param {?} config\r\n   * @return {?}\r\n   */\n\n\n  _createClass(NgProgressRouterModule, null, [{\n    key: \"withConfig\",\n    value: function withConfig(config) {\n      return {\n        ngModule: NgProgressRouterModule,\n        providers: [{\n          provide: NG_PROGRESS_ROUTER_CONFIG,\n          useValue: config\n        }]\n      };\n    }\n  }]);\n\n  return NgProgressRouterModule;\n}();\n\nNgProgressRouterModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: NgProgressRouterModule\n});\nNgProgressRouterModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function NgProgressRouterModule_Factory(t) {\n    return new (t || NgProgressRouterModule)(ɵngcc0.ɵɵinject(NgProgressRouter));\n  }\n});\n/** @nocollapse */\n\nNgProgressRouterModule.ctorParameters = function () {\n  return [{\n    type: NgProgressRouter\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NgProgressRouterModule, [{\n    type: NgModule,\n    args: [{}]\n  }], function () {\n    return [{\n      type: NgProgressRouter\n    }];\n  }, null);\n})();\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n\nexport { NgProgressRouterModule, NG_PROGRESS_ROUTER_CONFIG as ɵc, NgProgressRouter as ɵa };","map":{"version":3,"sources":["@ngx-progressbar/router/lib/ng-progress-router.interface.ts","@ngx-progressbar/router/lib/ng-progress-router.service.ts","@ngx-progressbar/router/lib/ng-progress-router.module.ts"],"names":[],"mappings":"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","sourcesContent":["import { InjectionToken, Type } from '@angular/core';\r\nimport { RouterEvent } from '@angular/router';\r\n\r\nexport interface NgProgressRouterConfig {\r\n  id?: string;\r\n  delay?: number;\r\n  startEvents?: Type<RouterEvent>[];\r\n  completeEvents?: Type<RouterEvent>[];\r\n}\r\n\r\nexport const NG_PROGRESS_ROUTER_CONFIG = new InjectionToken<NgProgressRouterConfig>('ngProgressRouterConfig');\r\n","import { Injectable, Optional, Inject, Type } from '@angular/core';\r\nimport { Router, NavigationStart, NavigationEnd, NavigationCancel, NavigationError, RouterEvent } from '@angular/router';\r\nimport { of } from 'rxjs';\r\nimport { tap, delay, switchMap, filter } from 'rxjs/operators';\r\nimport { NgProgress } from '@ngx-progressbar/core';\r\nimport { NgProgressRouterConfig, NG_PROGRESS_ROUTER_CONFIG } from './ng-progress-router.interface';\r\n\r\n/**\r\n * Check if a router event type exists in an array of router event types\r\n * @param routerEvent\r\n * @param events\r\n */\r\nfunction eventExists(routerEvent: RouterEvent, events: Type<RouterEvent>[]) {\r\n  let res = false;\r\n  events.map((event: Type<RouterEvent>) => res = res || routerEvent instanceof event);\r\n  return res;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NgProgressRouter {\r\n  private readonly _config: NgProgressRouterConfig = {\r\n    id: 'root',\r\n    delay: 0,\r\n    startEvents: [NavigationStart],\r\n    completeEvents: [NavigationEnd, NavigationCancel, NavigationError]\r\n  };\r\n\r\n  constructor(progress: NgProgress, router: Router, @Optional() @Inject(NG_PROGRESS_ROUTER_CONFIG) config: NgProgressRouterConfig) {\r\n    this._config = config ? {...this._config, ...config} : this._config;\r\n    const progressRef = progress.ref(this._config.id);\r\n\r\n    const startProgress = of({}).pipe(\r\n      tap(() => progressRef.start())\r\n    );\r\n\r\n    const completeProgress = of({}).pipe(\r\n      delay(this._config.delay),\r\n      tap(() => progressRef.complete())\r\n    );\r\n\r\n    const filterEvents = [...this._config.startEvents, ...this._config.completeEvents];\r\n\r\n    router.events.pipe(\r\n      filter((event: RouterEvent) => eventExists(event, filterEvents)),\r\n      switchMap((event: RouterEvent) => eventExists(event, this._config.startEvents) ? startProgress : completeProgress)\r\n    ).subscribe();\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { NgProgressRouterConfig, NG_PROGRESS_ROUTER_CONFIG } from './ng-progress-router.interface';\r\nimport { NgProgressRouter } from './ng-progress-router.service';\r\n\r\n@NgModule({})\r\nexport class NgProgressRouterModule {\r\n\r\n  // Inject the service to activate it\r\n  constructor(ngProgressRouter: NgProgressRouter) {\r\n  }\r\n\r\n  static withConfig(config: NgProgressRouterConfig): ModuleWithProviders {\r\n    return {\r\n      ngModule: NgProgressRouterModule,\r\n      providers: [\r\n        { provide: NG_PROGRESS_ROUTER_CONFIG, useValue: config }\r\n      ]\r\n    };\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}