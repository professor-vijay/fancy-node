{"ast":null,"code":"import _toConsumableArray from \"D:/Biz1-Market-0.01/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"D:/Biz1-Market-0.01/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/Biz1-Market-0.01/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { __decorate, __param } from 'tslib';\nimport { isPlatformServer, DOCUMENT, CommonModule } from '@angular/common';\nimport { InjectionToken, EventEmitter, SecurityContext, ElementRef, Inject, PLATFORM_ID, Renderer2, NgZone, Input, Output, Component, ViewEncapsulation, forwardRef, NgModule } from '@angular/core';\nimport quill from 'quill';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/platform-browser';\nimport * as ɵngcc2 from '@angular/common';\nvar _c0 = [[[\"\", \"quill-editor-toolbar\", \"\"]]];\nvar _c1 = [\"[quill-editor-toolbar]\"];\nvar defaultModules = {\n  toolbar: [['bold', 'italic', 'underline', 'strike'], ['blockquote', 'code-block'], [{\n    header: 1\n  }, {\n    header: 2\n  }], [{\n    list: 'ordered'\n  }, {\n    list: 'bullet'\n  }], [{\n    script: 'sub'\n  }, {\n    script: 'super'\n  }], [{\n    indent: '-1'\n  }, {\n    indent: '+1'\n  }], [{\n    direction: 'rtl'\n  }], [{\n    size: ['small', false, 'large', 'huge']\n  }], [{\n    header: [1, 2, 3, 4, 5, 6, false]\n  }], [{\n    color: []\n  }, {\n    background: []\n  }], [{\n    font: []\n  }], [{\n    align: []\n  }], ['clean'], ['link', 'image', 'video'] // link and image, video\n  ]\n};\nvar QUILL_CONFIG_TOKEN = new InjectionToken('config');\n\nvar getFormat = function getFormat(format, configFormat) {\n  var passedFormat = format || configFormat;\n  return passedFormat || 'html';\n};\n\nvar QuillEditorComponent_1;\nvar Quill = null;\n\nvar QuillEditorComponent = QuillEditorComponent_1 = /*#__PURE__*/function () {\n  function QuillEditorComponent(elementRef, domSanitizer, doc, platformId, renderer, zone, config) {\n    var _this = this;\n\n    _classCallCheck(this, QuillEditorComponent);\n\n    this.elementRef = elementRef;\n    this.domSanitizer = domSanitizer;\n    this.doc = doc;\n    this.platformId = platformId;\n    this.renderer = renderer;\n    this.zone = zone;\n    this.config = config;\n    this.required = false;\n    this.customToolbarPosition = 'top';\n    this.sanitize = false;\n    this.styles = null;\n    this.strict = true;\n    this.customOptions = [];\n    this.preserveWhitespace = false;\n    this.trimOnValidation = false;\n    this.onEditorCreated = new EventEmitter();\n    this.onEditorChanged = new EventEmitter();\n    this.onContentChanged = new EventEmitter();\n    this.onSelectionChanged = new EventEmitter();\n    this.onFocus = new EventEmitter();\n    this.onBlur = new EventEmitter();\n    this.disabled = false; // used to store initial value before ViewInit\n\n    this.valueGetter = function (quillEditor, editorElement) {\n      var html = editorElement.querySelector('.ql-editor').innerHTML;\n\n      if (html === '<p><br></p>' || html === '<div><br></div>') {\n        html = null;\n      }\n\n      var modelValue = html;\n      var format = getFormat(_this.format, _this.config.format);\n\n      if (format === 'text') {\n        modelValue = quillEditor.getText();\n      } else if (format === 'object') {\n        modelValue = quillEditor.getContents();\n      } else if (format === 'json') {\n        try {\n          modelValue = JSON.stringify(quillEditor.getContents());\n        } catch (e) {\n          modelValue = quillEditor.getText();\n        }\n      }\n\n      return modelValue;\n    };\n\n    this.valueSetter = function (quillEditor, value) {\n      var format = getFormat(_this.format, _this.config.format);\n\n      if (format === 'html') {\n        if (_this.sanitize) {\n          value = _this.domSanitizer.sanitize(SecurityContext.HTML, value);\n        }\n\n        return quillEditor.clipboard.convert(value);\n      } else if (format === 'json') {\n        try {\n          return JSON.parse(value);\n        } catch (e) {\n          return [{\n            insert: value\n          }];\n        }\n      }\n\n      return value;\n    };\n\n    this.selectionChangeHandler = function (range, oldRange, source) {\n      var shouldTriggerOnModelTouched = !range && _this.onModelTouched; // only emit changes when there's any listener\n\n      if (!_this.onBlur.observers.length && !_this.onFocus.observers.length && !_this.onSelectionChanged.observers.length && !shouldTriggerOnModelTouched) {\n        return;\n      }\n\n      _this.zone.run(function () {\n        if (range === null) {\n          _this.onBlur.emit({\n            editor: _this.quillEditor,\n            source: source\n          });\n        } else if (oldRange === null) {\n          _this.onFocus.emit({\n            editor: _this.quillEditor,\n            source: source\n          });\n        }\n\n        _this.onSelectionChanged.emit({\n          editor: _this.quillEditor,\n          oldRange: oldRange,\n          range: range,\n          source: source\n        });\n\n        if (shouldTriggerOnModelTouched) {\n          _this.onModelTouched();\n        }\n      });\n    };\n\n    this.textChangeHandler = function (delta, oldDelta, source) {\n      // only emit changes emitted by user interactions\n      var text = _this.quillEditor.getText();\n\n      var content = _this.quillEditor.getContents();\n\n      var html = _this.editorElem.querySelector('.ql-editor').innerHTML;\n\n      if (html === '<p><br></p>' || html === '<div><br></div>') {\n        html = null;\n      }\n\n      var trackChanges = _this.trackChanges || _this.config.trackChanges;\n      var shouldTriggerOnModelChange = (source === Quill.sources.USER || trackChanges && trackChanges === 'all') && _this.onModelChange; // only emit changes when there's any listener\n\n      if (!_this.onContentChanged.observers.length && !shouldTriggerOnModelChange) {\n        return;\n      }\n\n      _this.zone.run(function () {\n        if (shouldTriggerOnModelChange) {\n          _this.onModelChange(_this.valueGetter(_this.quillEditor, _this.editorElem));\n        }\n\n        _this.onContentChanged.emit({\n          content: content,\n          delta: delta,\n          editor: _this.quillEditor,\n          html: html,\n          oldDelta: oldDelta,\n          source: source,\n          text: text\n        });\n      });\n    };\n\n    this.editorChangeHandler = function (event, current, old, source) {\n      // only emit changes when there's any listener\n      if (!_this.onEditorChanged.observers.length) {\n        return;\n      } // only emit changes emitted by user interactions\n\n\n      if (event === 'text-change') {\n        var text = _this.quillEditor.getText();\n\n        var content = _this.quillEditor.getContents();\n\n        var html = _this.editorElem.querySelector('.ql-editor').innerHTML;\n\n        if (html === '<p><br></p>' || html === '<div><br></div>') {\n          html = null;\n        }\n\n        _this.zone.run(function () {\n          _this.onEditorChanged.emit({\n            content: content,\n            delta: current,\n            editor: _this.quillEditor,\n            event: event,\n            html: html,\n            oldDelta: old,\n            source: source,\n            text: text\n          });\n        });\n      } else {\n        _this.onEditorChanged.emit({\n          editor: _this.quillEditor,\n          event: event,\n          oldRange: old,\n          range: current,\n          source: source\n        });\n      }\n    };\n  }\n\n  _createClass(QuillEditorComponent, [{\n    key: \"onModelChange\",\n    value: function onModelChange(_modelValue) {}\n  }, {\n    key: \"onModelTouched\",\n    value: function onModelTouched() {}\n  }, {\n    key: \"onValidatorChanged\",\n    value: function onValidatorChanged() {}\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var _this2 = this;\n\n      if (isPlatformServer(this.platformId)) {\n        return;\n      }\n\n      if (!Quill) {\n        this.zone.runOutsideAngular(function () {\n          Quill = quill;\n        });\n      }\n\n      this.elementRef.nativeElement.insertAdjacentHTML(this.customToolbarPosition === 'top' ? 'beforeend' : 'afterbegin', this.preserveWhitespace ? '<pre quill-editor-element></pre>' : '<div quill-editor-element></div>');\n      this.editorElem = this.elementRef.nativeElement.querySelector('[quill-editor-element]');\n      var toolbarElem = this.elementRef.nativeElement.querySelector('[quill-editor-toolbar]');\n      var modules = Object.assign({}, this.modules || this.config.modules || defaultModules);\n\n      if (toolbarElem) {\n        modules.toolbar = toolbarElem;\n      } else if (modules.toolbar === undefined) {\n        modules.toolbar = defaultModules.toolbar;\n      }\n\n      var placeholder = this.placeholder !== undefined ? this.placeholder : this.config.placeholder;\n\n      if (placeholder === undefined) {\n        placeholder = 'Insert text here ...';\n      }\n\n      if (this.styles) {\n        Object.keys(this.styles).forEach(function (key) {\n          _this2.renderer.setStyle(_this2.editorElem, key, _this2.styles[key]);\n        });\n      }\n\n      if (this.classes) {\n        this.addClasses(this.classes);\n      }\n\n      this.customOptions.forEach(function (customOption) {\n        var newCustomOption = Quill.import(customOption.import);\n        newCustomOption.whitelist = customOption.whitelist;\n        Quill.register(newCustomOption, true);\n      });\n      var bounds = this.bounds && this.bounds === 'self' ? this.editorElem : this.bounds;\n\n      if (!bounds) {\n        bounds = this.config.bounds ? this.config.bounds : this.doc.body;\n      }\n\n      var debug = this.debug;\n\n      if (!debug && debug !== false && this.config.debug) {\n        debug = this.config.debug;\n      }\n\n      var readOnly = this.readOnly;\n\n      if (!readOnly && this.readOnly !== false) {\n        readOnly = this.config.readOnly !== undefined ? this.config.readOnly : false;\n      }\n\n      var scrollingContainer = this.scrollingContainer;\n\n      if (!scrollingContainer && this.scrollingContainer !== null) {\n        scrollingContainer = this.config.scrollingContainer === null || this.config.scrollingContainer ? this.config.scrollingContainer : null;\n      }\n\n      var formats = this.formats;\n\n      if (!formats && formats === undefined) {\n        formats = this.config.formats ? _toConsumableArray(this.config.formats) : this.config.formats === null ? null : undefined;\n      }\n\n      this.zone.runOutsideAngular(function () {\n        _this2.quillEditor = new Quill(_this2.editorElem, {\n          bounds: bounds,\n          debug: debug,\n          formats: formats,\n          modules: modules,\n          placeholder: placeholder,\n          readOnly: readOnly,\n          scrollingContainer: scrollingContainer,\n          strict: _this2.strict,\n          theme: _this2.theme || (_this2.config.theme ? _this2.config.theme : 'snow')\n        });\n      });\n\n      if (this.content) {\n        var format = getFormat(this.format, this.config.format);\n\n        if (format === 'object') {\n          this.quillEditor.setContents(this.content, 'silent');\n        } else if (format === 'text') {\n          this.quillEditor.setText(this.content, 'silent');\n        } else if (format === 'json') {\n          try {\n            this.quillEditor.setContents(JSON.parse(this.content), 'silent');\n          } catch (e) {\n            this.quillEditor.setText(this.content, 'silent');\n          }\n        } else {\n          if (this.sanitize) {\n            this.content = this.domSanitizer.sanitize(SecurityContext.HTML, this.content);\n          }\n\n          var contents = this.quillEditor.clipboard.convert(this.content);\n          this.quillEditor.setContents(contents, 'silent');\n        }\n\n        this.quillEditor.history.clear();\n      } // initialize disabled status based on this.disabled as default value\n\n\n      this.setDisabledState(); // triggered if selection or text changed\n\n      this.quillEditor.on('editor-change', this.editorChangeHandler); // mark model as touched if editor lost focus\n\n      this.quillEditor.on('selection-change', this.selectionChangeHandler); // update model if text changes\n\n      this.quillEditor.on('text-change', this.textChangeHandler); // trigger created in a timeout to avoid changed models after checked\n      // if you are using the editor api in created output to change the editor content\n\n      setTimeout(function () {\n        _this2.onValidatorChanged();\n\n        _this2.onEditorCreated.emit(_this2.quillEditor);\n      });\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this.quillEditor) {\n        this.quillEditor.off('selection-change', this.selectionChangeHandler);\n        this.quillEditor.off('text-change', this.textChangeHandler);\n        this.quillEditor.off('editor-change', this.editorChangeHandler);\n      }\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      var _this3 = this;\n\n      if (!this.quillEditor) {\n        return;\n      } // tslint:disable:no-string-literal\n\n\n      if (changes['readOnly']) {\n        this.quillEditor.enable(!changes['readOnly'].currentValue);\n      }\n\n      if (changes['placeholder']) {\n        this.quillEditor.root.dataset.placeholder = changes['placeholder'].currentValue;\n      }\n\n      if (changes['styles']) {\n        var currentStyling = changes['styles'].currentValue;\n        var previousStyling = changes['styles'].previousValue;\n\n        if (previousStyling) {\n          Object.keys(previousStyling).forEach(function (key) {\n            _this3.renderer.removeStyle(_this3.editorElem, key);\n          });\n        }\n\n        if (currentStyling) {\n          Object.keys(currentStyling).forEach(function (key) {\n            _this3.renderer.setStyle(_this3.editorElem, key, _this3.styles[key]);\n          });\n        }\n      }\n\n      if (changes['classes']) {\n        var currentClasses = changes['classes'].currentValue;\n        var previousClasses = changes['classes'].previousValue;\n\n        if (previousClasses) {\n          this.removeClasses(previousClasses);\n        }\n\n        if (currentClasses) {\n          this.addClasses(currentClasses);\n        }\n      } // tslint:enable:no-string-literal\n\n    }\n  }, {\n    key: \"addClasses\",\n    value: function addClasses(classList) {\n      var _this4 = this;\n\n      QuillEditorComponent_1.normalizeClassNames(classList).forEach(function (c) {\n        _this4.renderer.addClass(_this4.editorElem, c);\n      });\n    }\n  }, {\n    key: \"removeClasses\",\n    value: function removeClasses(classList) {\n      var _this5 = this;\n\n      QuillEditorComponent_1.normalizeClassNames(classList).forEach(function (c) {\n        _this5.renderer.removeClass(_this5.editorElem, c);\n      });\n    }\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(currentValue) {\n      this.content = currentValue;\n      var format = getFormat(this.format, this.config.format);\n\n      if (this.quillEditor) {\n        if (currentValue) {\n          if (format === 'text') {\n            this.quillEditor.setText(currentValue);\n          } else {\n            this.quillEditor.setContents(this.valueSetter(this.quillEditor, this.content));\n          }\n\n          return;\n        }\n\n        this.quillEditor.setText('');\n      }\n    }\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState() {\n      var isDisabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.disabled;\n      // store initial value to set appropriate disabled status after ViewInit\n      this.disabled = isDisabled;\n\n      if (this.quillEditor) {\n        if (isDisabled) {\n          this.quillEditor.disable();\n          this.renderer.setAttribute(this.elementRef.nativeElement, 'disabled', 'disabled');\n        } else {\n          if (!this.readOnly) {\n            this.quillEditor.enable();\n          }\n\n          this.renderer.removeAttribute(this.elementRef.nativeElement, 'disabled');\n        }\n      }\n    }\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this.onModelChange = fn;\n    }\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this.onModelTouched = fn;\n    }\n  }, {\n    key: \"registerOnValidatorChange\",\n    value: function registerOnValidatorChange(fn) {\n      this.onValidatorChanged = fn;\n    }\n  }, {\n    key: \"validate\",\n    value: function validate() {\n      if (!this.quillEditor) {\n        return null;\n      }\n\n      var err = {};\n      var valid = true;\n      var text = this.quillEditor.getText(); // trim text if wanted + handle special case that an empty editor contains a new line\n\n      var textLength = this.trimOnValidation ? text.trim().length : text.length === 1 && text.trim().length === 0 ? 0 : text.length - 1;\n\n      if (this.minLength && textLength && textLength < this.minLength) {\n        err.minLengthError = {\n          given: textLength,\n          minLength: this.minLength\n        };\n        valid = false;\n      }\n\n      if (this.maxLength && textLength > this.maxLength) {\n        err.maxLengthError = {\n          given: textLength,\n          maxLength: this.maxLength\n        };\n        valid = false;\n      }\n\n      if (this.required && !textLength) {\n        err.requiredError = {\n          empty: true\n        };\n        valid = false;\n      }\n\n      return valid ? null : err;\n    }\n  }], [{\n    key: \"normalizeClassNames\",\n    value: function normalizeClassNames(classes) {\n      var classList = classes.trim().split(' ');\n      return classList.reduce(function (prev, cur) {\n        var trimmed = cur.trim();\n\n        if (trimmed) {\n          prev.push(trimmed);\n        }\n\n        return prev;\n      }, []);\n    }\n  }]);\n\n  return QuillEditorComponent;\n}();\n\nQuillEditorComponent.ɵfac = function QuillEditorComponent_Factory(t) {\n  return new (t || QuillEditorComponent)(ɵngcc0.ɵɵdirectiveInject(ElementRef), ɵngcc0.ɵɵdirectiveInject(DomSanitizer), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID), ɵngcc0.ɵɵdirectiveInject(Renderer2), ɵngcc0.ɵɵdirectiveInject(NgZone), ɵngcc0.ɵɵdirectiveInject(QUILL_CONFIG_TOKEN));\n};\n\nQuillEditorComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: QuillEditorComponent,\n  selectors: [[\"quill-editor\"]],\n  inputs: {\n    required: \"required\",\n    customToolbarPosition: \"customToolbarPosition\",\n    sanitize: \"sanitize\",\n    styles: \"styles\",\n    strict: \"strict\",\n    customOptions: \"customOptions\",\n    preserveWhitespace: \"preserveWhitespace\",\n    trimOnValidation: \"trimOnValidation\",\n    valueGetter: \"valueGetter\",\n    valueSetter: \"valueSetter\",\n    format: \"format\",\n    theme: \"theme\",\n    modules: \"modules\",\n    debug: \"debug\",\n    readOnly: \"readOnly\",\n    placeholder: \"placeholder\",\n    maxLength: \"maxLength\",\n    minLength: \"minLength\",\n    formats: \"formats\",\n    scrollingContainer: \"scrollingContainer\",\n    bounds: \"bounds\",\n    trackChanges: \"trackChanges\",\n    classes: \"classes\"\n  },\n  outputs: {\n    onEditorCreated: \"onEditorCreated\",\n    onEditorChanged: \"onEditorChanged\",\n    onContentChanged: \"onContentChanged\",\n    onSelectionChanged: \"onSelectionChanged\",\n    onFocus: \"onFocus\",\n    onBlur: \"onBlur\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    multi: true,\n    provide: NG_VALUE_ACCESSOR,\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    useExisting: forwardRef(function () {\n      return QuillEditorComponent_1;\n    })\n  }, {\n    multi: true,\n    provide: NG_VALIDATORS,\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    useExisting: forwardRef(function () {\n      return QuillEditorComponent_1;\n    })\n  }]), ɵngcc0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c1,\n  decls: 1,\n  vars: 0,\n  template: function QuillEditorComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef(_c0);\n      ɵngcc0.ɵɵprojection(0);\n    }\n  },\n  encapsulation: 2\n});\n\nQuillEditorComponent.ctorParameters = function () {\n  return [{\n    type: ElementRef,\n    decorators: [{\n      type: Inject,\n      args: [ElementRef]\n    }]\n  }, {\n    type: DomSanitizer,\n    decorators: [{\n      type: Inject,\n      args: [DomSanitizer]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }, {\n    type: Renderer2,\n    decorators: [{\n      type: Inject,\n      args: [Renderer2]\n    }]\n  }, {\n    type: NgZone,\n    decorators: [{\n      type: Inject,\n      args: [NgZone]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [QUILL_CONFIG_TOKEN]\n    }]\n  }];\n};\n\n__decorate([Input()], QuillEditorComponent.prototype, \"format\", void 0);\n\n__decorate([Input()], QuillEditorComponent.prototype, \"theme\", void 0);\n\n__decorate([Input()], QuillEditorComponent.prototype, \"modules\", void 0);\n\n__decorate([Input()], QuillEditorComponent.prototype, \"debug\", void 0);\n\n__decorate([Input()], QuillEditorComponent.prototype, \"readOnly\", void 0);\n\n__decorate([Input()], QuillEditorComponent.prototype, \"placeholder\", void 0);\n\n__decorate([Input()], QuillEditorComponent.prototype, \"maxLength\", void 0);\n\n__decorate([Input()], QuillEditorComponent.prototype, \"minLength\", void 0);\n\n__decorate([Input()], QuillEditorComponent.prototype, \"required\", void 0);\n\n__decorate([Input()], QuillEditorComponent.prototype, \"formats\", void 0);\n\n__decorate([Input()], QuillEditorComponent.prototype, \"customToolbarPosition\", void 0);\n\n__decorate([Input()], QuillEditorComponent.prototype, \"sanitize\", void 0);\n\n__decorate([Input()], QuillEditorComponent.prototype, \"styles\", void 0);\n\n__decorate([Input()], QuillEditorComponent.prototype, \"strict\", void 0);\n\n__decorate([Input()], QuillEditorComponent.prototype, \"scrollingContainer\", void 0);\n\n__decorate([Input()], QuillEditorComponent.prototype, \"bounds\", void 0);\n\n__decorate([Input()], QuillEditorComponent.prototype, \"customOptions\", void 0);\n\n__decorate([Input()], QuillEditorComponent.prototype, \"trackChanges\", void 0);\n\n__decorate([Input()], QuillEditorComponent.prototype, \"preserveWhitespace\", void 0);\n\n__decorate([Input()], QuillEditorComponent.prototype, \"classes\", void 0);\n\n__decorate([Input()], QuillEditorComponent.prototype, \"trimOnValidation\", void 0);\n\n__decorate([Output()], QuillEditorComponent.prototype, \"onEditorCreated\", void 0);\n\n__decorate([Output()], QuillEditorComponent.prototype, \"onEditorChanged\", void 0);\n\n__decorate([Output()], QuillEditorComponent.prototype, \"onContentChanged\", void 0);\n\n__decorate([Output()], QuillEditorComponent.prototype, \"onSelectionChanged\", void 0);\n\n__decorate([Output()], QuillEditorComponent.prototype, \"onFocus\", void 0);\n\n__decorate([Output()], QuillEditorComponent.prototype, \"onBlur\", void 0);\n\n__decorate([Input()], QuillEditorComponent.prototype, \"valueGetter\", void 0);\n\n__decorate([Input()], QuillEditorComponent.prototype, \"valueSetter\", void 0);\n\nQuillEditorComponent = QuillEditorComponent_1 = __decorate([__param(0, Inject(ElementRef)), __param(1, Inject(DomSanitizer)), __param(2, Inject(DOCUMENT)), __param(3, Inject(PLATFORM_ID)), __param(4, Inject(Renderer2)), __param(5, Inject(NgZone)), __param(6, Inject(QUILL_CONFIG_TOKEN))], QuillEditorComponent);\n\nvar QuillViewHTMLComponent = /*#__PURE__*/function () {\n  function QuillViewHTMLComponent(sanitizer, config) {\n    _classCallCheck(this, QuillViewHTMLComponent);\n\n    this.sanitizer = sanitizer;\n    this.config = config;\n    this.innerHTML = '';\n    this.themeClass = 'ql-snow';\n    this.content = '';\n  }\n\n  _createClass(QuillViewHTMLComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if (changes.theme) {\n        var theme = changes.theme.currentValue || (this.config.theme ? this.config.theme : 'snow');\n        this.themeClass = \"ql-\".concat(theme, \" ngx-quill-view-html\");\n      } else if (!this.theme) {\n        var _theme = this.config.theme ? this.config.theme : 'snow';\n\n        this.themeClass = \"ql-\".concat(_theme, \" ngx-quill-view-html\");\n      }\n\n      if (changes.content) {\n        this.innerHTML = this.sanitizer.bypassSecurityTrustHtml(changes.content.currentValue);\n      }\n    }\n  }]);\n\n  return QuillViewHTMLComponent;\n}();\n\nQuillViewHTMLComponent.ɵfac = function QuillViewHTMLComponent_Factory(t) {\n  return new (t || QuillViewHTMLComponent)(ɵngcc0.ɵɵdirectiveInject(DomSanitizer), ɵngcc0.ɵɵdirectiveInject(QUILL_CONFIG_TOKEN));\n};\n\nQuillViewHTMLComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: QuillViewHTMLComponent,\n  selectors: [[\"quill-view-html\"]],\n  inputs: {\n    content: \"content\",\n    theme: \"theme\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  decls: 2,\n  vars: 2,\n  consts: [[1, \"ql-container\", 3, \"ngClass\"], [1, \"ql-editor\", 3, \"innerHTML\"]],\n  template: function QuillViewHTMLComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵelement(1, \"div\", 1);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"ngClass\", ctx.themeClass);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"innerHTML\", ctx.innerHTML, ɵngcc0.ɵɵsanitizeHtml);\n    }\n  },\n  directives: [ɵngcc2.NgClass],\n  styles: [\"\\n.ql-container.ngx-quill-view-html {\\n  border: 0;\\n}\\n\"],\n  encapsulation: 2\n});\n\nQuillViewHTMLComponent.ctorParameters = function () {\n  return [{\n    type: DomSanitizer,\n    decorators: [{\n      type: Inject,\n      args: [DomSanitizer]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [QUILL_CONFIG_TOKEN]\n    }]\n  }];\n};\n\n__decorate([Input()], QuillViewHTMLComponent.prototype, \"content\", void 0);\n\n__decorate([Input()], QuillViewHTMLComponent.prototype, \"theme\", void 0);\n\nQuillViewHTMLComponent = __decorate([__param(0, Inject(DomSanitizer)), __param(1, Inject(QUILL_CONFIG_TOKEN))], QuillViewHTMLComponent);\nvar Quill$1 = null;\n\nvar QuillViewComponent = /*#__PURE__*/function () {\n  function QuillViewComponent(platformId, config, renderer, elementRef, zone) {\n    var _this6 = this;\n\n    _classCallCheck(this, QuillViewComponent);\n\n    this.platformId = platformId;\n    this.config = config;\n    this.renderer = renderer;\n    this.elementRef = elementRef;\n    this.zone = zone;\n    this.strict = true;\n    this.customOptions = [];\n    this.preserveWhitespace = false;\n\n    this.valueSetter = function (quillEditor, value) {\n      var format = getFormat(_this6.format, _this6.config.format);\n      var content = value;\n\n      if (format === 'html' || format === 'text') {\n        content = quillEditor.clipboard.convert(value);\n      } else if (format === 'json') {\n        try {\n          content = JSON.parse(value);\n        } catch (e) {\n          content = [{\n            insert: value\n          }];\n        }\n      }\n\n      quillEditor.setContents(content);\n    };\n  }\n\n  _createClass(QuillViewComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if (!this.quillEditor) {\n        return;\n      }\n\n      if (changes.content) {\n        this.valueSetter(this.quillEditor, changes.content.currentValue);\n      }\n    }\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var _this7 = this;\n\n      if (isPlatformServer(this.platformId)) {\n        return;\n      }\n\n      if (!Quill$1) {\n        this.zone.runOutsideAngular(function () {\n          Quill$1 = quill;\n        });\n      }\n\n      var modules = Object.assign({}, this.modules || this.config.modules || defaultModules);\n      modules.toolbar = false;\n      this.customOptions.forEach(function (customOption) {\n        var newCustomOption = Quill$1.import(customOption.import);\n        newCustomOption.whitelist = customOption.whitelist;\n        Quill$1.register(newCustomOption, true);\n      });\n      var debug = this.debug;\n\n      if (!debug && debug !== false && this.config.debug) {\n        debug = this.config.debug;\n      }\n\n      var formats = this.formats;\n\n      if (!formats && formats === undefined) {\n        formats = this.config.formats ? Object.assign({}, this.config.formats) : this.config.formats === null ? null : undefined;\n      }\n\n      var theme = this.theme || (this.config.theme ? this.config.theme : 'snow');\n      this.elementRef.nativeElement.insertAdjacentHTML('afterbegin', this.preserveWhitespace ? '<pre quill-view-element></pre>' : '<div quill-view-element></div>');\n      this.editorElem = this.elementRef.nativeElement.querySelector('[quill-view-element]');\n      this.zone.runOutsideAngular(function () {\n        _this7.quillEditor = new Quill$1(_this7.editorElem, {\n          debug: debug,\n          formats: formats,\n          modules: modules,\n          readOnly: true,\n          strict: _this7.strict,\n          theme: theme\n        });\n      });\n      this.renderer.addClass(this.editorElem, 'ngx-quill-view');\n\n      if (this.content) {\n        this.valueSetter(this.quillEditor, this.content);\n      }\n    }\n  }]);\n\n  return QuillViewComponent;\n}();\n\nQuillViewComponent.ɵfac = function QuillViewComponent_Factory(t) {\n  return new (t || QuillViewComponent)(ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID), ɵngcc0.ɵɵdirectiveInject(QUILL_CONFIG_TOKEN), ɵngcc0.ɵɵdirectiveInject(Renderer2), ɵngcc0.ɵɵdirectiveInject(ElementRef), ɵngcc0.ɵɵdirectiveInject(NgZone));\n};\n\nQuillViewComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: QuillViewComponent,\n  selectors: [[\"quill-view\"]],\n  inputs: {\n    strict: \"strict\",\n    customOptions: \"customOptions\",\n    preserveWhitespace: \"preserveWhitespace\",\n    format: \"format\",\n    theme: \"theme\",\n    modules: \"modules\",\n    debug: \"debug\",\n    formats: \"formats\",\n    content: \"content\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  decls: 0,\n  vars: 0,\n  template: function QuillViewComponent_Template(rf, ctx) {},\n  styles: [\"\\n.ql-container.ngx-quill-view {\\n  border: 0;\\n}\\n\"],\n  encapsulation: 2\n});\n\nQuillViewComponent.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [QUILL_CONFIG_TOKEN]\n    }]\n  }, {\n    type: Renderer2,\n    decorators: [{\n      type: Inject,\n      args: [Renderer2]\n    }]\n  }, {\n    type: ElementRef,\n    decorators: [{\n      type: Inject,\n      args: [ElementRef]\n    }]\n  }, {\n    type: NgZone,\n    decorators: [{\n      type: Inject,\n      args: [NgZone]\n    }]\n  }];\n};\n\n__decorate([Input()], QuillViewComponent.prototype, \"format\", void 0);\n\n__decorate([Input()], QuillViewComponent.prototype, \"theme\", void 0);\n\n__decorate([Input()], QuillViewComponent.prototype, \"modules\", void 0);\n\n__decorate([Input()], QuillViewComponent.prototype, \"debug\", void 0);\n\n__decorate([Input()], QuillViewComponent.prototype, \"formats\", void 0);\n\n__decorate([Input()], QuillViewComponent.prototype, \"strict\", void 0);\n\n__decorate([Input()], QuillViewComponent.prototype, \"content\", void 0);\n\n__decorate([Input()], QuillViewComponent.prototype, \"customOptions\", void 0);\n\n__decorate([Input()], QuillViewComponent.prototype, \"preserveWhitespace\", void 0);\n\nQuillViewComponent = __decorate([__param(0, Inject(PLATFORM_ID)), __param(1, Inject(QUILL_CONFIG_TOKEN)), __param(2, Inject(Renderer2)), __param(3, Inject(ElementRef)), __param(4, Inject(NgZone))], QuillViewComponent);\nvar QuillModule_1;\n\nvar QuillModule = QuillModule_1 = /*#__PURE__*/function () {\n  function QuillModule() {\n    _classCallCheck(this, QuillModule);\n  }\n\n  _createClass(QuillModule, null, [{\n    key: \"forRoot\",\n    value: function forRoot(config) {\n      return {\n        ngModule: QuillModule_1,\n        providers: [{\n          provide: QUILL_CONFIG_TOKEN,\n          useValue: config || {\n            modules: defaultModules\n          }\n        }]\n      };\n    }\n  }]);\n\n  return QuillModule;\n}();\n\nQuillModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: QuillModule\n});\nQuillModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function QuillModule_Factory(t) {\n    return new (t || QuillModule)();\n  },\n  providers: [],\n  imports: [[CommonModule]]\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(QuillEditorComponent, [{\n    type: Component,\n    args: [{\n      encapsulation: ViewEncapsulation.None,\n      providers: [{\n        multi: true,\n        provide: NG_VALUE_ACCESSOR,\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        useExisting: forwardRef(function () {\n          return QuillEditorComponent_1;\n        })\n      }, {\n        multi: true,\n        provide: NG_VALIDATORS,\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        useExisting: forwardRef(function () {\n          return QuillEditorComponent_1;\n        })\n      }],\n      selector: 'quill-editor',\n      template: \"\\n  <ng-content select=\\\"[quill-editor-toolbar]\\\"></ng-content>\\n\"\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef,\n      decorators: [{\n        type: Inject,\n        args: [ElementRef]\n      }]\n    }, {\n      type: ɵngcc1.DomSanitizer,\n      decorators: [{\n        type: Inject,\n        args: [DomSanitizer]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: ɵngcc0.Renderer2,\n      decorators: [{\n        type: Inject,\n        args: [Renderer2]\n      }]\n    }, {\n      type: ɵngcc0.NgZone,\n      decorators: [{\n        type: Inject,\n        args: [NgZone]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [QUILL_CONFIG_TOKEN]\n      }]\n    }];\n  }, {\n    required: [{\n      type: Input\n    }],\n    customToolbarPosition: [{\n      type: Input\n    }],\n    sanitize: [{\n      type: Input\n    }],\n    styles: [{\n      type: Input\n    }],\n    strict: [{\n      type: Input\n    }],\n    customOptions: [{\n      type: Input\n    }],\n    preserveWhitespace: [{\n      type: Input\n    }],\n    trimOnValidation: [{\n      type: Input\n    }],\n    onEditorCreated: [{\n      type: Output\n    }],\n    onEditorChanged: [{\n      type: Output\n    }],\n    onContentChanged: [{\n      type: Output\n    }],\n    onSelectionChanged: [{\n      type: Output\n    }],\n    onFocus: [{\n      type: Output\n    }],\n    onBlur: [{\n      type: Output\n    }],\n    valueGetter: [{\n      type: Input\n    }],\n    valueSetter: [{\n      type: Input\n    }],\n    format: [{\n      type: Input\n    }],\n    theme: [{\n      type: Input\n    }],\n    modules: [{\n      type: Input\n    }],\n    debug: [{\n      type: Input\n    }],\n    readOnly: [{\n      type: Input\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    maxLength: [{\n      type: Input\n    }],\n    minLength: [{\n      type: Input\n    }],\n    formats: [{\n      type: Input\n    }],\n    scrollingContainer: [{\n      type: Input\n    }],\n    bounds: [{\n      type: Input\n    }],\n    trackChanges: [{\n      type: Input\n    }],\n    classes: [{\n      type: Input\n    }]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(QuillViewHTMLComponent, [{\n    type: Component,\n    args: [{\n      encapsulation: ViewEncapsulation.None,\n      selector: 'quill-view-html',\n      template: \"\\n  <div class=\\\"ql-container\\\" [ngClass]=\\\"themeClass\\\">\\n    <div class=\\\"ql-editor\\\" [innerHTML]=\\\"innerHTML\\\">\\n    </div>\\n  </div>\\n\",\n      styles: [\"\\n.ql-container.ngx-quill-view-html {\\n  border: 0;\\n}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.DomSanitizer,\n      decorators: [{\n        type: Inject,\n        args: [DomSanitizer]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [QUILL_CONFIG_TOKEN]\n      }]\n    }];\n  }, {\n    content: [{\n      type: Input\n    }],\n    theme: [{\n      type: Input\n    }]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(QuillViewComponent, [{\n    type: Component,\n    args: [{\n      encapsulation: ViewEncapsulation.None,\n      selector: 'quill-view',\n      template: \"\\n\",\n      styles: [\"\\n.ql-container.ngx-quill-view {\\n  border: 0;\\n}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [QUILL_CONFIG_TOKEN]\n      }]\n    }, {\n      type: ɵngcc0.Renderer2,\n      decorators: [{\n        type: Inject,\n        args: [Renderer2]\n      }]\n    }, {\n      type: ɵngcc0.ElementRef,\n      decorators: [{\n        type: Inject,\n        args: [ElementRef]\n      }]\n    }, {\n      type: ɵngcc0.NgZone,\n      decorators: [{\n        type: Inject,\n        args: [NgZone]\n      }]\n    }];\n  }, {\n    strict: [{\n      type: Input\n    }],\n    customOptions: [{\n      type: Input\n    }],\n    preserveWhitespace: [{\n      type: Input\n    }],\n    format: [{\n      type: Input\n    }],\n    theme: [{\n      type: Input\n    }],\n    modules: [{\n      type: Input\n    }],\n    debug: [{\n      type: Input\n    }],\n    formats: [{\n      type: Input\n    }],\n    content: [{\n      type: Input\n    }]\n  });\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(QuillModule, {\n    declarations: function declarations() {\n      return [QuillEditorComponent, QuillViewComponent, QuillViewHTMLComponent];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [QuillEditorComponent, QuillViewComponent, QuillViewHTMLComponent];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(QuillModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [QuillEditorComponent, QuillViewComponent, QuillViewHTMLComponent],\n      exports: [QuillEditorComponent, QuillViewComponent, QuillViewHTMLComponent],\n      imports: [CommonModule],\n      providers: []\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { QUILL_CONFIG_TOKEN, QuillEditorComponent, QuillModule, QuillViewComponent, QuillViewHTMLComponent, defaultModules };","map":{"version":3,"sources":["ngx-quill/src/quill-defaults.ts","ngx-quill/src/quill-editor.interfaces.ts","ngx-quill/src/helpers.ts","ngx-quill/src/quill-editor.component.ts","ngx-quill/src/quill-view-html.component.ts","ngx-quill/src/quill-view.component.ts","ngx-quill/src/quill.module.ts","ngx-quill/ngx-quill.ts"],"names":["require$$0","Quill"],"mappings":"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","sourcesContent":["export const defaultModules = {\n  toolbar: [\n    ['bold', 'italic', 'underline', 'strike'], // toggled buttons\n    ['blockquote', 'code-block'],\n\n    [{ header: 1 }, { header: 2 }], // custom button values\n    [{ list: 'ordered' }, { list: 'bullet' }],\n    [{ script: 'sub' }, { script: 'super' }], // superscript/subscript\n    [{ indent: '-1' }, { indent: '+1' }], // outdent/indent\n    [{ direction: 'rtl' }], // text direction\n\n    [{ size: ['small', false, 'large', 'huge'] }], // custom dropdown\n    [{ header: [1, 2, 3, 4, 5, 6, false] }],\n\n    [\n      { color: [] },\n      { background: [] }\n    ], // dropdown with defaults from theme\n    [{ font: [] }],\n    [{ align: [] }],\n\n    ['clean'], // remove formatting button\n\n    ['link', 'image', 'video'] // link and image, video\n  ]\n}\n","import { InjectionToken } from '@angular/core'\n\nexport type QuillToolbarConfig = Array<Array< string | {\n  indent?: string\n  list?: string\n  direction?: string\n  header?: number | Array<boolean | number>\n  color?: string[] | string\n  background?: string[] | string\n  align?: string[] | string\n  script?: string\n  font?: string[] | string\n  size?: Array<boolean | string>\n}\n>>\n\nexport interface QuillModules {\n  [key: string]: any\n  clipboard?: {\n    matchers?: any[]\n    matchVisual?: boolean\n  } | boolean\n  history?: {\n    delay?: number\n    maxStack?: number\n    userOnly?: boolean\n  } | boolean\n  keyboard?: {\n    bindings?: any\n  } | boolean\n  syntax?: boolean\n  toolbar?: QuillToolbarConfig | string | {\n    container?: string | string[] | QuillToolbarConfig\n    handlers?: {\n      [key: string]: any\n    }\n  } | boolean\n}\n\nexport type QuillFormat = 'object' | 'json' | 'html' | 'text'\n\nexport interface QuillConfig {\n  bounds?: HTMLElement | string\n  debug?: 'error' | 'warn' | 'log' | false\n  format?: QuillFormat\n  formats?: string[]\n  modules?: QuillModules\n  placeholder?: string\n  readOnly?: boolean\n  scrollingContainer?: HTMLElement | string | null\n  theme?: string\n  strict?: boolean\n  // Custom Config to track all changes or only changes by 'user'\n  trackChanges?: 'user' | 'all'\n}\n\nexport const QUILL_CONFIG_TOKEN = new InjectionToken<QuillConfig>('config')\n","import {QuillFormat} from './quill-editor.interfaces'\n\nexport const getFormat = (format?: QuillFormat, configFormat?: QuillFormat): QuillFormat => {\n  const passedFormat = format || configFormat\n  return passedFormat || 'html'\n}\n","import {DOCUMENT, isPlatformServer} from '@angular/common'\nimport {DomSanitizer} from '@angular/platform-browser'\n\nimport {QUILL_CONFIG_TOKEN, QuillConfig, QuillModules} from './quill-editor.interfaces'\n\nimport {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  Output,\n  PLATFORM_ID,\n  Renderer2,\n  SecurityContext,\n  SimpleChanges,\n  ViewEncapsulation\n} from '@angular/core'\n\nimport {ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR, Validator} from '@angular/forms'\nimport {defaultModules} from './quill-defaults'\n\nimport {getFormat} from './helpers'\nimport { QuillDelta, QuillEditor } from './quill.interfaces'\n\n// Because quill uses `document` directly, we cannot `import` during SSR\n// instead, we load dynamically via `require('quill')` in `ngAfterViewInit()`\ndeclare const require: any\nlet Quill: any = null\n\nexport interface CustomOption {\n  import: string\n  whitelist: any[]\n}\n\nexport interface Range {\n  index: number\n  length: number\n}\n\nexport interface ContentChange {\n  content: any\n  delta: QuillDelta\n  editor: QuillEditor\n  html: string | null\n  oldDelta: QuillDelta\n  source: string\n  text: string\n}\n\nexport interface SelectionChange {\n  editor: QuillEditor\n  oldRange: Range | null\n  range: Range | null\n  source: string\n}\n\nexport interface Blur {\n  editor: QuillEditor\n  source: string\n}\n\nexport interface Focus {\n  editor: QuillEditor\n  source: string\n}\n\nexport type EditorChangeContent = ContentChange & {event: 'text-change'}\nexport type EditorChangeSelection = SelectionChange & {event: 'selection-change'}\n\n@Component({\n  encapsulation: ViewEncapsulation.None,\n  providers: [\n    {\n      multi: true,\n      provide: NG_VALUE_ACCESSOR,\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      useExisting: forwardRef(() => QuillEditorComponent)\n    },\n    {\n      multi: true,\n      provide: NG_VALIDATORS,\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      useExisting: forwardRef(() => QuillEditorComponent)\n    }\n  ],\n  selector: 'quill-editor',\n  template: `\n  <ng-content select=\"[quill-editor-toolbar]\"></ng-content>\n`\n})\nexport class QuillEditorComponent implements AfterViewInit, ControlValueAccessor, OnChanges, OnDestroy, Validator {\n\n  static normalizeClassNames(classes: string): string[] {\n    const classList = classes.trim().split(' ')\n    return classList.reduce((prev: string[], cur: string) => {\n      const trimmed = cur.trim()\n      if (trimmed) {\n        prev.push(trimmed)\n      }\n\n      return prev\n    }, [])\n  }\n\n  quillEditor!: QuillEditor\n  editorElem: HTMLElement | undefined\n  content: any\n\n  @Input() format?: 'object' | 'html' | 'text' | 'json'\n  @Input() theme?: string\n  @Input() modules?: QuillModules\n  @Input() debug?: 'warn' | 'log' | 'error' | false\n  @Input() readOnly?: boolean\n  @Input() placeholder?: string\n  @Input() maxLength?: number\n  @Input() minLength?: number\n  @Input() required = false\n  @Input() formats?: string[] | null\n  @Input() customToolbarPosition: 'top' | 'bottom' = 'top'\n  @Input() sanitize = false\n  @Input() styles: any = null\n  @Input() strict = true\n  @Input() scrollingContainer?: HTMLElement | string | null\n  @Input() bounds?: HTMLElement | string\n  @Input() customOptions: CustomOption[] = []\n  @Input() trackChanges?: 'user' | 'all'\n  @Input() preserveWhitespace = false\n  @Input() classes?: string\n  @Input() trimOnValidation = false\n\n  @Output() onEditorCreated: EventEmitter<QuillEditor> = new EventEmitter()\n  @Output() onEditorChanged: EventEmitter<EditorChangeContent | EditorChangeSelection> = new EventEmitter()\n  @Output() onContentChanged: EventEmitter<ContentChange> = new EventEmitter()\n  @Output() onSelectionChanged: EventEmitter<SelectionChange> = new EventEmitter()\n  @Output() onFocus: EventEmitter<Focus> = new EventEmitter()\n  @Output() onBlur: EventEmitter<Blur> = new EventEmitter()\n\n  disabled = false // used to store initial value before ViewInit\n\n  constructor(\n    @Inject(ElementRef) private elementRef: ElementRef,\n    @Inject(DomSanitizer) private domSanitizer: DomSanitizer,\n    @Inject(DOCUMENT) private doc: any,\n    @Inject(PLATFORM_ID) private platformId: any,\n    @Inject(Renderer2) private renderer: Renderer2,\n    @Inject(NgZone) private zone: NgZone,\n    @Inject(QUILL_CONFIG_TOKEN) private config: QuillConfig\n  ) {}\n\n  onModelChange(_modelValue?: any) {}\n  onModelTouched() {}\n  onValidatorChanged() {}\n\n  @Input()\n  valueGetter = (quillEditor: QuillEditor, editorElement: HTMLElement): string | any  => {\n    let html: string | null = editorElement.querySelector('.ql-editor')!.innerHTML\n    if (html === '<p><br></p>' || html === '<div><br></div>') {\n      html = null\n    }\n    let modelValue: string | QuillDelta | null = html\n    const format = getFormat(this.format, this.config.format)\n\n    if (format === 'text') {\n      modelValue = quillEditor.getText()\n    } else if (format === 'object') {\n      modelValue = quillEditor.getContents()\n    } else if (format === 'json') {\n      try {\n        modelValue = JSON.stringify(quillEditor.getContents())\n      } catch (e) {\n        modelValue = quillEditor.getText()\n      }\n    }\n\n    return modelValue\n  }\n\n  @Input()\n  valueSetter = (quillEditor: QuillEditor, value: any): any => {\n    const format = getFormat(this.format, this.config.format)\n    if (format === 'html') {\n      if (this.sanitize) {\n        value = this.domSanitizer.sanitize(SecurityContext.HTML, value)\n      }\n      return quillEditor.clipboard.convert(value)\n    } else if (format === 'json') {\n      try {\n        return JSON.parse(value)\n      } catch (e) {\n        return [{ insert: value }]\n      }\n    }\n\n    return value\n  }\n\n  ngAfterViewInit() {\n    if (isPlatformServer(this.platformId)) {\n      return\n    }\n    if (!Quill) {\n      this.zone.runOutsideAngular(() => {\n        Quill = require('quill')\n      })\n    }\n\n    this.elementRef.nativeElement.insertAdjacentHTML(\n      this.customToolbarPosition === 'top' ? 'beforeend' : 'afterbegin',\n      this.preserveWhitespace ? '<pre quill-editor-element></pre>' : '<div quill-editor-element></div>'\n    )\n\n    this.editorElem = this.elementRef.nativeElement.querySelector(\n      '[quill-editor-element]'\n    )\n\n    const toolbarElem = this.elementRef.nativeElement.querySelector(\n      '[quill-editor-toolbar]'\n    )\n    const modules = Object.assign({}, this.modules || (this.config.modules || defaultModules))\n\n    if (toolbarElem) {\n      modules.toolbar = toolbarElem\n    } else if (modules.toolbar === undefined) {\n      modules.toolbar = defaultModules.toolbar\n    }\n\n    let placeholder = this.placeholder !== undefined ? this.placeholder : this.config.placeholder\n    if (placeholder === undefined) {\n      placeholder = 'Insert text here ...'\n    }\n\n    if (this.styles) {\n      Object.keys(this.styles).forEach((key: string) => {\n        this.renderer.setStyle(this.editorElem, key, this.styles[key])\n      })\n    }\n\n    if (this.classes) {\n      this.addClasses(this.classes)\n    }\n\n    this.customOptions.forEach((customOption) => {\n      const newCustomOption = Quill.import(customOption.import)\n      newCustomOption.whitelist = customOption.whitelist\n      Quill.register(newCustomOption, true)\n    })\n\n    let bounds = this.bounds && this.bounds === 'self' ? this.editorElem : this.bounds\n    if (!bounds) {\n      bounds = this.config.bounds ? this.config.bounds : this.doc.body\n    }\n\n    let debug = this.debug\n    if (!debug && debug !== false && this.config.debug) {\n      debug = this.config.debug\n    }\n\n    let readOnly = this.readOnly\n    if (!readOnly && this.readOnly !== false) {\n      readOnly = this.config.readOnly !== undefined ? this.config.readOnly : false\n    }\n\n    let scrollingContainer = this.scrollingContainer\n    if (!scrollingContainer && this.scrollingContainer !== null) {\n      scrollingContainer = this.config.scrollingContainer === null || this.config.scrollingContainer ? this.config.scrollingContainer : null\n    }\n\n    let formats = this.formats\n    if (!formats && formats === undefined) {\n      formats = this.config.formats ? [...this.config.formats] : (this.config.formats === null ? null : undefined)\n    }\n\n    this.zone.runOutsideAngular(() => {\n      this.quillEditor = new Quill(this.editorElem, {\n        bounds,\n        debug,\n        formats,\n        modules,\n        placeholder,\n        readOnly,\n        scrollingContainer,\n        strict: this.strict,\n        theme: this.theme || (this.config.theme ? this.config.theme : 'snow')\n      })\n    })\n\n    if (this.content) {\n      const format = getFormat(this.format, this.config.format)\n      if (format === 'object') {\n        this.quillEditor.setContents(this.content, 'silent')\n      } else if (format === 'text') {\n        this.quillEditor.setText(this.content, 'silent')\n      } else if (format === 'json') {\n        try {\n          this.quillEditor.setContents(JSON.parse(this.content), 'silent')\n        } catch (e) {\n          this.quillEditor.setText(this.content, 'silent')\n        }\n      } else {\n        if (this.sanitize) {\n          this.content = this.domSanitizer.sanitize(SecurityContext.HTML, this.content)\n        }\n        const contents = this.quillEditor.clipboard.convert(this.content)\n        this.quillEditor.setContents(contents, 'silent')\n      }\n\n      this.quillEditor.history.clear()\n    }\n\n    // initialize disabled status based on this.disabled as default value\n    this.setDisabledState()\n\n    // triggered if selection or text changed\n    this.quillEditor.on(\n      'editor-change',\n      this.editorChangeHandler\n    )\n\n    // mark model as touched if editor lost focus\n    this.quillEditor.on(\n      'selection-change',\n      this.selectionChangeHandler\n    )\n\n    // update model if text changes\n    this.quillEditor.on(\n      'text-change',\n      this.textChangeHandler\n    )\n\n    // trigger created in a timeout to avoid changed models after checked\n    // if you are using the editor api in created output to change the editor content\n    setTimeout(() => {\n      this.onValidatorChanged()\n      this.onEditorCreated.emit(this.quillEditor)\n    })\n  }\n\n  selectionChangeHandler = (range: Range | null, oldRange: Range | null, source: string) => {\n    const shouldTriggerOnModelTouched = !range && this.onModelTouched\n\n    // only emit changes when there's any listener\n    if (!this.onBlur.observers.length &&\n        !this.onFocus.observers.length &&\n        !this.onSelectionChanged.observers.length &&\n        !shouldTriggerOnModelTouched) {\n      return\n    }\n\n    this.zone.run(() => {\n      if (range === null) {\n        this.onBlur.emit({\n          editor: this.quillEditor,\n          source\n        })\n      } else if (oldRange === null) {\n        this.onFocus.emit({\n          editor: this.quillEditor,\n          source\n        })\n      }\n\n      this.onSelectionChanged.emit({\n        editor: this.quillEditor,\n        oldRange,\n        range,\n        source\n      })\n\n      if (shouldTriggerOnModelTouched) {\n        this.onModelTouched()\n      }\n    })\n  }\n\n  textChangeHandler = (delta: QuillDelta, oldDelta: QuillDelta, source: string): void => {\n    // only emit changes emitted by user interactions\n    const text = this.quillEditor.getText()\n    const content = this.quillEditor.getContents()\n\n    let html: string | null = this.editorElem!.querySelector('.ql-editor')!.innerHTML\n    if (html === '<p><br></p>' || html === '<div><br></div>') {\n      html = null\n    }\n\n    const trackChanges = this.trackChanges || this.config.trackChanges\n    const shouldTriggerOnModelChange = (source === Quill.sources.USER || trackChanges && trackChanges === 'all') && this.onModelChange\n\n    // only emit changes when there's any listener\n    if (!this.onContentChanged.observers.length && !shouldTriggerOnModelChange) {\n      return\n    }\n\n    this.zone.run(() => {\n      if (shouldTriggerOnModelChange) {\n        this.onModelChange(\n          this.valueGetter(this.quillEditor, this.editorElem!)\n        )\n      }\n\n      this.onContentChanged.emit({\n        content,\n        delta,\n        editor: this.quillEditor,\n        html,\n        oldDelta,\n        source,\n        text\n      })\n    })\n  }\n\n  editorChangeHandler = (event: 'text-change' | 'selection-change', current: any | Range | null, old: any | Range | null, source: string): void => {\n    // only emit changes when there's any listener\n    if (!this.onEditorChanged.observers.length) {\n      return\n    }\n\n    // only emit changes emitted by user interactions\n    if (event === 'text-change') {\n      const text = this.quillEditor.getText()\n      const content = this.quillEditor.getContents()\n\n      let html: string | null = this.editorElem!.querySelector('.ql-editor')!.innerHTML\n      if (html === '<p><br></p>' || html === '<div><br></div>') {\n        html = null\n      }\n\n      this.zone.run(() => {\n        this.onEditorChanged.emit({\n          content,\n          delta: current,\n          editor: this.quillEditor,\n          event,\n          html,\n          oldDelta: old,\n          source,\n          text\n        })\n      })\n    } else {\n      this.onEditorChanged.emit({\n        editor: this.quillEditor,\n        event,\n        oldRange: old,\n        range: current,\n        source\n      })\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.quillEditor) {\n      this.quillEditor.off('selection-change', this.selectionChangeHandler)\n      this.quillEditor.off('text-change', this.textChangeHandler)\n      this.quillEditor.off('editor-change', this.editorChangeHandler)\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (!this.quillEditor) {\n      return\n    }\n    // tslint:disable:no-string-literal\n    if (changes['readOnly']) {\n      this.quillEditor.enable(!changes['readOnly'].currentValue)\n    }\n    if (changes['placeholder']) {\n      this.quillEditor.root.dataset.placeholder =\n        changes['placeholder'].currentValue\n    }\n    if (changes['styles']) {\n      const currentStyling = changes['styles'].currentValue\n      const previousStyling = changes['styles'].previousValue\n\n      if (previousStyling) {\n        Object.keys(previousStyling).forEach((key: string) => {\n          this.renderer.removeStyle(this.editorElem, key)\n        })\n      }\n      if (currentStyling) {\n        Object.keys(currentStyling).forEach((key: string) => {\n          this.renderer.setStyle(this.editorElem, key, this.styles[key])\n        })\n      }\n    }\n    if (changes['classes']) {\n      const currentClasses = changes['classes'].currentValue\n      const previousClasses = changes['classes'].previousValue\n\n      if (previousClasses) {\n        this.removeClasses(previousClasses)\n      }\n\n      if (currentClasses) {\n        this.addClasses(currentClasses)\n      }\n    }\n    // tslint:enable:no-string-literal\n  }\n\n  addClasses(classList: string): void {\n    QuillEditorComponent.normalizeClassNames(classList).forEach((c: string) => {\n      this.renderer.addClass(this.editorElem, c)\n    })\n  }\n\n  removeClasses(classList: string): void {\n    QuillEditorComponent.normalizeClassNames(classList).forEach((c: string) => {\n      this.renderer.removeClass(this.editorElem, c)\n    })\n  }\n\n  writeValue(currentValue: any) {\n    this.content = currentValue\n    const format = getFormat(this.format, this.config.format)\n\n    if (this.quillEditor) {\n      if (currentValue) {\n        if (format === 'text') {\n          this.quillEditor.setText(currentValue)\n        } else {\n          this.quillEditor.setContents(\n            this.valueSetter(this.quillEditor, this.content)\n          )\n        }\n        return\n      }\n      this.quillEditor.setText('')\n    }\n  }\n\n  setDisabledState(isDisabled: boolean = this.disabled): void {\n    // store initial value to set appropriate disabled status after ViewInit\n    this.disabled = isDisabled\n    if (this.quillEditor) {\n      if (isDisabled) {\n        this.quillEditor.disable()\n        this.renderer.setAttribute(this.elementRef.nativeElement, 'disabled', 'disabled')\n      } else {\n        if (!this.readOnly) {\n          this.quillEditor.enable()\n        }\n        this.renderer.removeAttribute(this.elementRef.nativeElement, 'disabled')\n      }\n    }\n  }\n\n  registerOnChange(fn: (modelValue: any) => void): void {\n    this.onModelChange = fn\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onModelTouched = fn\n  }\n\n  registerOnValidatorChange(fn: () => void) {\n    this.onValidatorChanged = fn\n  }\n\n  validate() {\n    if (!this.quillEditor) {\n      return null\n    }\n\n    const err: {\n      minLengthError?: {\n        given: number\n        minLength: number\n      }\n      maxLengthError?: {\n        given: number\n        maxLength: number\n      }\n      requiredError?: { empty: boolean }\n    } = {}\n    let valid = true\n\n    const text = this.quillEditor.getText()\n    // trim text if wanted + handle special case that an empty editor contains a new line\n    const textLength = this.trimOnValidation ? text.trim().length : (text.length === 1 && text.trim().length === 0 ? 0 : text.length - 1)\n\n    if (this.minLength && textLength && textLength < this.minLength) {\n      err.minLengthError = {\n        given: textLength,\n        minLength: this.minLength\n      }\n\n      valid = false\n    }\n\n    if (this.maxLength && textLength > this.maxLength) {\n      err.maxLengthError = {\n        given: textLength,\n        maxLength: this.maxLength\n      }\n\n      valid = false\n    }\n\n    if (this.required && !textLength) {\n      err.requiredError = {\n        empty: true\n      }\n\n      valid = false\n    }\n\n    return valid ? null : err\n  }\n}\n","import { DomSanitizer, SafeHtml } from '@angular/platform-browser'\n\nimport { QUILL_CONFIG_TOKEN, QuillConfig } from './quill-editor.interfaces'\n\nimport {\n  Component,\n  Inject,\n  Input,\n  OnChanges,\n  SimpleChanges,\n  ViewEncapsulation\n} from '@angular/core'\n\n@Component({\n  encapsulation: ViewEncapsulation.None,\n  selector: 'quill-view-html',\n  styles: [`\n.ql-container.ngx-quill-view-html {\n  border: 0;\n}\n`],\n  template: `\n  <div class=\"ql-container\" [ngClass]=\"themeClass\">\n    <div class=\"ql-editor\" [innerHTML]=\"innerHTML\">\n    </div>\n  </div>\n`\n})\nexport class QuillViewHTMLComponent implements OnChanges {\n  innerHTML: SafeHtml = ''\n  themeClass = 'ql-snow'\n\n  @Input() content = ''\n  @Input() theme?: string\n\n  constructor(\n    @Inject(DomSanitizer) private sanitizer: DomSanitizer,\n    @Inject(QUILL_CONFIG_TOKEN) private config: QuillConfig\n  ) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.theme) {\n      const theme = changes.theme.currentValue || (this.config.theme ? this.config.theme : 'snow')\n      this.themeClass = `ql-${theme} ngx-quill-view-html`\n    } else if (!this.theme) {\n      const theme = this.config.theme ? this.config.theme : 'snow'\n      this.themeClass = `ql-${theme} ngx-quill-view-html`\n    }\n    if (changes.content) {\n      this.innerHTML = this.sanitizer.bypassSecurityTrustHtml(changes.content.currentValue)\n    }\n  }\n}\n","import { isPlatformServer } from '@angular/common'\n\nimport { QUILL_CONFIG_TOKEN, QuillConfig, QuillModules } from './quill-editor.interfaces'\n\nimport {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  PLATFORM_ID,\n  Renderer2,\n  SimpleChanges,\n  ViewEncapsulation,\n  NgZone\n} from '@angular/core'\n\nimport { defaultModules } from './quill-defaults'\nimport { CustomOption } from './quill-editor.component'\nimport {getFormat} from './helpers'\nimport { QuillEditor } from './quill.interfaces'\n\n// Because quill uses `document` directly, we cannot `import` during SSR\n// instead, we load dynamically via `require('quill')` in `ngAfterViewInit()`\ndeclare const require: any\nlet Quill: any = null\n\n@Component({\n  encapsulation: ViewEncapsulation.None,\n  selector: 'quill-view',\n  styles: [`\n.ql-container.ngx-quill-view {\n  border: 0;\n}\n`],\n  template: `\n`\n})\nexport class QuillViewComponent implements AfterViewInit, OnChanges {\n  quillEditor!: QuillEditor\n  editorElem: HTMLElement | undefined\n\n  @Input() format?: 'object' | 'html' | 'text' | 'json'\n  @Input() theme?: string\n  @Input() modules?: QuillModules\n  @Input() debug?: 'warn' | 'log' | 'error' | false\n  @Input() formats?: string[] | null\n  @Input() strict = true\n  @Input() content: any\n  @Input() customOptions: CustomOption[] = []\n  @Input() preserveWhitespace = false\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: any,\n    @Inject(QUILL_CONFIG_TOKEN) private config: QuillConfig,\n    @Inject(Renderer2) private renderer: Renderer2,\n    @Inject(ElementRef) private elementRef: ElementRef,\n    @Inject(NgZone) private zone: NgZone\n  ) {}\n\n  valueSetter = (quillEditor: QuillEditor, value: any): any => {\n    const format = getFormat(this.format, this.config.format)\n    let content = value\n    if (format === 'html' || format === 'text') {\n      content = quillEditor.clipboard.convert(value)\n    } else if (format === 'json') {\n      try {\n        content = JSON.parse(value)\n      } catch (e) {\n        content = [{ insert: value }]\n      }\n    }\n    quillEditor.setContents(content)\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (!this.quillEditor) {\n      return\n    }\n    if (changes.content) {\n      this.valueSetter(this.quillEditor, changes.content.currentValue)\n    }\n  }\n\n  ngAfterViewInit() {\n    if (isPlatformServer(this.platformId)) {\n      return\n    }\n    if (!Quill) {\n      this.zone.runOutsideAngular(() => {\n        Quill = require('quill')\n      })\n    }\n\n    const modules = Object.assign({}, this.modules || (this.config.modules || defaultModules))\n    modules.toolbar = false\n\n    this.customOptions.forEach((customOption) => {\n      const newCustomOption = Quill.import(customOption.import)\n      newCustomOption.whitelist = customOption.whitelist\n      Quill.register(newCustomOption, true)\n    })\n\n    let debug = this.debug\n    if (!debug && debug !== false && this.config.debug) {\n      debug = this.config.debug\n    }\n\n    let formats = this.formats\n    if (!formats && formats === undefined) {\n      formats = this.config.formats ? Object.assign({}, this.config.formats) : (this.config.formats === null ? null : undefined)\n    }\n    const theme = this.theme || (this.config.theme ? this.config.theme : 'snow')\n\n    this.elementRef.nativeElement.insertAdjacentHTML(\n      'afterbegin',\n      this.preserveWhitespace ? '<pre quill-view-element></pre>' : '<div quill-view-element></div>'\n    )\n\n    this.editorElem = this.elementRef.nativeElement.querySelector(\n      '[quill-view-element]'\n    )\n\n    this.zone.runOutsideAngular(() => {\n      this.quillEditor = new Quill(this.editorElem, {\n        debug,\n        formats,\n        modules,\n        readOnly: true,\n        strict: this.strict,\n        theme\n      })\n    })\n\n    this.renderer.addClass(this.editorElem, 'ngx-quill-view')\n\n    if (this.content) {\n      this.valueSetter(this.quillEditor, this.content)\n    }\n  }\n}\n","import { CommonModule } from '@angular/common'\nimport { ModuleWithProviders, NgModule } from '@angular/core'\n\nimport { defaultModules } from './quill-defaults'\nimport { QuillEditorComponent } from './quill-editor.component'\nimport { QUILL_CONFIG_TOKEN, QuillConfig } from './quill-editor.interfaces'\nimport { QuillViewHTMLComponent } from './quill-view-html.component'\nimport { QuillViewComponent } from './quill-view.component'\n\n@NgModule({\n  declarations: [\n    QuillEditorComponent,\n    QuillViewComponent,\n    QuillViewHTMLComponent\n  ],\n  exports: [QuillEditorComponent, QuillViewComponent, QuillViewHTMLComponent],\n  imports: [CommonModule],\n  providers: []\n})\nexport class QuillModule {\n  static forRoot(config?: QuillConfig): ModuleWithProviders {\n    return {\n      ngModule: QuillModule,\n      providers: [\n        {\n          provide: QUILL_CONFIG_TOKEN,\n          useValue: config || { modules: defaultModules }\n        }\n      ]\n    }\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]},"metadata":{},"sourceType":"module"}