{"ast":null,"code":"import { Component, Renderer2, Input, ViewChild, NgModule } from '@angular/core';\nimport * as ɵngcc0 from '@angular/core';\nvar _c0 = [\"bcElement\"];\n\nvar\n/** @type {?} */\njsbarcode = require('jsbarcode');\n\nvar NgxBarcodeComponent =\n/** @class */\nfunction () {\n  /**\n   * @param {?} renderer\n   */\n  function NgxBarcodeComponent(renderer) {\n    this.renderer = renderer;\n    this.elementType = 'svg';\n    this.cssClass = 'barcode'; // this should be done more elegantly\n\n    this.format = 'CODE128';\n    this.lineColor = '#000000';\n    this.width = 2;\n    this.height = 100;\n    this.displayValue = false;\n    this.fontOptions = '';\n    this.font = 'monospace';\n    this.textAlign = 'center';\n    this.textPosition = 'bottom';\n    this.textMargin = 2;\n    this.fontSize = 20;\n    this.background = '#ffffff';\n    this.margin = 10;\n    this.marginTop = 10;\n    this.marginBottom = 10;\n    this.marginLeft = 10;\n    this.marginRight = 10;\n    this.value = '';\n\n    this.valid = function () {\n      return true;\n    };\n  }\n\n  Object.defineProperty(NgxBarcodeComponent.prototype, \"options\", {\n    /**\n     * @return {?}\n     */\n    get: function get() {\n      return {\n        format: this.format,\n        lineColor: this.lineColor,\n        width: this.width,\n        height: this.height,\n        displayValue: this.displayValue,\n        fontOptions: this.fontOptions,\n        font: this.font,\n        textAlign: this.textAlign,\n        textPosition: this.textPosition,\n        textMargin: this.textMargin,\n        fontSize: this.fontSize,\n        background: this.background,\n        margin: this.margin,\n        marginTop: this.marginTop,\n        marginBottom: this.marginBottom,\n        marginLeft: this.marginLeft,\n        marginRight: this.marginRight,\n        valid: this.valid\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * @return {?}\n   */\n\n  NgxBarcodeComponent.prototype.ngOnChanges = function () {\n    this.createBarcode();\n  };\n  /**\n   * @return {?}\n   */\n\n\n  NgxBarcodeComponent.prototype.createBarcode = function () {\n    if (!this.value) {\n      return;\n    }\n\n    var\n    /** @type {?} */\n    element;\n\n    switch (this.elementType) {\n      case 'img':\n        element = this.renderer.createElement('img');\n        break;\n\n      case 'canvas':\n        element = this.renderer.createElement('canvas');\n        break;\n\n      case 'svg':\n      default:\n        element = this.renderer.createElement('svg', 'svg');\n    }\n\n    jsbarcode(element, this.value, this.options);\n\n    for (var _i = 0, _a = this.bcElement.nativeElement.childNodes; _i < _a.length; _i++) {\n      var node = _a[_i];\n      this.renderer.removeChild(this.bcElement.nativeElement, node);\n    }\n\n    this.renderer.appendChild(this.bcElement.nativeElement, element);\n  };\n  /**\n   * @nocollapse\n   */\n\n\n  NgxBarcodeComponent.ctorParameters = function () {\n    return [{\n      type: Renderer2\n    }];\n  };\n\n  NgxBarcodeComponent.propDecorators = {\n    'elementType': [{\n      type: Input,\n      args: ['bc-element-type']\n    }],\n    'cssClass': [{\n      type: Input,\n      args: ['bc-class']\n    }],\n    'format': [{\n      type: Input,\n      args: ['bc-format']\n    }],\n    'lineColor': [{\n      type: Input,\n      args: ['bc-line-color']\n    }],\n    'width': [{\n      type: Input,\n      args: ['bc-width']\n    }],\n    'height': [{\n      type: Input,\n      args: ['bc-height']\n    }],\n    'displayValue': [{\n      type: Input,\n      args: ['bc-display-value']\n    }],\n    'fontOptions': [{\n      type: Input,\n      args: ['bc-font-options']\n    }],\n    'font': [{\n      type: Input,\n      args: ['bc-font']\n    }],\n    'textAlign': [{\n      type: Input,\n      args: ['bc-text-align']\n    }],\n    'textPosition': [{\n      type: Input,\n      args: ['bc-text-position']\n    }],\n    'textMargin': [{\n      type: Input,\n      args: ['bc-text-margin']\n    }],\n    'fontSize': [{\n      type: Input,\n      args: ['bc-font-size']\n    }],\n    'background': [{\n      type: Input,\n      args: ['bc-background']\n    }],\n    'margin': [{\n      type: Input,\n      args: ['bc-margin']\n    }],\n    'marginTop': [{\n      type: Input,\n      args: ['bc-margin-top']\n    }],\n    'marginBottom': [{\n      type: Input,\n      args: ['bc-margin-bottom']\n    }],\n    'marginLeft': [{\n      type: Input,\n      args: ['bc-margin-left']\n    }],\n    'marginRight': [{\n      type: Input,\n      args: ['bc-margin-right']\n    }],\n    'value': [{\n      type: Input,\n      args: ['bc-value']\n    }],\n    'bcElement': [{\n      type: ViewChild,\n      args: ['bcElement',\n      /** @type {?} */\n      {\n        static: true\n      }]\n    }],\n    'valid': [{\n      type: Input,\n      args: ['bc-valid']\n    }]\n  };\n\n  NgxBarcodeComponent.ɵfac = function NgxBarcodeComponent_Factory(t) {\n    return new (t || NgxBarcodeComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2));\n  };\n\n  NgxBarcodeComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n    type: NgxBarcodeComponent,\n    selectors: [[\"ngx-barcode\"]],\n    viewQuery: function NgxBarcodeComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵstaticViewQuery(_c0, true);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.bcElement = _t.first);\n      }\n    },\n    inputs: {\n      elementType: [\"bc-element-type\", \"elementType\"],\n      cssClass: [\"bc-class\", \"cssClass\"],\n      format: [\"bc-format\", \"format\"],\n      lineColor: [\"bc-line-color\", \"lineColor\"],\n      width: [\"bc-width\", \"width\"],\n      height: [\"bc-height\", \"height\"],\n      displayValue: [\"bc-display-value\", \"displayValue\"],\n      fontOptions: [\"bc-font-options\", \"fontOptions\"],\n      font: [\"bc-font\", \"font\"],\n      textAlign: [\"bc-text-align\", \"textAlign\"],\n      textPosition: [\"bc-text-position\", \"textPosition\"],\n      textMargin: [\"bc-text-margin\", \"textMargin\"],\n      fontSize: [\"bc-font-size\", \"fontSize\"],\n      background: [\"bc-background\", \"background\"],\n      margin: [\"bc-margin\", \"margin\"],\n      marginTop: [\"bc-margin-top\", \"marginTop\"],\n      marginBottom: [\"bc-margin-bottom\", \"marginBottom\"],\n      marginLeft: [\"bc-margin-left\", \"marginLeft\"],\n      marginRight: [\"bc-margin-right\", \"marginRight\"],\n      value: [\"bc-value\", \"value\"],\n      valid: [\"bc-valid\", \"valid\"]\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 2,\n    vars: 2,\n    consts: [[\"bcElement\", \"\"]],\n    template: function NgxBarcodeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelement(0, \"div\", null, 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassMap(ctx.cssClass);\n      }\n    },\n    encapsulation: 2\n  });\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(NgxBarcodeComponent, [{\n      type: Component,\n      args: [{\n        selector: 'ngx-barcode',\n        template: \"<div #bcElement [class]=\\\"cssClass\\\"></div>\",\n        styles: []\n      }]\n    }], function () {\n      return [{\n        type: ɵngcc0.Renderer2\n      }];\n    }, {\n      elementType: [{\n        type: Input,\n        args: ['bc-element-type']\n      }],\n      cssClass: [{\n        type: Input,\n        args: ['bc-class']\n      }],\n      format: [{\n        type: Input,\n        args: ['bc-format']\n      }],\n      lineColor: [{\n        type: Input,\n        args: ['bc-line-color']\n      }],\n      width: [{\n        type: Input,\n        args: ['bc-width']\n      }],\n      height: [{\n        type: Input,\n        args: ['bc-height']\n      }],\n      displayValue: [{\n        type: Input,\n        args: ['bc-display-value']\n      }],\n      fontOptions: [{\n        type: Input,\n        args: ['bc-font-options']\n      }],\n      font: [{\n        type: Input,\n        args: ['bc-font']\n      }],\n      textAlign: [{\n        type: Input,\n        args: ['bc-text-align']\n      }],\n      textPosition: [{\n        type: Input,\n        args: ['bc-text-position']\n      }],\n      textMargin: [{\n        type: Input,\n        args: ['bc-text-margin']\n      }],\n      fontSize: [{\n        type: Input,\n        args: ['bc-font-size']\n      }],\n      background: [{\n        type: Input,\n        args: ['bc-background']\n      }],\n      margin: [{\n        type: Input,\n        args: ['bc-margin']\n      }],\n      marginTop: [{\n        type: Input,\n        args: ['bc-margin-top']\n      }],\n      marginBottom: [{\n        type: Input,\n        args: ['bc-margin-bottom']\n      }],\n      marginLeft: [{\n        type: Input,\n        args: ['bc-margin-left']\n      }],\n      marginRight: [{\n        type: Input,\n        args: ['bc-margin-right']\n      }],\n      value: [{\n        type: Input,\n        args: ['bc-value']\n      }],\n      valid: [{\n        type: Input,\n        args: ['bc-valid']\n      }],\n      bcElement: [{\n        type: ViewChild,\n        args: ['bcElement',\n        /** @type {?} */\n        {\n          static: true\n        }]\n      }]\n    });\n  })();\n\n  return NgxBarcodeComponent;\n}();\n\nvar NgxBarcodeModule =\n/** @class */\nfunction () {\n  function NgxBarcodeModule() {}\n  /**\n   * @return {?}\n   */\n\n\n  NgxBarcodeModule.forRoot = function () {\n    return {\n      ngModule: NgxBarcodeModule,\n      providers: []\n    };\n  };\n  /**\n   * @nocollapse\n   */\n\n\n  NgxBarcodeModule.ctorParameters = function () {\n    return [];\n  };\n\n  NgxBarcodeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n    type: NgxBarcodeModule\n  });\n  NgxBarcodeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n    factory: function NgxBarcodeModule_Factory(t) {\n      return new (t || NgxBarcodeModule)();\n    },\n    imports: [[]]\n  });\n\n  (function () {\n    (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxBarcodeModule, {\n      declarations: [NgxBarcodeComponent],\n      exports: [NgxBarcodeComponent]\n    });\n  })();\n  /*@__PURE__*/\n\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(NgxBarcodeModule, [{\n      type: NgModule,\n      args: [{\n        imports: [],\n        declarations: [NgxBarcodeComponent],\n        exports: [NgxBarcodeComponent]\n      }]\n    }], function () {\n      return [];\n    }, null);\n  })();\n\n  return NgxBarcodeModule;\n}();\n\nexport { NgxBarcodeModule, NgxBarcodeComponent };","map":{"version":3,"sources":["index.js"],"names":[],"mappings":"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","sourcesContent":["import { Component, Renderer2, Input, ViewChild, NgModule } from '@angular/core';\n\nvar /** @type {?} */ jsbarcode = require('jsbarcode');\nvar NgxBarcodeComponent = /** @class */ (function () {\n    /**\n     * @param {?} renderer\n     */\n    function NgxBarcodeComponent(renderer) {\n        this.renderer = renderer;\n        this.elementType = 'svg';\n        this.cssClass = 'barcode'; // this should be done more elegantly\n        this.format = 'CODE128';\n        this.lineColor = '#000000';\n        this.width = 2;\n        this.height = 100;\n        this.displayValue = false;\n        this.fontOptions = '';\n        this.font = 'monospace';\n        this.textAlign = 'center';\n        this.textPosition = 'bottom';\n        this.textMargin = 2;\n        this.fontSize = 20;\n        this.background = '#ffffff';\n        this.margin = 10;\n        this.marginTop = 10;\n        this.marginBottom = 10;\n        this.marginLeft = 10;\n        this.marginRight = 10;\n        this.value = '';\n        this.valid = function () { return true; };\n    }\n    Object.defineProperty(NgxBarcodeComponent.prototype, \"options\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return {\n                format: this.format,\n                lineColor: this.lineColor,\n                width: this.width,\n                height: this.height,\n                displayValue: this.displayValue,\n                fontOptions: this.fontOptions,\n                font: this.font,\n                textAlign: this.textAlign,\n                textPosition: this.textPosition,\n                textMargin: this.textMargin,\n                fontSize: this.fontSize,\n                background: this.background,\n                margin: this.margin,\n                marginTop: this.marginTop,\n                marginBottom: this.marginBottom,\n                marginLeft: this.marginLeft,\n                marginRight: this.marginRight,\n                valid: this.valid,\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NgxBarcodeComponent.prototype.ngOnChanges = function () {\n        this.createBarcode();\n    };\n    /**\n     * @return {?}\n     */\n    NgxBarcodeComponent.prototype.createBarcode = function () {\n        if (!this.value) {\n            return;\n        }\n        var /** @type {?} */ element;\n        switch (this.elementType) {\n            case 'img':\n                element = this.renderer.createElement('img');\n                break;\n            case 'canvas':\n                element = this.renderer.createElement('canvas');\n                break;\n            case 'svg':\n            default:\n                element = this.renderer.createElement('svg', 'svg');\n        }\n        jsbarcode(element, this.value, this.options);\n        for (var _i = 0, _a = this.bcElement.nativeElement.childNodes; _i < _a.length; _i++) {\n            var node = _a[_i];\n            this.renderer.removeChild(this.bcElement.nativeElement, node);\n        }\n        this.renderer.appendChild(this.bcElement.nativeElement, element);\n    };\n    NgxBarcodeComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'ngx-barcode',\n                    template: \"<div #bcElement [class]=\\\"cssClass\\\"></div>\",\n                    styles: []\n                },] },\n    ];\n    /**\n     * @nocollapse\n     */\n    NgxBarcodeComponent.ctorParameters = function () { return [\n        { type: Renderer2, },\n    ]; };\n    NgxBarcodeComponent.propDecorators = {\n        'elementType': [{ type: Input, args: ['bc-element-type',] },],\n        'cssClass': [{ type: Input, args: ['bc-class',] },],\n        'format': [{ type: Input, args: ['bc-format',] },],\n        'lineColor': [{ type: Input, args: ['bc-line-color',] },],\n        'width': [{ type: Input, args: ['bc-width',] },],\n        'height': [{ type: Input, args: ['bc-height',] },],\n        'displayValue': [{ type: Input, args: ['bc-display-value',] },],\n        'fontOptions': [{ type: Input, args: ['bc-font-options',] },],\n        'font': [{ type: Input, args: ['bc-font',] },],\n        'textAlign': [{ type: Input, args: ['bc-text-align',] },],\n        'textPosition': [{ type: Input, args: ['bc-text-position',] },],\n        'textMargin': [{ type: Input, args: ['bc-text-margin',] },],\n        'fontSize': [{ type: Input, args: ['bc-font-size',] },],\n        'background': [{ type: Input, args: ['bc-background',] },],\n        'margin': [{ type: Input, args: ['bc-margin',] },],\n        'marginTop': [{ type: Input, args: ['bc-margin-top',] },],\n        'marginBottom': [{ type: Input, args: ['bc-margin-bottom',] },],\n        'marginLeft': [{ type: Input, args: ['bc-margin-left',] },],\n        'marginRight': [{ type: Input, args: ['bc-margin-right',] },],\n        'value': [{ type: Input, args: ['bc-value',] },],\n        'bcElement': [{ type: ViewChild, args: ['bcElement', /** @type {?} */ ({ static: true }),] },],\n        'valid': [{ type: Input, args: ['bc-valid',] },],\n    };\n    return NgxBarcodeComponent;\n}());\n\nvar NgxBarcodeModule = /** @class */ (function () {\n    function NgxBarcodeModule() {\n    }\n    /**\n     * @return {?}\n     */\n    NgxBarcodeModule.forRoot = function () {\n        return {\n            ngModule: NgxBarcodeModule,\n            providers: []\n        };\n    };\n    NgxBarcodeModule.decorators = [\n        { type: NgModule, args: [{\n                    imports: [],\n                    declarations: [\n                        NgxBarcodeComponent,\n                    ],\n                    exports: [\n                        NgxBarcodeComponent,\n                    ]\n                },] },\n    ];\n    /**\n     * @nocollapse\n     */\n    NgxBarcodeModule.ctorParameters = function () { return []; };\n    return NgxBarcodeModule;\n}());\n\nexport { NgxBarcodeModule, NgxBarcodeComponent };\n"]},"metadata":{},"sourceType":"module"}