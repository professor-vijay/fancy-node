{"ast":null,"code":"import _slicedToArray from \"D:/queen-supermarket/Biz1Market_EXE/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"D:/queen-supermarket/Biz1Market_EXE/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/queen-supermarket/Biz1Market_EXE/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { CommonModule } from '@angular/common';\nimport { Subject, BehaviorSubject, timer, of, combineLatest, Subscription } from 'rxjs';\nimport { tap, map, skip, delay, filter, debounce, switchMap, distinctUntilChanged } from 'rxjs/operators';\nimport { InjectionToken, Injectable, Inject, Optional, NgModule, Component, Input, Output, ChangeDetectionStrategy, EventEmitter, ViewEncapsulation, defineInjectable, inject } from '@angular/core';\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nfunction NgProgressComponent_ng_container_0_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"div\", 6);\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵstyleProp(\"box-shadow\", \"0 0 10px \" + ctx_r2.color + \", 0 0 5px \" + ctx_r2.color);\n  }\n}\n\nfunction NgProgressComponent_ng_container_0_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 7);\n    ɵngcc0.ɵɵelement(1, \"div\", 8);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r3 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵstyleProp(\"border-top-color\", ctx_r3.color)(\"border-left-color\", ctx_r3.color);\n  }\n}\n\nfunction NgProgressComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n    ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n    ɵngcc0.ɵɵelementStart(3, \"div\", 3);\n    ɵngcc0.ɵɵtemplate(4, NgProgressComponent_ng_container_0_div_4_Template, 1, 2, \"div\", 4);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtemplate(5, NgProgressComponent_ng_container_0_div_5_Template, 2, 4, \"div\", 5);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var state_r1 = ctx.$implicit;\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵstyleProp(\"transition\", \"opacity \" + ctx_r0.speed + \"ms \" + ctx_r0.ease);\n    ɵngcc0.ɵɵclassProp(\"-active\", state_r1.active);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵstyleProp(\"transform\", state_r1.transform)(\"background-color\", ctx_r0.color)(\"transition\", state_r1.active ? \"all \" + ctx_r0.speed + \"ms \" + ctx_r0.ease : \"none\");\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.meteor);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.spinner);\n  }\n}\n\nvar NgProgressRef = /*#__PURE__*/function () {\n  /**\r\n   * @param {?} customConfig\r\n   * @param {?} _onDestroyCallback\r\n   */\n  function NgProgressRef(customConfig, _onDestroyCallback) {\n    var _this = this;\n\n    _classCallCheck(this, NgProgressRef);\n\n    this._onDestroyCallback = _onDestroyCallback;\n    /**\r\n     * Stream that increments and updates progress state\r\n     */\n\n    this._trickling = new Subject();\n    /**\r\n     * Stream that combines \"_trickling\" and \"config\" streams\r\n     */\n\n    this._worker = Subscription.EMPTY;\n    this._state = new BehaviorSubject({\n      active: false,\n      value: 0\n    });\n    this._config = new BehaviorSubject(customConfig);\n    this.state = this._state.asObservable();\n    this.config = this._state.asObservable();\n    this._worker = combineLatest(this._trickling, this._config).pipe(debounce(\n    /**\r\n    * @param {?} __0\r\n    * @return {?}\r\n    */\n    function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          start = _ref2[0],\n          config = _ref2[1];\n\n      return timer(start ? config.debounceTime : 0);\n    }), switchMap(\n    /**\r\n    * @param {?} __0\r\n    * @return {?}\r\n    */\n    function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 2),\n          start = _ref4[0],\n          config = _ref4[1];\n\n      return start ? _this.onTrickling(config) : _this.onComplete(config);\n    })).subscribe();\n  }\n  /**\r\n   * Get current progress state\r\n   * @private\r\n   * @return {?}\r\n   */\n\n\n  _createClass(NgProgressRef, [{\n    key: \"currState\",\n    get: function get() {\n      return this._state.value;\n    }\n    /**\r\n     * Check if progress has started\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"isStarted\",\n    get: function get() {\n      return this.currState.active;\n    }\n    /**\r\n     * Progress start event\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"started\",\n    get: function get() {\n      return this._state.pipe(map(\n      /**\r\n      * @param {?} state\r\n      * @return {?}\r\n      */\n      function (state) {\n        return state.active;\n      }), distinctUntilChanged(), filter(\n      /**\r\n      * @param {?} active\r\n      * @return {?}\r\n      */\n      function (active) {\n        return active;\n      }));\n    }\n    /**\r\n     * Progress ended event\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"completed\",\n    get: function get() {\n      return this._state.pipe(map(\n      /**\r\n      * @param {?} state\r\n      * @return {?}\r\n      */\n      function (state) {\n        return state.active;\n      }), distinctUntilChanged(), filter(\n      /**\r\n      * @param {?} active\r\n      * @return {?}\r\n      */\n      function (active) {\n        return !active;\n      }), skip(1));\n    }\n    /**\r\n     * Start the progress\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"start\",\n    value: function start() {\n      this._trickling.next(true);\n    }\n    /**\r\n     * Complete the progress\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"complete\",\n    value: function complete() {\n      this._trickling.next(false);\n    }\n    /**\r\n     * Increment the progress\r\n     * @param {?=} amount\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"inc\",\n    value: function inc(amount) {\n      /** @type {?} */\n      var n = this.currState.value;\n\n      if (!this.isStarted) {\n        this.start();\n      } else {\n        if (typeof amount !== 'number') {\n          amount = this._config.value.trickleFunc(n);\n        }\n\n        this.set(n + amount);\n      }\n    }\n    /**\r\n     * Set the progress\r\n     * @param {?} n\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(n) {\n      this.setState({\n        value: this.clamp(n),\n        active: true\n      });\n    }\n    /**\r\n     * Set config\r\n     * @param {?} config\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"setConfig\",\n    value: function setConfig(config) {\n      this._config.next(Object.assign({}, this._config.value, config));\n    }\n    /**\r\n     * Destroy progress reference\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this._worker.unsubscribe();\n\n      this._trickling.complete();\n\n      this._state.complete();\n\n      this._config.complete();\n\n      this._onDestroyCallback();\n    }\n    /**\r\n     * Set progress state\r\n     * @private\r\n     * @param {?} state\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"setState\",\n    value: function setState(state) {\n      this._state.next(Object.assign({}, this.currState, state));\n    }\n    /**\r\n     * Clamps a value to be between min and max\r\n     * @private\r\n     * @param {?} n\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"clamp\",\n    value: function clamp(n) {\n      return Math.max(this._config.value.min, Math.min(this._config.value.max, n));\n    }\n    /**\r\n     * Keeps incrementing the progress\r\n     * @private\r\n     * @param {?} config\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"onTrickling\",\n    value: function onTrickling(config) {\n      var _this2 = this;\n\n      if (!this.isStarted) {\n        this.set(this._config.value.min);\n      }\n\n      return timer(0, config.trickleSpeed).pipe(tap(\n      /**\r\n      * @return {?}\r\n      */\n      function () {\n        return _this2.inc();\n      }));\n    }\n    /**\r\n     * Completes then resets the progress\r\n     * @private\r\n     * @param {?} config\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"onComplete\",\n    value: function onComplete(config) {\n      var _this3 = this;\n\n      return !this.isStarted ? of({}) : of({}).pipe( // Completes the progress\n      tap(\n      /**\r\n      * @return {?}\r\n      */\n      function () {\n        return _this3.setState({\n          value: 100\n        });\n      }), // Hides the progress bar after a tiny delay\n      delay(config.speed * 1.7), tap(\n      /**\r\n      * @return {?}\r\n      */\n      function () {\n        return _this3.setState({\n          active: false\n        });\n      }), // Resets the progress state\n      delay(config.speed), tap(\n      /**\r\n      * @return {?}\r\n      */\n      function () {\n        return _this3.setState({\n          value: 0\n        });\n      }));\n    }\n  }]);\n\n  return NgProgressRef;\n}();\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/** @type {?} */\n\n\nvar NG_PROGRESS_CONFIG = new InjectionToken('ngProgressConfig');\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\nvar ɵ0 =\n/**\r\n* @param {?} n\r\n* @return {?}\r\n*/\nfunction ɵ0(n) {\n  if (n >= 0 && n < 20) return 10;\n  if (n >= 20 && n < 50) return 4;\n  if (n >= 50 && n < 80) return 2;\n  if (n >= 80 && n < 99) return 0.5;\n  return 0;\n};\n/** @type {?} */\n\n\nvar defaultConfig = {\n  min: 8,\n  max: 100,\n  speed: 200,\n  debounceTime: 0,\n  trickleSpeed: 300,\n  fixed: true,\n  meteor: true,\n  thick: false,\n  spinner: true,\n  ease: 'linear',\n  color: '#1B95E0',\n  direction: 'ltr+',\n  spinnerPosition: 'right',\n  trickleFunc: ɵ0\n};\n\nvar NgProgress = /*#__PURE__*/function () {\n  /**\r\n   * @param {?} config\r\n   */\n  function NgProgress(config) {\n    _classCallCheck(this, NgProgress);\n\n    /**\r\n     * Store progress bar instances\r\n     */\n    this._instances = new Map();\n    this.config = config ? Object.assign({}, defaultConfig, config) : defaultConfig;\n  }\n  /**\r\n   * Get or Create progress bar by ID\r\n   * @param {?=} id\r\n   * @param {?=} config\r\n   * @return {?}\r\n   */\n\n\n  _createClass(NgProgress, [{\n    key: \"ref\",\n    value: function ref() {\n      var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'root';\n      var config = arguments.length > 1 ? arguments[1] : undefined;\n\n      if (this._instances.has(id)) {\n        // Get ProgressRef instance\n\n        /** @type {?} */\n        var progressRef = this._instances.get(id);\n\n        if (config) {\n          progressRef.setConfig(Object.assign({}, this.config, config));\n        }\n\n        return progressRef;\n      } else {\n        // Create new ProgressRef instance\n\n        /** @type {?} */\n        var _progressRef = new NgProgressRef(Object.assign({}, this.config, config), this.deleteInstance(id));\n\n        return this._instances.set(id, _progressRef).get(id);\n      }\n    }\n    /**\r\n     * Destroy all progress bar instances\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"destroyAll\",\n    value: function destroyAll() {\n      this._instances.forEach(\n      /**\r\n      * @param {?} ref\r\n      * @return {?}\r\n      */\n      function (ref) {\n        return ref.destroy();\n      });\n    }\n    /**\r\n     * A destroyer function for each progress bar instance\r\n     * @private\r\n     * @param {?} id\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"deleteInstance\",\n    value: function deleteInstance(id) {\n      var _this4 = this;\n\n      return (\n        /**\r\n        * @return {?}\r\n        */\n        function () {\n          _this4._instances.delete(id);\n        }\n      );\n    }\n  }]);\n\n  return NgProgress;\n}();\n\nNgProgress.ɵfac = function NgProgress_Factory(t) {\n  return new (t || NgProgress)(ɵngcc0.ɵɵinject(NG_PROGRESS_CONFIG, 8));\n};\n\nNgProgress.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: NgProgress,\n  factory: NgProgress.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nNgProgress.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [NG_PROGRESS_CONFIG]\n    }]\n  }];\n};\n/** @nocollapse */\n\n\nNgProgress.ngInjectableDef = defineInjectable({\n  factory: function NgProgress_Factory() {\n    return new NgProgress(inject(NG_PROGRESS_CONFIG, 8));\n  },\n  token: NgProgress,\n  providedIn: \"root\"\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NgProgress, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [NG_PROGRESS_CONFIG]\n      }]\n    }];\n  }, null);\n})();\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n\nvar NgProgressComponent = /*#__PURE__*/function () {\n  /**\r\n   * @param {?} _ngProgress\r\n   */\n  function NgProgressComponent(_ngProgress) {\n    _classCallCheck(this, NgProgressComponent);\n\n    this._ngProgress = _ngProgress;\n    this._started = Subscription.EMPTY;\n    this._completed = Subscription.EMPTY;\n    /**\r\n     * Creates a new instance if id is not already exists\r\n     */\n\n    this.id = 'root';\n    /**\r\n     * Initializes inputs from the global config\r\n     */\n\n    this.min = this._ngProgress.config.min;\n    this.max = this._ngProgress.config.max;\n    this.ease = this._ngProgress.config.ease;\n    this.color = this._ngProgress.config.color;\n    this.speed = this._ngProgress.config.speed;\n    this.thick = this._ngProgress.config.thick;\n    this.fixed = this._ngProgress.config.fixed;\n    this.meteor = this._ngProgress.config.meteor;\n    this.spinner = this._ngProgress.config.spinner;\n    this.trickleSpeed = this._ngProgress.config.trickleSpeed;\n    this.debounceTime = this._ngProgress.config.debounceTime;\n    this.trickleFunc = this._ngProgress.config.trickleFunc;\n    this.spinnerPosition = this._ngProgress.config.spinnerPosition;\n    this.direction = this._ngProgress.config.direction;\n    this.started = new EventEmitter();\n    this.completed = new EventEmitter();\n  }\n  /**\r\n   * @return {?}\r\n   */\n\n\n  _createClass(NgProgressComponent, [{\n    key: \"isStarted\",\n    get: function get() {\n      return this.progressRef.isStarted;\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges() {\n      if (this.progressRef instanceof NgProgressRef) {\n        // Update progress bar config when inputs change\n        this.progressRef.setConfig({\n          max: this.max > 0 && this.max <= 100 ? this.max : 100,\n          min: this.min < 100 && this.min >= 0 ? this.min : 0,\n          speed: this.speed,\n          trickleSpeed: this.trickleSpeed,\n          trickleFunc: this.trickleFunc,\n          debounceTime: this.debounceTime\n        });\n      }\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this5 = this;\n\n      // Get progress bar service instance\n      this.progressRef = this._ngProgress.ref(this.id, {\n        max: this.max,\n        min: this.min,\n        speed: this.speed,\n        trickleSpeed: this.trickleSpeed,\n        debounceTime: this.debounceTime\n      }); // Subscribe to progress state\n\n      this.state$ = this.progressRef.state.pipe(map(\n      /**\r\n      * @param {?} state\r\n      * @return {?}\r\n      */\n      function (state) {\n        return {\n          active: state.active,\n          transform: \"translate3d(\".concat(state.value, \"%,0,0)\")\n        };\n      })); // Subscribes to started and completed events on deman\n\n      if (this.started.observers.length) {\n        this._started = this.progressRef.started.subscribe(\n        /**\r\n        * @return {?}\r\n        */\n        function () {\n          return _this5.started.emit();\n        });\n      }\n\n      if (this.completed.observers.length) {\n        this._completed = this.progressRef.completed.subscribe(\n        /**\r\n        * @return {?}\r\n        */\n        function () {\n          return _this5.completed.emit();\n        });\n      }\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._started.unsubscribe();\n\n      this._completed.unsubscribe();\n\n      if (this.progressRef instanceof NgProgressRef) {\n        this.progressRef.destroy();\n      }\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"start\",\n    value: function start() {\n      this.progressRef.start();\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"complete\",\n    value: function complete() {\n      this.progressRef.complete();\n    }\n    /**\r\n     * @param {?=} n\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"inc\",\n    value: function inc(n) {\n      this.progressRef.inc(n);\n    }\n    /**\r\n     * @param {?} n\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(n) {\n      this.progressRef.set(n);\n    }\n  }]);\n\n  return NgProgressComponent;\n}();\n\nNgProgressComponent.ɵfac = function NgProgressComponent_Factory(t) {\n  return new (t || NgProgressComponent)(ɵngcc0.ɵɵdirectiveInject(NgProgress));\n};\n\nNgProgressComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: NgProgressComponent,\n  selectors: [[\"ng-progress\"]],\n  hostAttrs: [\"role\", \"progressbar\"],\n  hostVars: 4,\n  hostBindings: function NgProgressComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"spinnerPosition\", ctx.spinnerPosition)(\"dir\", ctx.direction)(\"thick\", ctx.thick)(\"fixed\", ctx.fixed);\n    }\n  },\n  inputs: {\n    id: \"id\",\n    min: \"min\",\n    max: \"max\",\n    ease: \"ease\",\n    color: \"color\",\n    speed: \"speed\",\n    thick: \"thick\",\n    fixed: \"fixed\",\n    meteor: \"meteor\",\n    spinner: \"spinner\",\n    trickleSpeed: \"trickleSpeed\",\n    debounceTime: \"debounceTime\",\n    trickleFunc: \"trickleFunc\",\n    spinnerPosition: \"spinnerPosition\",\n    direction: \"direction\"\n  },\n  outputs: {\n    started: \"started\",\n    completed: \"completed\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  decls: 2,\n  vars: 3,\n  consts: [[4, \"ngIf\"], [1, \"ng-progress-bar\"], [1, \"ng-bar-placeholder\"], [1, \"ng-bar\"], [\"class\", \"ng-meteor\", 3, \"boxShadow\", 4, \"ngIf\"], [\"class\", \"ng-spinner\", 4, \"ngIf\"], [1, \"ng-meteor\"], [1, \"ng-spinner\"], [1, \"ng-spinner-icon\"]],\n  template: function NgProgressComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtemplate(0, NgProgressComponent_ng_container_0_Template, 6, 12, \"ng-container\", 0);\n      ɵngcc0.ɵɵpipe(1, \"async\");\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"ngIf\", ɵngcc0.ɵɵpipeBind1(1, 1, ctx.state$));\n    }\n  },\n  directives: [ɵngcc1.NgIf],\n  pipes: [ɵngcc1.AsyncPipe],\n  styles: [\"ng-progress{z-index:999999;pointer-events:none}ng-progress[fixed=true] .ng-progress-bar,ng-progress[fixed=true] .ng-spinner{position:fixed}ng-progress[fixed=true] .ng-spinner{top:15px}ng-progress[fixed=true][spinnerPosition=left] .ng-spinner{left:15px}ng-progress[fixed=true][spinnerPosition=right] .ng-spinner{right:15px}ng-progress[thick=true] .ng-spinner-icon{width:24px;height:24px;border-width:3px}ng-progress[thick=true] .ng-bar-placeholder{height:3px!important}ng-progress[dir='ltr+'] .ng-meteor,ng-progress[dir=ltr-] .ng-meteor{-webkit-transform:rotate(3deg);transform:rotate(3deg)}ng-progress[dir='ltr+'][thick=true] .ng-meteor,ng-progress[dir=ltr-][thick=true] .ng-meteor{-webkit-transform:rotate(4deg);transform:rotate(4deg)}ng-progress[dir='ltr+'] .ng-bar,ng-progress[dir='rtl+'] .ng-bar{margin-left:-100%}ng-progress[dir='ltr+'] .ng-meteor,ng-progress[dir='rtl+'] .ng-meteor{right:0}ng-progress[dir='ltr+'] .ng-meteor,ng-progress[dir=rtl-] .ng-meteor{top:-3px}ng-progress[dir='ltr+'][thick=true] .ng-meteor,ng-progress[dir=rtl-][thick=true] .ng-meteor{top:-4px}ng-progress[dir='rtl+'] .ng-meteor,ng-progress[dir=ltr-] .ng-meteor{bottom:-3px}ng-progress[dir='rtl+'][thick=true] .ng-meteor,ng-progress[dir=ltr-][thick=true] .ng-meteor{bottom:-4px}ng-progress[dir='rtl+'] .ng-bar-placeholder,ng-progress[dir=ltr-] .ng-bar-placeholder{-webkit-transform:rotate(180deg);transform:rotate(180deg)}ng-progress[dir='rtl+'] .ng-spinner-icon,ng-progress[dir=ltr-] .ng-spinner-icon{animation-direction:reverse}ng-progress[dir='rtl+'] .ng-meteor,ng-progress[dir=rtl-] .ng-meteor{-webkit-transform:rotate(-3deg);transform:rotate(-3deg)}ng-progress[dir='rtl+'][thick=true] .ng-meteor,ng-progress[dir=rtl-][thick=true] .ng-meteor{-webkit-transform:rotate(-4deg);transform:rotate(-4deg)}ng-progress[spinnerPosition=left] .ng-spinner{left:10px}ng-progress[spinnerPosition=right] .ng-spinner{right:10px}.ng-progress-bar{position:relative;z-index:999999;top:0;left:0;width:100%;zoom:1;opacity:0}.ng-progress-bar.-active{opacity:1;transition:none}.ng-bar-placeholder{position:absolute;height:2px;width:100%}.ng-bar{width:100%;height:100%;-webkit-transform:translate(-100%,0,0);transform:translate(-100%,0,0)}.ng-meteor{display:block;position:absolute;width:100px;height:100%;opacity:1}.ng-spinner{position:absolute;display:block;z-index:1031;top:10px}.ng-spinner-icon{width:18px;height:18px;box-sizing:border-box;-webkit-animation:250ms linear infinite spinner-animation;animation:250ms linear infinite spinner-animation;border:2px solid transparent;border-radius:50%}@-webkit-keyframes spinner-animation{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes spinner-animation{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nNgProgressComponent.ctorParameters = function () {\n  return [{\n    type: NgProgress\n  }];\n};\n\nNgProgressComponent.propDecorators = {\n  id: [{\n    type: Input\n  }],\n  min: [{\n    type: Input\n  }],\n  max: [{\n    type: Input\n  }],\n  ease: [{\n    type: Input\n  }],\n  color: [{\n    type: Input\n  }],\n  speed: [{\n    type: Input\n  }],\n  thick: [{\n    type: Input\n  }],\n  fixed: [{\n    type: Input\n  }],\n  meteor: [{\n    type: Input\n  }],\n  spinner: [{\n    type: Input\n  }],\n  trickleSpeed: [{\n    type: Input\n  }],\n  debounceTime: [{\n    type: Input\n  }],\n  trickleFunc: [{\n    type: Input\n  }],\n  spinnerPosition: [{\n    type: Input\n  }],\n  direction: [{\n    type: Input\n  }],\n  started: [{\n    type: Output\n  }],\n  completed: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NgProgressComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ng-progress',\n      host: {\n        'role': 'progressbar',\n        '[attr.spinnerPosition]': 'spinnerPosition',\n        '[attr.dir]': 'direction',\n        '[attr.thick]': 'thick',\n        '[attr.fixed]': 'fixed'\n      },\n      template: \"\\n    <ng-container *ngIf=\\\"state$ | async; let state\\\">\\n      <div class=\\\"ng-progress-bar\\\"\\n            [class.-active]=\\\"state.active\\\"\\n            [style.transition]=\\\"'opacity ' + speed + 'ms ' + ease\\\">\\n        <div class=\\\"ng-bar-placeholder\\\">\\n          <div class=\\\"ng-bar\\\"\\n                [style.transform]=\\\"state.transform\\\"\\n                [style.backgroundColor]=\\\"color\\\"\\n                [style.transition]=\\\"state.active ? 'all ' + speed + 'ms ' + ease : 'none'\\\">\\n            <div *ngIf=\\\"meteor\\\" class=\\\"ng-meteor\\\" [style.boxShadow]=\\\"'0 0 10px '+ color + ', 0 0 5px ' + color\\\"></div>\\n          </div>\\n        </div>\\n        <div *ngIf=\\\"spinner\\\" class=\\\"ng-spinner\\\">\\n          <div class=\\\"ng-spinner-icon\\\"\\n                [style.borderTopColor]=\\\"color\\\"\\n                [style.borderLeftColor]=\\\"color\\\"></div>\\n        </div>\\n      </div>\\n    </ng-container>\\n  \",\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      preserveWhitespaces: false,\n      styles: [\"ng-progress{z-index:999999;pointer-events:none}ng-progress[fixed=true] .ng-progress-bar,ng-progress[fixed=true] .ng-spinner{position:fixed}ng-progress[fixed=true] .ng-spinner{top:15px}ng-progress[fixed=true][spinnerPosition=left] .ng-spinner{left:15px}ng-progress[fixed=true][spinnerPosition=right] .ng-spinner{right:15px}ng-progress[thick=true] .ng-spinner-icon{width:24px;height:24px;border-width:3px}ng-progress[thick=true] .ng-bar-placeholder{height:3px!important}ng-progress[dir='ltr+'] .ng-meteor,ng-progress[dir=ltr-] .ng-meteor{-webkit-transform:rotate(3deg);transform:rotate(3deg)}ng-progress[dir='ltr+'][thick=true] .ng-meteor,ng-progress[dir=ltr-][thick=true] .ng-meteor{-webkit-transform:rotate(4deg);transform:rotate(4deg)}ng-progress[dir='ltr+'] .ng-bar,ng-progress[dir='rtl+'] .ng-bar{margin-left:-100%}ng-progress[dir='ltr+'] .ng-meteor,ng-progress[dir='rtl+'] .ng-meteor{right:0}ng-progress[dir='ltr+'] .ng-meteor,ng-progress[dir=rtl-] .ng-meteor{top:-3px}ng-progress[dir='ltr+'][thick=true] .ng-meteor,ng-progress[dir=rtl-][thick=true] .ng-meteor{top:-4px}ng-progress[dir='rtl+'] .ng-meteor,ng-progress[dir=ltr-] .ng-meteor{bottom:-3px}ng-progress[dir='rtl+'][thick=true] .ng-meteor,ng-progress[dir=ltr-][thick=true] .ng-meteor{bottom:-4px}ng-progress[dir='rtl+'] .ng-bar-placeholder,ng-progress[dir=ltr-] .ng-bar-placeholder{-webkit-transform:rotate(180deg);transform:rotate(180deg)}ng-progress[dir='rtl+'] .ng-spinner-icon,ng-progress[dir=ltr-] .ng-spinner-icon{animation-direction:reverse}ng-progress[dir='rtl+'] .ng-meteor,ng-progress[dir=rtl-] .ng-meteor{-webkit-transform:rotate(-3deg);transform:rotate(-3deg)}ng-progress[dir='rtl+'][thick=true] .ng-meteor,ng-progress[dir=rtl-][thick=true] .ng-meteor{-webkit-transform:rotate(-4deg);transform:rotate(-4deg)}ng-progress[spinnerPosition=left] .ng-spinner{left:10px}ng-progress[spinnerPosition=right] .ng-spinner{right:10px}.ng-progress-bar{position:relative;z-index:999999;top:0;left:0;width:100%;zoom:1;opacity:0}.ng-progress-bar.-active{opacity:1;transition:none}.ng-bar-placeholder{position:absolute;height:2px;width:100%}.ng-bar{width:100%;height:100%;-webkit-transform:translate(-100%,0,0);transform:translate(-100%,0,0)}.ng-meteor{display:block;position:absolute;width:100px;height:100%;opacity:1}.ng-spinner{position:absolute;display:block;z-index:1031;top:10px}.ng-spinner-icon{width:18px;height:18px;box-sizing:border-box;-webkit-animation:250ms linear infinite spinner-animation;animation:250ms linear infinite spinner-animation;border:2px solid transparent;border-radius:50%}@-webkit-keyframes spinner-animation{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes spinner-animation{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}\"]\n    }]\n  }], function () {\n    return [{\n      type: NgProgress\n    }];\n  }, {\n    id: [{\n      type: Input\n    }],\n    min: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    ease: [{\n      type: Input\n    }],\n    color: [{\n      type: Input\n    }],\n    speed: [{\n      type: Input\n    }],\n    thick: [{\n      type: Input\n    }],\n    fixed: [{\n      type: Input\n    }],\n    meteor: [{\n      type: Input\n    }],\n    spinner: [{\n      type: Input\n    }],\n    trickleSpeed: [{\n      type: Input\n    }],\n    debounceTime: [{\n      type: Input\n    }],\n    trickleFunc: [{\n      type: Input\n    }],\n    spinnerPosition: [{\n      type: Input\n    }],\n    direction: [{\n      type: Input\n    }],\n    started: [{\n      type: Output\n    }],\n    completed: [{\n      type: Output\n    }]\n  });\n})();\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n\nvar NgProgressModule = /*#__PURE__*/function () {\n  function NgProgressModule() {\n    _classCallCheck(this, NgProgressModule);\n  }\n\n  _createClass(NgProgressModule, null, [{\n    key: \"withConfig\",\n    value:\n    /**\r\n     * @param {?} config\r\n     * @return {?}\r\n     */\n    function withConfig(config) {\n      return {\n        ngModule: NgProgressModule,\n        providers: [{\n          provide: NG_PROGRESS_CONFIG,\n          useValue: config\n        }]\n      };\n    }\n  }]);\n\n  return NgProgressModule;\n}();\n\nNgProgressModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: NgProgressModule\n});\nNgProgressModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function NgProgressModule_Factory(t) {\n    return new (t || NgProgressModule)();\n  },\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgProgressModule, {\n    declarations: function declarations() {\n      return [NgProgressComponent];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [NgProgressComponent];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NgProgressModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [NgProgressComponent],\n      exports: [NgProgressComponent],\n      imports: [CommonModule]\n    }]\n  }], null, null);\n})();\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n\nexport { NgProgressModule, NgProgressComponent, NgProgressRef, NgProgress, NG_PROGRESS_CONFIG };","map":{"version":3,"sources":["@ngx-progressbar/core/lib/ng-progress-ref.ts","@ngx-progressbar/core/lib/ng-progress.interface.ts","@ngx-progressbar/core/lib/ng-progress.service.ts","@ngx-progressbar/core/lib/ng-progress.component.ts","@ngx-progressbar/core/lib/ng-progress.module.ts"],"names":[],"mappings":"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","sourcesContent":["import { NgProgressState, NgProgressConfig } from './ng-progress.interface';\r\nimport { Observable, Subject, BehaviorSubject, timer, of, combineLatest, Subscription } from 'rxjs';\r\nimport { tap, map, skip, delay, filter, debounce, switchMap, distinctUntilChanged } from 'rxjs/operators';\r\n\r\nexport class NgProgressRef {\r\n\r\n  /** Stream that emits when progress state is changed */\r\n  private readonly _state: BehaviorSubject<NgProgressState>;\r\n  state: Observable<NgProgressState>;\r\n\r\n  /** Stream that emits when config is changed */\r\n  private readonly _config: BehaviorSubject<NgProgressConfig>;\r\n  config: Observable<NgProgressState>;\r\n\r\n  /** Stream that increments and updates progress state */\r\n  private readonly _trickling = new Subject();\r\n\r\n  /** Stream that combines \"_trickling\" and \"config\" streams */\r\n  private readonly _worker = Subscription.EMPTY;\r\n\r\n  /** Get current progress state */\r\n  private get currState(): NgProgressState {\r\n    return this._state.value;\r\n  }\r\n\r\n  /** Check if progress has started */\r\n  get isStarted(): boolean {\r\n    return this.currState.active;\r\n  }\r\n\r\n  /** Progress start event */\r\n  get started(): Observable<boolean> {\r\n    return this._state.pipe(\r\n      map((state: NgProgressState) => state.active),\r\n      distinctUntilChanged(),\r\n      filter(active => active)\r\n    );\r\n  }\r\n\r\n  /** Progress ended event */\r\n  get completed(): Observable<boolean> {\r\n    return this._state.pipe(\r\n      map((state: NgProgressState) => state.active),\r\n      distinctUntilChanged(),\r\n      filter(active => !active),\r\n      skip(1)\r\n    );\r\n  }\r\n\r\n  constructor(customConfig: NgProgressConfig, private _onDestroyCallback: Function) {\r\n    this._state = new BehaviorSubject<NgProgressState>({active: false, value: 0});\r\n    this._config = new BehaviorSubject<NgProgressConfig>(customConfig);\r\n    this.state = this._state.asObservable();\r\n    this.config = this._state.asObservable();\r\n\r\n    this._worker = combineLatest(this._trickling, this._config).pipe(\r\n      debounce(([start, config]: [boolean, NgProgressConfig]) => timer(start ? config.debounceTime : 0)),\r\n      switchMap(([start, config]: [boolean, NgProgressConfig]) => start ? this.onTrickling(config) : this.onComplete(config))\r\n    ).subscribe();\r\n  }\r\n\r\n  /**\r\n   * Start the progress\r\n   */\r\n  start() {\r\n    this._trickling.next(true);\r\n  }\r\n\r\n  /**\r\n   * Complete the progress\r\n   */\r\n  complete() {\r\n    this._trickling.next(false);\r\n  }\r\n\r\n  /**\r\n   * Increment the progress\r\n   * @param amount\r\n   */\r\n  inc(amount?: number) {\r\n    const n = this.currState.value;\r\n    if (!this.isStarted) {\r\n      this.start();\r\n    } else {\r\n      if (typeof amount !== 'number') {\r\n        amount = this._config.value.trickleFunc(n);\r\n      }\r\n      this.set(n + amount);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the progress\r\n   * @param n\r\n   */\r\n  set(n: number) {\r\n    this.setState({value: this.clamp(n), active: true});\r\n  }\r\n\r\n  /**\r\n   * Set config\r\n   * @param config\r\n   */\r\n  setConfig(config: NgProgressConfig) {\r\n    this._config.next({...this._config.value, ...config});\r\n  }\r\n\r\n  /**\r\n   * Destroy progress reference\r\n   */\r\n  destroy() {\r\n    this._worker.unsubscribe();\r\n    this._trickling.complete();\r\n    this._state.complete();\r\n    this._config.complete();\r\n    this._onDestroyCallback();\r\n  }\r\n\r\n  /**\r\n   * Set progress state\r\n   * @param state\r\n   */\r\n  private setState(state: NgProgressState) {\r\n    this._state.next({...this.currState, ...state});\r\n  }\r\n\r\n  /**\r\n   * Clamps a value to be between min and max\r\n   * @param n\r\n   */\r\n  private clamp(n: number): number {\r\n    return Math.max(this._config.value.min, Math.min(this._config.value.max, n));\r\n  }\r\n\r\n  /**\r\n   * Keeps incrementing the progress\r\n   * @param config\r\n   */\r\n  private onTrickling(config: NgProgressConfig): Observable<number> {\r\n    if (!this.isStarted) {\r\n      this.set(this._config.value.min);\r\n    }\r\n    return timer(0, config.trickleSpeed).pipe(tap(() => this.inc()));\r\n  }\r\n\r\n  /**\r\n   * Completes then resets the progress\r\n   * @param config\r\n   */\r\n  private onComplete(config: NgProgressConfig): Observable<any> {\r\n    return !this.isStarted ? of({}) : of({}).pipe(\r\n      // Completes the progress\r\n      tap(() => this.setState({value: 100})),\r\n\r\n      // Hides the progress bar after a tiny delay\r\n      delay(config.speed * 1.7),\r\n      tap(() => this.setState({active: false})),\r\n\r\n      // Resets the progress state\r\n      delay(config.speed),\r\n      tap(() => this.setState({value: 0}))\r\n    );\r\n  }\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\n\r\nexport interface NgProgressState {\r\n  active?: boolean;\r\n  value?: number;\r\n}\r\n\r\nexport interface NgProgressConfig {\r\n  spinnerPosition?: 'left' | 'right';\r\n  direction?: 'ltr+' | 'ltr-' | 'rtl+' | 'rtl-';\r\n  ease?: string;\r\n  color?: string;\r\n  thick?: boolean;\r\n  fixed?: boolean;\r\n  meteor?: boolean;\r\n  spinner?: boolean;\r\n  max?: number;\r\n  min?: number;\r\n  speed?: number;\r\n  trickleSpeed?: number;\r\n  trickleFunc?: (n: number) => number;\r\n  debounceTime?: number;\r\n}\r\n\r\nexport const NG_PROGRESS_CONFIG = new InjectionToken<NgProgressConfig>('ngProgressConfig');\r\n","import { Injectable, Inject, Optional } from '@angular/core';\r\nimport { NgProgressRef } from './ng-progress-ref';\r\nimport { NgProgressConfig, NG_PROGRESS_CONFIG } from './ng-progress.interface';\r\n\r\nconst defaultConfig: NgProgressConfig = {\r\n  min: 8,\r\n  max: 100,\r\n  speed: 200,\r\n  debounceTime: 0,\r\n  trickleSpeed: 300,\r\n  fixed: true,\r\n  meteor: true,\r\n  thick: false,\r\n  spinner: true,\r\n  ease: 'linear',\r\n  color: '#1B95E0',\r\n  direction: 'ltr+',\r\n  spinnerPosition: 'right',\r\n  trickleFunc: (n: number): number => {\r\n    if (n >= 0 && n < 20) return 10;\r\n    if (n >= 20 && n < 50) return 4;\r\n    if (n >= 50 && n < 80) return 2;\r\n    if (n >= 80 && n < 99) return 0.5;\r\n    return 0;\r\n  }\r\n};\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NgProgress {\r\n\r\n  /** Store progress bar instances */\r\n  private readonly _instances = new Map<string, NgProgressRef>();\r\n\r\n  /** Global config */\r\n  config: NgProgressConfig;\r\n\r\n  constructor(@Optional() @Inject(NG_PROGRESS_CONFIG) config: NgProgressConfig) {\r\n    this.config = config ? {...defaultConfig, ...config} : defaultConfig;\r\n  }\r\n\r\n  /**\r\n   * Get or Create progress bar by ID\r\n   * @param id\r\n   * @param config\r\n   */\r\n  ref(id = 'root', config?: NgProgressConfig) {\r\n    if (this._instances.has(id)) {\r\n      // Get ProgressRef instance\r\n      const progressRef = this._instances.get(id);\r\n      if (config) {\r\n        progressRef.setConfig({...this.config, ...config});\r\n      }\r\n      return progressRef;\r\n    } else {\r\n      // Create new ProgressRef instance\r\n      const progressRef = new NgProgressRef({...this.config, ...config}, this.deleteInstance(id));\r\n      return this._instances.set(id, progressRef).get(id);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroy all progress bar instances\r\n   */\r\n  destroyAll() {\r\n    this._instances.forEach((ref: NgProgressRef) => ref.destroy());\r\n  }\r\n\r\n  /**\r\n   * A destroyer function for each progress bar instance\r\n   */\r\n  private deleteInstance(id: string) {\r\n    return () => {\r\n      this._instances.delete(id);\r\n    };\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  ChangeDetectionStrategy,\r\n  EventEmitter,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { Observable, Subscription, SubscriptionLike} from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { NgProgress } from './ng-progress.service';\r\nimport { NgProgressRef } from './ng-progress-ref';\r\nimport { NgProgressState } from './ng-progress.interface';\r\n\r\n@Component({\r\n  selector: 'ng-progress',\r\n  host: {\r\n    'role': 'progressbar',\r\n    '[attr.spinnerPosition]': 'spinnerPosition',\r\n    '[attr.dir]': 'direction',\r\n    '[attr.thick]': 'thick',\r\n    '[attr.fixed]': 'fixed'\r\n  },\r\n  template: `\r\n    <ng-container *ngIf=\"state$ | async; let state\">\r\n      <div class=\"ng-progress-bar\"\r\n            [class.-active]=\"state.active\"\r\n            [style.transition]=\"'opacity ' + speed + 'ms ' + ease\">\r\n        <div class=\"ng-bar-placeholder\">\r\n          <div class=\"ng-bar\"\r\n                [style.transform]=\"state.transform\"\r\n                [style.backgroundColor]=\"color\"\r\n                [style.transition]=\"state.active ? 'all ' + speed + 'ms ' + ease : 'none'\">\r\n            <div *ngIf=\"meteor\" class=\"ng-meteor\" [style.boxShadow]=\"'0 0 10px '+ color + ', 0 0 5px ' + color\"></div>\r\n          </div>\r\n        </div>\r\n        <div *ngIf=\"spinner\" class=\"ng-spinner\">\r\n          <div class=\"ng-spinner-icon\"\r\n                [style.borderTopColor]=\"color\"\r\n                [style.borderLeftColor]=\"color\"></div>\r\n        </div>\r\n      </div>\r\n    </ng-container>\r\n  `,\r\n  styleUrls: ['./ng-progress.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  preserveWhitespaces: false\r\n})\r\n\r\nexport class NgProgressComponent implements OnInit, OnChanges, OnDestroy {\r\n\r\n  private _started: SubscriptionLike = Subscription.EMPTY;\r\n  private _completed: SubscriptionLike = Subscription.EMPTY;\r\n\r\n  /** Progress bar worker */\r\n  progressRef: NgProgressRef;\r\n\r\n  /** Stream that emits progress state */\r\n  state$: Observable<{ active: boolean, transform: string }>;\r\n\r\n  /** Creates a new instance if id is not already exists */\r\n  @Input() id = 'root';\r\n\r\n  /** Initializes inputs from the global config */\r\n  @Input() min: number = this._ngProgress.config.min;\r\n  @Input() max: number = this._ngProgress.config.max;\r\n  @Input() ease: string = this._ngProgress.config.ease;\r\n  @Input() color: string = this._ngProgress.config.color;\r\n  @Input() speed: number = this._ngProgress.config.speed;\r\n  @Input() thick: boolean = this._ngProgress.config.thick;\r\n  @Input() fixed: boolean = this._ngProgress.config.fixed;\r\n  @Input() meteor: boolean = this._ngProgress.config.meteor;\r\n  @Input() spinner: boolean = this._ngProgress.config.spinner;\r\n  @Input() trickleSpeed: number = this._ngProgress.config.trickleSpeed;\r\n  @Input() debounceTime: number = this._ngProgress.config.debounceTime;\r\n  @Input() trickleFunc: (n: number) => number = this._ngProgress.config.trickleFunc;\r\n  @Input() spinnerPosition: 'left' | 'right' = this._ngProgress.config.spinnerPosition;\r\n  @Input() direction: 'ltr+' | 'ltr-' | 'rtl+' | 'rtl-' = this._ngProgress.config.direction;\r\n  @Output() started = new EventEmitter();\r\n  @Output() completed = new EventEmitter();\r\n\r\n  get isStarted() {\r\n    return this.progressRef.isStarted;\r\n  }\r\n\r\n  constructor(private _ngProgress: NgProgress) {\r\n  }\r\n\r\n  ngOnChanges() {\r\n    if (this.progressRef instanceof NgProgressRef) {\r\n      // Update progress bar config when inputs change\r\n      this.progressRef.setConfig({\r\n        max: (this.max > 0 && this.max <= 100) ? this.max : 100,\r\n        min: (this.min < 100 && this.min >= 0) ? this.min : 0,\r\n        speed: this.speed,\r\n        trickleSpeed: this.trickleSpeed,\r\n        trickleFunc: this.trickleFunc,\r\n        debounceTime: this.debounceTime\r\n      });\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    // Get progress bar service instance\r\n    this.progressRef = this._ngProgress.ref(this.id, {\r\n      max: this.max,\r\n      min: this.min,\r\n      speed: this.speed,\r\n      trickleSpeed: this.trickleSpeed,\r\n      debounceTime: this.debounceTime\r\n    });\r\n\r\n    // Subscribe to progress state\r\n    this.state$ = this.progressRef.state.pipe(\r\n      map((state: NgProgressState) => ({\r\n        active: state.active,\r\n        transform: `translate3d(${state.value}%,0,0)`\r\n      }))\r\n    );\r\n\r\n    // Subscribes to started and completed events on deman\r\n    if (this.started.observers.length) {\r\n      this._started = this.progressRef.started.subscribe(() => this.started.emit());\r\n    }\r\n    if (this.completed.observers.length) {\r\n      this._completed = this.progressRef.completed.subscribe(() => this.completed.emit());\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._started.unsubscribe();\r\n    this._completed.unsubscribe();\r\n    if (this.progressRef instanceof NgProgressRef) {\r\n      this.progressRef.destroy();\r\n    }\r\n  }\r\n\r\n  start() {\r\n    this.progressRef.start();\r\n  }\r\n\r\n  complete() {\r\n    this.progressRef.complete();\r\n  }\r\n\r\n  inc(n?: number) {\r\n    this.progressRef.inc(n);\r\n  }\r\n\r\n  set(n: number) {\r\n    this.progressRef.set(n);\r\n  }\r\n}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgProgressComponent } from './ng-progress.component';\r\nimport { NgProgressConfig, NG_PROGRESS_CONFIG } from './ng-progress.interface';\r\n\r\n@NgModule({\r\n  declarations: [NgProgressComponent],\r\n  exports: [NgProgressComponent],\r\n  imports: [CommonModule]\r\n})\r\nexport class NgProgressModule {\r\n  static withConfig(config: NgProgressConfig): ModuleWithProviders {\r\n    return {\r\n      ngModule: NgProgressModule,\r\n      providers: [\r\n        {provide: NG_PROGRESS_CONFIG, useValue: config}\r\n      ]\r\n    };\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}