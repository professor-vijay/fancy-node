{"ast":null,"code":"import _createForOfIteratorHelper from \"D:/master-sp-new/Biz1Maket_Single_Store/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"D:/master-sp-new/Biz1Maket_Single_Store/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/master-sp-new/Biz1Maket_Single_Store/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { CommonModule } from '@angular/common';\nimport { TemplateRef, Directive, ViewContainerRef, Input, NgModule } from '@angular/core';\n/**\n * @fileoverview added by tsickle\n * Generated from: string_template_outlet.directive.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @template _T\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nvar NzStringTemplateOutletDirective = /*#__PURE__*/function () {\n  /**\n   * @param {?} viewContainer\n   * @param {?} templateRef\n   */\n  function NzStringTemplateOutletDirective(viewContainer, templateRef) {\n    _classCallCheck(this, NzStringTemplateOutletDirective);\n\n    this.viewContainer = viewContainer;\n    this.templateRef = templateRef;\n    this.embeddedViewRef = null;\n    this.context = new NzStringTemplateOutletContext();\n    this.nzStringTemplateOutletContext = null;\n    this.nzStringTemplateOutlet = null;\n  }\n  /**\n   * @template T\n   * @param {?} _dir\n   * @param {?} _ctx\n   * @return {?}\n   */\n\n\n  _createClass(NzStringTemplateOutletDirective, [{\n    key: \"recreateView\",\n    value:\n    /**\n     * @private\n     * @return {?}\n     */\n    function recreateView() {\n      this.viewContainer.clear();\n      /** @type {?} */\n\n      var isTemplateRef = this.nzStringTemplateOutlet instanceof TemplateRef;\n      /** @type {?} */\n\n      var templateRef =\n      /** @type {?} */\n      isTemplateRef ? this.nzStringTemplateOutlet : this.templateRef;\n      this.embeddedViewRef = this.viewContainer.createEmbeddedView(templateRef, isTemplateRef ? this.nzStringTemplateOutletContext : this.context);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"updateContext\",\n    value: function updateContext() {\n      /** @type {?} */\n      var isTemplateRef = this.nzStringTemplateOutlet instanceof TemplateRef;\n      /** @type {?} */\n\n      var newCtx = isTemplateRef ? this.nzStringTemplateOutletContext : this.context;\n      /** @type {?} */\n\n      var oldCtx =\n      /** @type {?} */\n\n      /** @type {?} */\n      this.embeddedViewRef.context;\n\n      if (newCtx) {\n        for (var _i = 0, _Object$keys = Object.keys(newCtx); _i < _Object$keys.length; _i++) {\n          var propName = _Object$keys[_i];\n          oldCtx[propName] = newCtx[propName];\n        }\n      }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      var nzStringTemplateOutletContext = changes.nzStringTemplateOutletContext,\n          nzStringTemplateOutlet = changes.nzStringTemplateOutlet;\n      /** @type {?} */\n\n      var shouldRecreateView =\n      /**\n      * @return {?}\n      */\n      function shouldRecreateView() {\n        /** @type {?} */\n        var shouldOutletRecreate = false;\n\n        if (nzStringTemplateOutlet) {\n          if (nzStringTemplateOutlet.firstChange) {\n            shouldOutletRecreate = true;\n          } else {\n            /** @type {?} */\n            var isPreviousOutletTemplate = nzStringTemplateOutlet.previousValue instanceof TemplateRef;\n            /** @type {?} */\n\n            var isCurrentOutletTemplate = nzStringTemplateOutlet.currentValue instanceof TemplateRef;\n            shouldOutletRecreate = isPreviousOutletTemplate || isCurrentOutletTemplate;\n          }\n        }\n        /** @type {?} */\n\n\n        var hasContextShapeChanged =\n        /**\n        * @param {?} ctxChange\n        * @return {?}\n        */\n        function hasContextShapeChanged(ctxChange) {\n          /** @type {?} */\n          var prevCtxKeys = Object.keys(ctxChange.previousValue || {});\n          /** @type {?} */\n\n          var currCtxKeys = Object.keys(ctxChange.currentValue || {});\n\n          if (prevCtxKeys.length === currCtxKeys.length) {\n            var _iterator = _createForOfIteratorHelper(currCtxKeys),\n                _step;\n\n            try {\n              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                var propName = _step.value;\n\n                if (prevCtxKeys.indexOf(propName) === -1) {\n                  return true;\n                }\n              }\n            } catch (err) {\n              _iterator.e(err);\n            } finally {\n              _iterator.f();\n            }\n\n            return false;\n          } else {\n            return true;\n          }\n        };\n        /** @type {?} */\n\n\n        var shouldContextRecreate = nzStringTemplateOutletContext && hasContextShapeChanged(nzStringTemplateOutletContext);\n        return shouldContextRecreate || shouldOutletRecreate;\n      };\n\n      if (nzStringTemplateOutlet) {\n        this.context.$implicit = nzStringTemplateOutlet.currentValue;\n      }\n      /** @type {?} */\n\n\n      var recreateView = shouldRecreateView();\n\n      if (recreateView) {\n        /** recreate view when context shape or outlet change **/\n        this.recreateView();\n      } else {\n        /** update context **/\n        this.updateContext();\n      }\n    }\n  }], [{\n    key: \"ngTemplateContextGuard\",\n    value: function ngTemplateContextGuard(_dir, _ctx) {\n      return true;\n    }\n  }]);\n\n  return NzStringTemplateOutletDirective;\n}();\n\nNzStringTemplateOutletDirective.ɵfac = function NzStringTemplateOutletDirective_Factory(t) {\n  return new (t || NzStringTemplateOutletDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n};\n\nNzStringTemplateOutletDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: NzStringTemplateOutletDirective,\n  selectors: [[\"\", \"nzStringTemplateOutlet\", \"\"]],\n  inputs: {\n    nzStringTemplateOutletContext: \"nzStringTemplateOutletContext\",\n    nzStringTemplateOutlet: \"nzStringTemplateOutlet\"\n  },\n  exportAs: [\"nzStringTemplateOutlet\"],\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\n/** @nocollapse */\n\nNzStringTemplateOutletDirective.ctorParameters = function () {\n  return [{\n    type: ViewContainerRef\n  }, {\n    type: TemplateRef\n  }];\n};\n\nNzStringTemplateOutletDirective.propDecorators = {\n  nzStringTemplateOutletContext: [{\n    type: Input\n  }],\n  nzStringTemplateOutlet: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NzStringTemplateOutletDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[nzStringTemplateOutlet]',\n      exportAs: 'nzStringTemplateOutlet'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: ɵngcc0.TemplateRef\n    }];\n  }, {\n    nzStringTemplateOutletContext: [{\n      type: Input\n    }],\n    nzStringTemplateOutlet: [{\n      type: Input\n    }]\n  });\n})();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  NzStringTemplateOutletDirective.prototype.embeddedViewRef;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NzStringTemplateOutletDirective.prototype.context;\n  /** @type {?} */\n\n  NzStringTemplateOutletDirective.prototype.nzStringTemplateOutletContext;\n  /** @type {?} */\n\n  NzStringTemplateOutletDirective.prototype.nzStringTemplateOutlet;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NzStringTemplateOutletDirective.prototype.viewContainer;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NzStringTemplateOutletDirective.prototype.templateRef;\n}\n\nvar NzStringTemplateOutletContext = /*#__PURE__*/_createClass(function NzStringTemplateOutletContext() {\n  _classCallCheck(this, NzStringTemplateOutletContext);\n});\n\nif (false) {\n  /** @type {?} */\n  NzStringTemplateOutletContext.prototype.$implicit;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: outlet.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar NzOutletModule = /*#__PURE__*/_createClass(function NzOutletModule() {\n  _classCallCheck(this, NzOutletModule);\n});\n\nNzOutletModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: NzOutletModule\n});\nNzOutletModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function NzOutletModule_Factory(t) {\n    return new (t || NzOutletModule)();\n  },\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NzOutletModule, {\n    declarations: function declarations() {\n      return [NzStringTemplateOutletDirective];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [NzStringTemplateOutletDirective];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NzOutletModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      exports: [NzStringTemplateOutletDirective],\n      declarations: [NzStringTemplateOutletDirective]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: ng-zorro-antd-core-outlet.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { NzOutletModule, NzStringTemplateOutletDirective };","map":{"version":3,"sources":["ng-zorro-antd/core/outlet/string_template_outlet.directive.ts","ng-zorro-antd/core/outlet/outlet.module.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { Directive, EmbeddedViewRef, Input, OnChanges, SimpleChange, SimpleChanges, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\n\n@Directive({\n  selector: '[nzStringTemplateOutlet]',\n  exportAs: 'nzStringTemplateOutlet'\n})\nexport class NzStringTemplateOutletDirective<_T = unknown> implements OnChanges {\n  private embeddedViewRef: EmbeddedViewRef<NzSafeAny> | null = null;\n  private context = new NzStringTemplateOutletContext();\n  @Input() nzStringTemplateOutletContext: NzSafeAny | null = null;\n  @Input() nzStringTemplateOutlet: NzSafeAny | TemplateRef<NzSafeAny> = null;\n\n  static ngTemplateContextGuard<T>(_dir: NzStringTemplateOutletDirective<T>, _ctx: NzSafeAny): _ctx is NzStringTemplateOutletContext {\n    return true;\n  }\n\n  private recreateView(): void {\n    this.viewContainer.clear();\n    const isTemplateRef = this.nzStringTemplateOutlet instanceof TemplateRef;\n    const templateRef = (isTemplateRef ? this.nzStringTemplateOutlet : this.templateRef) as NzSafeAny;\n    this.embeddedViewRef = this.viewContainer.createEmbeddedView(\n      templateRef,\n      isTemplateRef ? this.nzStringTemplateOutletContext : this.context\n    );\n  }\n\n  private updateContext(): void {\n    const isTemplateRef = this.nzStringTemplateOutlet instanceof TemplateRef;\n    const newCtx = isTemplateRef ? this.nzStringTemplateOutletContext : this.context;\n    const oldCtx = this.embeddedViewRef!.context as NzSafeAny;\n    if (newCtx) {\n      for (const propName of Object.keys(newCtx)) {\n        oldCtx[propName] = newCtx[propName];\n      }\n    }\n  }\n\n  constructor(private viewContainer: ViewContainerRef, private templateRef: TemplateRef<NzSafeAny>) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    const { nzStringTemplateOutletContext, nzStringTemplateOutlet } = changes;\n    const shouldRecreateView = (): boolean => {\n      let shouldOutletRecreate = false;\n      if (nzStringTemplateOutlet) {\n        if (nzStringTemplateOutlet.firstChange) {\n          shouldOutletRecreate = true;\n        } else {\n          const isPreviousOutletTemplate = nzStringTemplateOutlet.previousValue instanceof TemplateRef;\n          const isCurrentOutletTemplate = nzStringTemplateOutlet.currentValue instanceof TemplateRef;\n          shouldOutletRecreate = isPreviousOutletTemplate || isCurrentOutletTemplate;\n        }\n      }\n      const hasContextShapeChanged = (ctxChange: SimpleChange): boolean => {\n        const prevCtxKeys = Object.keys(ctxChange.previousValue || {});\n        const currCtxKeys = Object.keys(ctxChange.currentValue || {});\n        if (prevCtxKeys.length === currCtxKeys.length) {\n          for (const propName of currCtxKeys) {\n            if (prevCtxKeys.indexOf(propName) === -1) {\n              return true;\n            }\n          }\n          return false;\n        } else {\n          return true;\n        }\n      };\n      const shouldContextRecreate = nzStringTemplateOutletContext && hasContextShapeChanged(nzStringTemplateOutletContext);\n      return shouldContextRecreate || shouldOutletRecreate;\n    };\n\n    if (nzStringTemplateOutlet) {\n      this.context.$implicit = nzStringTemplateOutlet.currentValue;\n    }\n\n    const recreateView = shouldRecreateView();\n    if (recreateView) {\n      /** recreate view when context shape or outlet change **/\n      this.recreateView();\n    } else {\n      /** update context **/\n      this.updateContext();\n    }\n  }\n}\n\nexport class NzStringTemplateOutletContext {\n  public $implicit: NzSafeAny;\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NzStringTemplateOutletDirective } from './string_template_outlet.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [NzStringTemplateOutletDirective],\n  declarations: [NzStringTemplateOutletDirective]\n})\nexport class NzOutletModule {}\n"]},"metadata":{},"sourceType":"module"}