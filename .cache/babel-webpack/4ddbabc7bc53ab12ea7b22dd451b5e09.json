{"ast":null,"code":"import _classCallCheck from \"D:/Biz1-Market-0.01/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/Biz1-Market-0.01/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _slicedToArray from \"D:/Biz1-Market-0.01/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _addMonths from 'date-fns/addMonths';\nimport _addYears from 'date-fns/addYears';\nimport differenceInCalendarDays from 'date-fns/differenceInCalendarDays';\nimport differenceInCalendarMonths from 'date-fns/differenceInCalendarMonths';\nimport differenceInCalendarYears from 'date-fns/differenceInCalendarYears';\nimport differenceInHours from 'date-fns/differenceInHours';\nimport differenceInMinutes from 'date-fns/differenceInMinutes';\nimport differenceInSeconds from 'date-fns/differenceInSeconds';\nimport _isFirstDayOfMonth from 'date-fns/isFirstDayOfMonth';\nimport _isLastDayOfMonth from 'date-fns/isLastDayOfMonth';\nimport isSameDay from 'date-fns/isSameDay';\nimport isSameHour from 'date-fns/isSameHour';\nimport isSameMinute from 'date-fns/isSameMinute';\nimport isSameMonth from 'date-fns/isSameMonth';\nimport isSameSecond from 'date-fns/isSameSecond';\nimport isSameYear from 'date-fns/isSameYear';\nimport _isToday from 'date-fns/isToday';\nimport _isValid from 'date-fns/isValid';\nimport _setDay from 'date-fns/setDay';\nimport _setMonth from 'date-fns/setMonth';\nimport _setYear from 'date-fns/setYear';\nimport startOfMonth from 'date-fns/startOfMonth';\nimport startOfWeek from 'date-fns/startOfWeek';\nimport { warn } from 'ng-zorro-antd/core/logger';\n/**\n * @fileoverview added by tsickle\n * Generated from: candy-date.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @param {?} rangeValue\n * @return {?}\n */\n\nfunction sortRangeValue(rangeValue) {\n  if (Array.isArray(rangeValue)) {\n    var _rangeValue = _slicedToArray(rangeValue, 2),\n        start = _rangeValue[0],\n        end = _rangeValue[1];\n\n    return start && end && start.isAfterSecond(end) ? [end, start] : [start, end];\n  }\n\n  return rangeValue;\n}\n/**\n * @param {?} value\n * @return {?}\n */\n\n\nfunction normalizeRangeValue(value) {\n  var _ref = value || [],\n      _ref2 = _slicedToArray(_ref, 2),\n      start = _ref2[0],\n      end = _ref2[1];\n  /** @type {?} */\n\n\n  var newStart = start || new CandyDate();\n  /** @type {?} */\n\n  var newEnd = (end === null || end === void 0 ? void 0 : end.isSameMonth(newStart)) ? end.addMonths(1) : end || newStart.addMonths(1);\n  return [newStart, newEnd];\n}\n/**\n * @param {?} value\n * @return {?}\n */\n\n\nfunction cloneDate(value) {\n  if (Array.isArray(value)) {\n    return value.map(\n    /**\n    * @param {?} v\n    * @return {?}\n    */\n    function (v) {\n      return v instanceof CandyDate ? v.clone() : null;\n    });\n  } else {\n    return value instanceof CandyDate ? value.clone() : null;\n  }\n}\n/**\n * Wrapping kind APIs for date operating and unify\n * NOTE: every new API return new CandyDate object without side effects to the former Date object\n * NOTE: most APIs are based on local time other than customized locale id (this needs tobe support in future)\n * TODO: support format() against to angular's core API\n */\n\n\nvar CandyDate = /*#__PURE__*/function () {\n  // locale: string; // Custom specified locale ID\n\n  /**\n   * @param {?=} date\n   */\n  function CandyDate(date) {\n    _classCallCheck(this, CandyDate);\n\n    if (date) {\n      if (date instanceof Date) {\n        this.nativeDate = date;\n      } else if (typeof date === 'string' || typeof date === 'number') {\n        warn('The string type is not recommended for date-picker, use \"Date\" type');\n        this.nativeDate = new Date(date);\n      } else {\n        throw new Error('The input date type is not supported (\"Date\" is now recommended)');\n      }\n    } else {\n      this.nativeDate = new Date();\n    }\n  } // getLocale(): string {\n  //   return this.locale;\n  // }\n  // setLocale(locale: string): CandyDate {\n  //   this.locale = locale;\n  //   return this;\n  // }\n\n  /**\n   * @param {?=} options\n   * @return {?}\n   */\n\n\n  _createClass(CandyDate, [{\n    key: \"calendarStart\",\n    value: function calendarStart(options) {\n      return new CandyDate(startOfWeek(startOfMonth(this.nativeDate), options));\n    } // ---------------------------------------------------------------------\n    // | Native shortcuts\n    // -----------------------------------------------------------------------------\\\n\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"getYear\",\n    value: function getYear() {\n      return this.nativeDate.getFullYear();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"getMonth\",\n    value: function getMonth() {\n      return this.nativeDate.getMonth();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"getDay\",\n    value: function getDay() {\n      return this.nativeDate.getDay();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"getTime\",\n    value: function getTime() {\n      return this.nativeDate.getTime();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"getDate\",\n    value: function getDate() {\n      return this.nativeDate.getDate();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"getHours\",\n    value: function getHours() {\n      return this.nativeDate.getHours();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"getMinutes\",\n    value: function getMinutes() {\n      return this.nativeDate.getMinutes();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"getSeconds\",\n    value: function getSeconds() {\n      return this.nativeDate.getSeconds();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"getMilliseconds\",\n    value: function getMilliseconds() {\n      return this.nativeDate.getMilliseconds();\n    } // ---------------------------------------------------------------------\n    // | New implementing APIs\n    // ---------------------------------------------------------------------\n\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new CandyDate(new Date(this.nativeDate));\n    }\n    /**\n     * @param {?} hour\n     * @param {?} minute\n     * @param {?} second\n     * @return {?}\n     */\n\n  }, {\n    key: \"setHms\",\n    value: function setHms(hour, minute, second) {\n      return new CandyDate(this.nativeDate.setHours(hour, minute, second));\n    }\n    /**\n     * @param {?} year\n     * @return {?}\n     */\n\n  }, {\n    key: \"setYear\",\n    value: function setYear(year) {\n      return new CandyDate(_setYear(this.nativeDate, year));\n    }\n    /**\n     * @param {?} amount\n     * @return {?}\n     */\n\n  }, {\n    key: \"addYears\",\n    value: function addYears(amount) {\n      return new CandyDate(_addYears(this.nativeDate, amount));\n    } // NOTE: month starts from 0\n    // NOTE: Don't use the native API for month manipulation as it not restrict the date when it overflows, eg. (new Date('2018-7-31')).setMonth(1) will be date of 2018-3-03 instead of 2018-2-28\n\n    /**\n     * @param {?} month\n     * @return {?}\n     */\n\n  }, {\n    key: \"setMonth\",\n    value: function setMonth(month) {\n      return new CandyDate(_setMonth(this.nativeDate, month));\n    }\n    /**\n     * @param {?} amount\n     * @return {?}\n     */\n\n  }, {\n    key: \"addMonths\",\n    value: function addMonths(amount) {\n      return new CandyDate(_addMonths(this.nativeDate, amount));\n    }\n    /**\n     * @param {?} day\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"setDay\",\n    value: function setDay(day, options) {\n      return new CandyDate(_setDay(this.nativeDate, day, options));\n    }\n    /**\n     * @param {?} amount\n     * @return {?}\n     */\n\n  }, {\n    key: \"setDate\",\n    value: function setDate(amount) {\n      /** @type {?} */\n      var date = new Date(this.nativeDate);\n      date.setDate(amount);\n      return new CandyDate(date);\n    }\n    /**\n     * @param {?} amount\n     * @return {?}\n     */\n\n  }, {\n    key: \"addDays\",\n    value: function addDays(amount) {\n      return this.setDate(this.getDate() + amount);\n    }\n    /**\n     * @param {?} date\n     * @param {?=} grain\n     * @return {?}\n     */\n\n  }, {\n    key: \"isSame\",\n    value: function isSame(date) {\n      var grain = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'day';\n\n      /** @type {?} */\n      var fn;\n\n      switch (grain) {\n        case 'year':\n          fn = isSameYear;\n          break;\n\n        case 'month':\n          fn = isSameMonth;\n          break;\n\n        case 'day':\n          fn = isSameDay;\n          break;\n\n        case 'hour':\n          fn = isSameHour;\n          break;\n\n        case 'minute':\n          fn = isSameMinute;\n          break;\n\n        case 'second':\n          fn = isSameSecond;\n          break;\n\n        default:\n          fn = isSameDay;\n          break;\n      }\n\n      return fn(this.nativeDate, this.toNativeDate(date));\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n\n  }, {\n    key: \"isSameYear\",\n    value: function isSameYear(date) {\n      return this.isSame(date, 'year');\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n\n  }, {\n    key: \"isSameMonth\",\n    value: function isSameMonth(date) {\n      return this.isSame(date, 'month');\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n\n  }, {\n    key: \"isSameDay\",\n    value: function isSameDay(date) {\n      return this.isSame(date, 'day');\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n\n  }, {\n    key: \"isSameHour\",\n    value: function isSameHour(date) {\n      return this.isSame(date, 'hour');\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n\n  }, {\n    key: \"isSameMinute\",\n    value: function isSameMinute(date) {\n      return this.isSame(date, 'minute');\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n\n  }, {\n    key: \"isSameSecond\",\n    value: function isSameSecond(date) {\n      return this.isSame(date, 'second');\n    }\n    /**\n     * @param {?} date\n     * @param {?=} grain\n     * @param {?=} isBefore\n     * @return {?}\n     */\n\n  }, {\n    key: \"compare\",\n    value: function compare(date) {\n      var grain = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'day';\n      var isBefore = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n      if (date === null) {\n        return false;\n      }\n      /** @type {?} */\n\n\n      var fn;\n\n      switch (grain) {\n        case 'year':\n          fn = differenceInCalendarYears;\n          break;\n\n        case 'month':\n          fn = differenceInCalendarMonths;\n          break;\n\n        case 'day':\n          fn = differenceInCalendarDays;\n          break;\n\n        case 'hour':\n          fn = differenceInHours;\n          break;\n\n        case 'minute':\n          fn = differenceInMinutes;\n          break;\n\n        case 'second':\n          fn = differenceInSeconds;\n          break;\n\n        default:\n          fn = differenceInCalendarDays;\n          break;\n      }\n\n      return isBefore ? fn(this.nativeDate, this.toNativeDate(date)) < 0 : fn(this.nativeDate, this.toNativeDate(date)) > 0;\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n\n  }, {\n    key: \"isBeforeYear\",\n    value: function isBeforeYear(date) {\n      return this.compare(date, 'year');\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n\n  }, {\n    key: \"isBeforeMonth\",\n    value: function isBeforeMonth(date) {\n      return this.compare(date, 'month');\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n\n  }, {\n    key: \"isBeforeDay\",\n    value: function isBeforeDay(date) {\n      return this.compare(date, 'day');\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n\n  }, {\n    key: \"isBeforeHour\",\n    value: function isBeforeHour(date) {\n      return this.compare(date, 'hour');\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n\n  }, {\n    key: \"isBeforeMinute\",\n    value: function isBeforeMinute(date) {\n      return this.compare(date, 'minute');\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n\n  }, {\n    key: \"isBeforeSecond\",\n    value: function isBeforeSecond(date) {\n      return this.compare(date, 'second');\n    } // TODO: isBefore\n\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n\n  }, {\n    key: \"isAfterYear\",\n    value: function isAfterYear(date) {\n      return this.compare(date, 'year', false);\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n\n  }, {\n    key: \"isAfterMonth\",\n    value: function isAfterMonth(date) {\n      return this.compare(date, 'month', false);\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n\n  }, {\n    key: \"isAfterDay\",\n    value: function isAfterDay(date) {\n      return this.compare(date, 'day', false);\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n\n  }, {\n    key: \"isAfterHour\",\n    value: function isAfterHour(date) {\n      return this.compare(date, 'hour', false);\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n\n  }, {\n    key: \"isAfterMinute\",\n    value: function isAfterMinute(date) {\n      return this.compare(date, 'minute', false);\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n\n  }, {\n    key: \"isAfterSecond\",\n    value: function isAfterSecond(date) {\n      return this.compare(date, 'second', false);\n    } // Equal to today accurate to \"day\"\n\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"isToday\",\n    value: function isToday() {\n      return _isToday(this.nativeDate);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"isValid\",\n    value: function isValid() {\n      return _isValid(this.nativeDate);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"isFirstDayOfMonth\",\n    value: function isFirstDayOfMonth() {\n      return _isFirstDayOfMonth(this.nativeDate);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"isLastDayOfMonth\",\n    value: function isLastDayOfMonth() {\n      return _isLastDayOfMonth(this.nativeDate);\n    }\n    /**\n     * @private\n     * @param {?} date\n     * @return {?}\n     */\n\n  }, {\n    key: \"toNativeDate\",\n    value: function toNativeDate(date) {\n      return date instanceof CandyDate ? date.nativeDate : date;\n    }\n  }]);\n\n  return CandyDate;\n}();\n\nif (false) {\n  /** @type {?} */\n  CandyDate.prototype.nativeDate;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: time.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/** @type {?} */\n\n\nvar timeUnits = [['Y', 1000 * 60 * 60 * 24 * 365], ['M', 1000 * 60 * 60 * 24 * 30], ['D', 1000 * 60 * 60 * 24], ['H', 1000 * 60 * 60], ['m', 1000 * 60], ['s', 1000], ['S', 1] // million seconds\n];\n/**\n * @fileoverview added by tsickle\n * Generated from: public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: ng-zorro-antd-core-time.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { CandyDate, cloneDate, normalizeRangeValue, sortRangeValue, timeUnits };","map":{"version":3,"sources":["ng-zorro-antd/core/time/candy-date.ts","ng-zorro-antd/core/time/time.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport addMonths from 'date-fns/addMonths';\nimport addYears from 'date-fns/addYears';\nimport differenceInCalendarDays from 'date-fns/differenceInCalendarDays';\nimport differenceInCalendarMonths from 'date-fns/differenceInCalendarMonths';\nimport differenceInCalendarYears from 'date-fns/differenceInCalendarYears';\nimport differenceInHours from 'date-fns/differenceInHours';\nimport differenceInMinutes from 'date-fns/differenceInMinutes';\nimport differenceInSeconds from 'date-fns/differenceInSeconds';\nimport isFirstDayOfMonth from 'date-fns/isFirstDayOfMonth';\nimport isLastDayOfMonth from 'date-fns/isLastDayOfMonth';\nimport isSameDay from 'date-fns/isSameDay';\nimport isSameHour from 'date-fns/isSameHour';\nimport isSameMinute from 'date-fns/isSameMinute';\nimport isSameMonth from 'date-fns/isSameMonth';\nimport isSameSecond from 'date-fns/isSameSecond';\nimport isSameYear from 'date-fns/isSameYear';\nimport isToday from 'date-fns/isToday';\nimport isValid from 'date-fns/isValid';\nimport setDay from 'date-fns/setDay';\nimport setMonth from 'date-fns/setMonth';\nimport setYear from 'date-fns/setYear';\nimport startOfMonth from 'date-fns/startOfMonth';\nimport startOfWeek from 'date-fns/startOfWeek';\nimport { warn } from 'ng-zorro-antd/core/logger';\nimport { IndexableObject, NzSafeAny } from 'ng-zorro-antd/core/types';\n\nexport type WeekDayIndex = 0 | 1 | 2 | 3 | 4 | 5 | 6;\nexport type CandyDateCompareGrain = 'year' | 'month' | 'day' | 'hour' | 'minute' | 'second';\nexport type CandyDateType = CandyDate | Date | null;\nexport type SingleValue = CandyDate | null;\nexport type CompatibleValue = SingleValue | SingleValue[];\n\nexport function sortRangeValue(rangeValue: SingleValue[]): SingleValue[] {\n  if (Array.isArray(rangeValue)) {\n    const [start, end] = rangeValue;\n    return start && end && start.isAfterSecond(end) ? [end, start] : [start, end];\n  }\n  return rangeValue;\n}\n\nexport function normalizeRangeValue(value: SingleValue[]): CandyDate[] {\n  const [start, end] = value || [];\n  const newStart = start || new CandyDate();\n  const newEnd = end?.isSameMonth(newStart) ? end.addMonths(1) : end || newStart.addMonths(1);\n  return [newStart, newEnd];\n}\n\nexport function cloneDate(value: CompatibleValue): CompatibleValue {\n  if (Array.isArray(value)) {\n    return value.map(v => (v instanceof CandyDate ? v.clone() : null));\n  } else {\n    return value instanceof CandyDate ? value.clone() : null;\n  }\n}\n\n/**\n * Wrapping kind APIs for date operating and unify\n * NOTE: every new API return new CandyDate object without side effects to the former Date object\n * NOTE: most APIs are based on local time other than customized locale id (this needs tobe support in future)\n * TODO: support format() against to angular's core API\n */\nexport class CandyDate implements IndexableObject {\n  nativeDate: Date;\n  // locale: string; // Custom specified locale ID\n\n  constructor(date?: Date | string | number) {\n    if (date) {\n      if (date instanceof Date) {\n        this.nativeDate = date;\n      } else if (typeof date === 'string' || typeof date === 'number') {\n        warn('The string type is not recommended for date-picker, use \"Date\" type');\n        this.nativeDate = new Date(date);\n      } else {\n        throw new Error('The input date type is not supported (\"Date\" is now recommended)');\n      }\n    } else {\n      this.nativeDate = new Date();\n    }\n  }\n\n  // getLocale(): string {\n  //   return this.locale;\n  // }\n\n  // setLocale(locale: string): CandyDate {\n  //   this.locale = locale;\n  //   return this;\n  // }\n\n  calendarStart(options?: { weekStartsOn: WeekDayIndex | undefined }): CandyDate {\n    return new CandyDate(startOfWeek(startOfMonth(this.nativeDate), options));\n  }\n\n  // ---------------------------------------------------------------------\n  // | Native shortcuts\n  // -----------------------------------------------------------------------------\\\n\n  getYear(): number {\n    return this.nativeDate.getFullYear();\n  }\n\n  getMonth(): number {\n    return this.nativeDate.getMonth();\n  }\n\n  getDay(): number {\n    return this.nativeDate.getDay();\n  }\n\n  getTime(): number {\n    return this.nativeDate.getTime();\n  }\n\n  getDate(): number {\n    return this.nativeDate.getDate();\n  }\n\n  getHours(): number {\n    return this.nativeDate.getHours();\n  }\n\n  getMinutes(): number {\n    return this.nativeDate.getMinutes();\n  }\n\n  getSeconds(): number {\n    return this.nativeDate.getSeconds();\n  }\n\n  getMilliseconds(): number {\n    return this.nativeDate.getMilliseconds();\n  }\n\n  // ---------------------------------------------------------------------\n  // | New implementing APIs\n  // ---------------------------------------------------------------------\n\n  clone(): CandyDate {\n    return new CandyDate(new Date(this.nativeDate));\n  }\n\n  setHms(hour: number, minute: number, second: number): CandyDate {\n    return new CandyDate(this.nativeDate.setHours(hour, minute, second));\n  }\n\n  setYear(year: number): CandyDate {\n    return new CandyDate(setYear(this.nativeDate, year));\n  }\n\n  addYears(amount: number): CandyDate {\n    return new CandyDate(addYears(this.nativeDate, amount));\n  }\n\n  // NOTE: month starts from 0\n  // NOTE: Don't use the native API for month manipulation as it not restrict the date when it overflows, eg. (new Date('2018-7-31')).setMonth(1) will be date of 2018-3-03 instead of 2018-2-28\n  setMonth(month: number): CandyDate {\n    return new CandyDate(setMonth(this.nativeDate, month));\n  }\n\n  addMonths(amount: number): CandyDate {\n    return new CandyDate(addMonths(this.nativeDate, amount));\n  }\n\n  setDay(day: number, options?: { weekStartsOn: WeekDayIndex }): CandyDate {\n    return new CandyDate(setDay(this.nativeDate, day, options));\n  }\n\n  setDate(amount: number): CandyDate {\n    const date = new Date(this.nativeDate);\n    date.setDate(amount);\n    return new CandyDate(date);\n  }\n\n  addDays(amount: number): CandyDate {\n    return this.setDate(this.getDate() + amount);\n  }\n\n  isSame(date: CandyDateType, grain: CandyDateCompareGrain = 'day'): boolean {\n    let fn;\n    switch (grain) {\n      case 'year':\n        fn = isSameYear;\n        break;\n      case 'month':\n        fn = isSameMonth;\n        break;\n      case 'day':\n        fn = isSameDay;\n        break;\n      case 'hour':\n        fn = isSameHour;\n        break;\n      case 'minute':\n        fn = isSameMinute;\n        break;\n      case 'second':\n        fn = isSameSecond;\n        break;\n      default:\n        fn = isSameDay;\n        break;\n    }\n    return fn(this.nativeDate, this.toNativeDate(date));\n  }\n\n  isSameYear(date: CandyDateType): boolean {\n    return this.isSame(date, 'year');\n  }\n\n  isSameMonth(date: CandyDateType): boolean {\n    return this.isSame(date, 'month');\n  }\n\n  isSameDay(date: CandyDateType): boolean {\n    return this.isSame(date, 'day');\n  }\n\n  isSameHour(date: CandyDateType): boolean {\n    return this.isSame(date, 'hour');\n  }\n\n  isSameMinute(date: CandyDateType): boolean {\n    return this.isSame(date, 'minute');\n  }\n\n  isSameSecond(date: CandyDateType): boolean {\n    return this.isSame(date, 'second');\n  }\n\n  compare(date: CandyDateType, grain: CandyDateCompareGrain = 'day', isBefore: boolean = true): boolean {\n    if (date === null) {\n      return false;\n    }\n    let fn;\n    switch (grain) {\n      case 'year':\n        fn = differenceInCalendarYears;\n        break;\n      case 'month':\n        fn = differenceInCalendarMonths;\n        break;\n      case 'day':\n        fn = differenceInCalendarDays;\n        break;\n      case 'hour':\n        fn = differenceInHours;\n        break;\n      case 'minute':\n        fn = differenceInMinutes;\n        break;\n      case 'second':\n        fn = differenceInSeconds;\n        break;\n      default:\n        fn = differenceInCalendarDays;\n        break;\n    }\n    return isBefore ? fn(this.nativeDate, this.toNativeDate(date)) < 0 : fn(this.nativeDate, this.toNativeDate(date)) > 0;\n  }\n\n  isBeforeYear(date: CandyDateType): boolean {\n    return this.compare(date, 'year');\n  }\n\n  isBeforeMonth(date: CandyDateType): boolean {\n    return this.compare(date, 'month');\n  }\n\n  isBeforeDay(date: CandyDateType): boolean {\n    return this.compare(date, 'day');\n  }\n\n  isBeforeHour(date: CandyDateType): boolean {\n    return this.compare(date, 'hour');\n  }\n\n  isBeforeMinute(date: CandyDateType): boolean {\n    return this.compare(date, 'minute');\n  }\n\n  isBeforeSecond(date: CandyDateType): boolean {\n    return this.compare(date, 'second');\n  }\n\n  // TODO: isBefore\n  isAfterYear(date: CandyDateType): boolean {\n    return this.compare(date, 'year', false);\n  }\n\n  isAfterMonth(date: CandyDateType): boolean {\n    return this.compare(date, 'month', false);\n  }\n\n  isAfterDay(date: CandyDateType): boolean {\n    return this.compare(date, 'day', false);\n  }\n\n  isAfterHour(date: CandyDateType): boolean {\n    return this.compare(date, 'hour', false);\n  }\n\n  isAfterMinute(date: CandyDateType): boolean {\n    return this.compare(date, 'minute', false);\n  }\n\n  isAfterSecond(date: CandyDateType): boolean {\n    return this.compare(date, 'second', false);\n  }\n\n  // Equal to today accurate to \"day\"\n  isToday(): boolean {\n    return isToday(this.nativeDate);\n  }\n\n  isValid(): boolean {\n    return isValid(this.nativeDate);\n  }\n\n  isFirstDayOfMonth(): boolean {\n    return isFirstDayOfMonth(this.nativeDate);\n  }\n\n  isLastDayOfMonth(): boolean {\n    return isLastDayOfMonth(this.nativeDate);\n  }\n\n  private toNativeDate(date: NzSafeAny): Date {\n    return date instanceof CandyDate ? date.nativeDate : date;\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nexport const timeUnits: Array<[string, number]> = [\n  ['Y', 1000 * 60 * 60 * 24 * 365], // years\n  ['M', 1000 * 60 * 60 * 24 * 30], // months\n  ['D', 1000 * 60 * 60 * 24], // days\n  ['H', 1000 * 60 * 60], // hours\n  ['m', 1000 * 60], // minutes\n  ['s', 1000], // seconds\n  ['S', 1] // million seconds\n];\n"]},"metadata":{},"sourceType":"module"}