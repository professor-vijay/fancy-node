{"ast":null,"code":"import _classCallCheck from \"D:/Biz1-Market-0.01/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/Biz1-Market-0.01/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport * as Chartist from 'chartist';\nimport { Component, ElementRef, EventEmitter, Input, Output, NgModule } from '@angular/core';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Angular component which renders Chartist chart.\n *\n * See Chartist {\\@link https://gionkunz.github.io/chartist-js/api-documentation.html API documentation} and\n * {\\@link https://gionkunz.github.io/chartist-js/examples.html examples} for more information.\n * ### Example\n * ```html\n * <x-chartist\n * [type]=\"type\"\n * [data]=\"data\"\n * [options]=\"options\"\n * [responsiveOptions]=\"responsiveOptions\"\n * [events]=\"events\"\n * ></x-chartist>\n * ```\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nvar ChartistComponent = /*#__PURE__*/function () {\n  /**\n   * @ignore\n   * @param {?} elementRef\n   */\n  function ChartistComponent(elementRef) {\n    _classCallCheck(this, ChartistComponent);\n\n    this.elementRef = elementRef;\n    /**\n     * Event emitted after Chartist chart has been initialized.\n     *\n     * Event handler function will receive chart instance argument.\n     */\n\n    this.initialized = new EventEmitter();\n  }\n  /**\n   * @ignore\n   * @return {?}\n   */\n\n\n  _createClass(ChartistComponent, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      if (this.type && this.data) {\n        this.renderChart();\n      }\n    }\n    /**\n     * @ignore\n     * @param {?} changes\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      this.update(changes);\n    }\n    /**\n     * @ignore\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this.chart) {\n        this.chart.detach();\n        this.chart = null;\n      }\n    }\n    /**\n     * @ignore\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"renderChart\",\n    value: function renderChart() {\n      /** @type {?} */\n      var nativeElement = this.elementRef.nativeElement;\n\n      if (!(this.type in Chartist)) {\n        throw new Error(\"\".concat(this.type, \" is not a valid chart type\"));\n      }\n\n      this.chart =\n      /** @type {?} */\n      Chartist[this.type](nativeElement, this.data, this.options, this.responsiveOptions);\n\n      if (this.events) {\n        this.bindEvents();\n      }\n\n      this.initialized.emit(this.chart);\n    }\n    /**\n     * @ignore\n     * @private\n     * @param {?} changes\n     * @return {?}\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(changes) {\n      if (!this.type || !this.data) {\n        return;\n      }\n\n      if (!this.chart || 'type' in changes) {\n        this.renderChart();\n      } else if (changes.data || changes.options) {\n        /** @type {?} */\n        this.chart.update(this.data, this.options);\n      }\n    }\n    /**\n     * @ignore\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"bindEvents\",\n    value: function bindEvents() {\n      for (var _i = 0, _Object$keys = Object.keys(this.events); _i < _Object$keys.length; _i++) {\n        var event = _Object$keys[_i];\n        this.chart.on(event, this.events[event]);\n      }\n    }\n  }]);\n\n  return ChartistComponent;\n}();\n\nChartistComponent.ɵfac = function ChartistComponent_Factory(t) {\n  return new (t || ChartistComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nChartistComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: ChartistComponent,\n  selectors: [[\"x-chartist\"]],\n  inputs: {\n    data: \"data\",\n    type: \"type\",\n    options: \"options\",\n    responsiveOptions: \"responsiveOptions\",\n    events: \"events\"\n  },\n  outputs: {\n    initialized: \"initialized\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  decls: 0,\n  vars: 0,\n  template: function ChartistComponent_Template(rf, ctx) {},\n  styles: [\"[_nghost-%COMP%] {\\n        display: block;\\n      }\"]\n});\n/** @nocollapse */\n\nChartistComponent.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }];\n};\n\nChartistComponent.propDecorators = {\n  data: [{\n    type: Input\n  }],\n  type: [{\n    type: Input\n  }],\n  options: [{\n    type: Input\n  }],\n  responsiveOptions: [{\n    type: Input\n  }],\n  events: [{\n    type: Input\n  }],\n  initialized: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(ChartistComponent, [{\n    type: Component,\n    args: [{\n      selector: 'x-chartist',\n      template: '',\n      styles: [\"\\n      :host {\\n        display: block;\\n      }\\n    \"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }];\n  }, {\n    initialized: [{\n      type: Output\n    }],\n    data: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    options: [{\n      type: Input\n    }],\n    responsiveOptions: [{\n      type: Input\n    }],\n    events: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar ChartistModule = /*#__PURE__*/_createClass(function ChartistModule() {\n  _classCallCheck(this, ChartistModule);\n});\n\nChartistModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: ChartistModule\n});\nChartistModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function ChartistModule_Factory(t) {\n    return new (t || ChartistModule)();\n  },\n  imports: [[]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ChartistModule, {\n    declarations: [ChartistComponent],\n    exports: [ChartistComponent]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(ChartistModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [ChartistComponent],\n      imports: [],\n      exports: [ChartistComponent]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { ChartistComponent, ChartistModule };","map":{"version":3,"sources":["ng-chartist/lib/chartist.component.ts","ng-chartist/lib/chartist.module.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  SimpleChanges\n} from '@angular/core';\n\nimport * as Chartist from 'chartist';\nimport { IChartistBase, IChartOptions } from 'chartist';\n\n/**\n * Possible chart types\n */\nexport type ChartType = 'Pie' | 'Bar' | 'Line';\n\nexport type ChartInterfaces =\n  | Chartist.IChartistPieChart\n  | Chartist.IChartistBarChart\n  | Chartist.IChartistLineChart;\nexport type ChartOptions =\n  | Chartist.IBarChartOptions\n  | Chartist.ILineChartOptions\n  | Chartist.IPieChartOptions;\nexport type ResponsiveOptionTuple = Chartist.IResponsiveOptionTuple<\n  ChartOptions\n>;\nexport type ResponsiveOptions = ResponsiveOptionTuple[];\n\n/**\n * Represents chart events.\n */\nexport interface ChartEvent {\n  [eventName: string]: (data: any) => void;\n}\n\n/**\n * Angular component which renders Chartist chart.\n *\n * See Chartist {@link https://gionkunz.github.io/chartist-js/api-documentation.html API documentation} and\n * {@link https://gionkunz.github.io/chartist-js/examples.html examples} for more information.\n * ### Example\n ```html\n <x-chartist\n   [type]=\"type\"\n   [data]=\"data\"\n   [options]=\"options\"\n   [responsiveOptions]=\"responsiveOptions\"\n   [events]=\"events\"\n ></x-chartist>\n ```\n */\n@Component({\n  selector: 'x-chartist',\n  template: '',\n  styles: [\n    `\n      :host {\n        display: block;\n      }\n    `\n  ]\n})\nexport class ChartistComponent implements OnInit, OnChanges, OnDestroy {\n  /**\n   * The data object that needs to consist of a labels and a series array.\n   */\n  @Input()\n  data: Chartist.IChartistData;\n\n  /**\n   * Chartist chart type.\n   */\n  @Input()\n  type: ChartType;\n\n  /**\n   * The options object which overrides the default options.\n   */\n  @Input()\n  options: Chartist.IChartOptions;\n\n  /**\n   * An array of responsive option arrays which are a media query and options object pair: [[mediaQueryString, optionsObject],[more...]]\n   */\n  @Input()\n  responsiveOptions: ResponsiveOptions;\n\n  /**\n   * Events object where keys are Chartist event names and values are event handler functions.\n   *\n   * Supported events are: draw, optionsChanged, data, animationBegin, animationEnd, created.\n   *\n   * Event handler function will receive a data argument which contains event data.\n   */\n  @Input()\n  events: ChartEvent;\n\n  /**\n   * Event emitted after Chartist chart has been initialized.\n   *\n   * Event handler function will receive chart instance argument.\n   */\n  @Output()\n  initialized = new EventEmitter<ChartInterfaces>();\n\n  /** @ignore */\n  private chart: ChartInterfaces;\n\n  /** @ignore */\n  constructor(private elementRef: ElementRef) {}\n\n  /** @ignore */\n  ngOnInit(): void {\n    if (this.type && this.data) {\n      this.renderChart();\n    }\n  }\n\n  /** @ignore */\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update(changes);\n  }\n\n  /** @ignore */\n  ngOnDestroy(): void {\n    if (this.chart) {\n      this.chart.detach();\n      this.chart = null;\n    }\n  }\n\n  /** @ignore */\n  private renderChart() {\n    const nativeElement = this.elementRef.nativeElement;\n\n    if (!(this.type in Chartist)) {\n      throw new Error(`${this.type} is not a valid chart type`);\n    }\n\n    this.chart = (<any>Chartist)[this.type](\n      nativeElement,\n      this.data,\n      this.options,\n      this.responsiveOptions\n    );\n\n    if (this.events) {\n      this.bindEvents();\n    }\n\n    this.initialized.emit(this.chart);\n  }\n\n  /** @ignore */\n  private update(changes: SimpleChanges): void {\n    if (!this.type || !this.data) {\n      return;\n    }\n\n    if (!this.chart || 'type' in changes) {\n      this.renderChart();\n    } else if (changes.data || changes.options) {\n      (<IChartistBase<IChartOptions>>this.chart).update(\n        this.data,\n        this.options\n      );\n    }\n  }\n\n  /** @ignore */\n  private bindEvents(): void {\n    for (const event of Object.keys(this.events)) {\n      this.chart.on(event, this.events[event]);\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartistComponent } from './chartist.component';\n\n@NgModule({\n  declarations: [ChartistComponent],\n  imports: [],\n  exports: [ChartistComponent]\n})\nexport class ChartistModule {}\n"]},"metadata":{},"sourceType":"module"}