{"ast":null,"code":"import _slicedToArray from \"D:/Biz1-Market-0.01/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _createClass from \"D:/Biz1-Market-0.01/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"D:/Biz1-Market-0.01/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Inject, Optional, PLATFORM_ID, NgZone, NgModule } from '@angular/core';\nimport { Subject, of, Observable, from, merge } from 'rxjs';\nimport { observeOn, switchMap, map, shareReplay, first, switchMapTo, subscribeOn, filter } from 'rxjs/operators';\nimport * as i1 from '@angular/fire';\nimport { ɵAngularFireSchedulers, ɵkeepUnstableUntilFirstFactory, ɵfirebaseAppFactory, ɵfetchInstance, ɵlazySDKProxy, FIREBASE_OPTIONS, FIREBASE_APP_NAME, ɵapplyMixins } from '@angular/fire';\nimport { isPlatformServer } from '@angular/common';\nimport * as ɵngcc0 from '@angular/core';\nvar proxyPolyfillCompat = {\n  app: null,\n  applyActionCode: null,\n  checkActionCode: null,\n  confirmPasswordReset: null,\n  createUserWithEmailAndPassword: null,\n  currentUser: null,\n  fetchSignInMethodsForEmail: null,\n  isSignInWithEmailLink: null,\n  getRedirectResult: null,\n  languageCode: null,\n  settings: null,\n  onAuthStateChanged: null,\n  onIdTokenChanged: null,\n  sendSignInLinkToEmail: null,\n  sendPasswordResetEmail: null,\n  setPersistence: null,\n  signInAndRetrieveDataWithCredential: null,\n  signInAnonymously: null,\n  signInWithCredential: null,\n  signInWithCustomToken: null,\n  signInWithEmailAndPassword: null,\n  signInWithPhoneNumber: null,\n  signInWithEmailLink: null,\n  signInWithPopup: null,\n  signInWithRedirect: null,\n  signOut: null,\n  tenantId: null,\n  updateCurrentUser: null,\n  useDeviceLanguage: null,\n  useEmulator: null,\n  verifyPasswordResetCode: null\n};\nvar USE_EMULATOR = new InjectionToken('angularfire2.auth.use-emulator');\nvar SETTINGS = new InjectionToken('angularfire2.auth.settings');\nvar TENANT_ID = new InjectionToken('angularfire2.auth.tenant-id');\nvar LANGUAGE_CODE = new InjectionToken('angularfire2.auth.langugage-code');\nvar USE_DEVICE_LANGUAGE = new InjectionToken('angularfire2.auth.use-device-language');\nvar PERSISTENCE = new InjectionToken('angularfire.auth.persistence');\n\nvar AngularFireAuth = /*#__PURE__*/_createClass(function AngularFireAuth(options, nameOrConfig, // tslint:disable-next-line:ban-types\nplatformId, zone, _useEmulator, // can't use the tuple here\n_settings, // can't use firebase.auth.AuthSettings here\ntenantId, languageCode, useDeviceLanguage, persistence) {\n  _classCallCheck(this, AngularFireAuth);\n\n  var schedulers = new ɵAngularFireSchedulers(zone);\n  var keepUnstableUntilFirst = ɵkeepUnstableUntilFirstFactory(schedulers);\n  var logins = new Subject();\n  var auth = of(undefined).pipe(observeOn(schedulers.outsideAngular), switchMap(function () {\n    return zone.runOutsideAngular(function () {\n      return import('firebase/auth');\n    });\n  }), map(function () {\n    return ɵfirebaseAppFactory(options, zone, nameOrConfig);\n  }), map(function (app) {\n    return zone.runOutsideAngular(function () {\n      var useEmulator = _useEmulator;\n      var settings = _settings;\n      return ɵfetchInstance(\"\".concat(app.name, \".auth\"), 'AngularFireAuth', app, function () {\n        var auth = zone.runOutsideAngular(function () {\n          return app.auth();\n        });\n\n        if (useEmulator) {\n          // Firebase Auth doesn't conform to the useEmulator convention, let's smooth that over\n          auth.useEmulator(\"http://\".concat(useEmulator.join(':')));\n        }\n\n        if (tenantId) {\n          auth.tenantId = tenantId;\n        }\n\n        auth.languageCode = languageCode;\n\n        if (useDeviceLanguage) {\n          auth.useDeviceLanguage();\n        }\n\n        if (settings) {\n          for (var _i = 0, _Object$entries = Object.entries(settings); _i < _Object$entries.length; _i++) {\n            var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n                k = _Object$entries$_i[0],\n                v = _Object$entries$_i[1];\n\n            auth.settings[k] = v;\n          }\n        }\n\n        if (persistence) {\n          auth.setPersistence(persistence);\n        }\n\n        return auth;\n      }, [useEmulator, tenantId, languageCode, useDeviceLanguage, settings, persistence]);\n    });\n  }), shareReplay({\n    bufferSize: 1,\n    refCount: false\n  }));\n\n  if (isPlatformServer(platformId)) {\n    this.authState = this.user = this.idToken = this.idTokenResult = this.credential = of(null);\n  } else {\n    // HACK, as we're exporting auth.Auth, rather than auth, developers importing firebase.auth\n    //       (e.g, `import { auth } from 'firebase/app'`) are getting an undefined auth object unexpectedly\n    //       as we're completely lazy. Let's eagerly load the Auth SDK here.\n    //       There could potentially be race conditions still... but this greatly decreases the odds while\n    //       we reevaluate the API.\n    var _ = auth.pipe(first()).subscribe();\n\n    var redirectResult = auth.pipe(switchMap(function (auth) {\n      return auth.getRedirectResult().then(function (it) {\n        return it;\n      }, function () {\n        return null;\n      });\n    }), keepUnstableUntilFirst, shareReplay({\n      bufferSize: 1,\n      refCount: false\n    }));\n\n    var fromCallback = function fromCallback(cb) {\n      return new Observable(function (subscriber) {\n        return {\n          unsubscribe: zone.runOutsideAngular(function () {\n            return cb(subscriber);\n          })\n        };\n      });\n    };\n\n    var authStateChanged = auth.pipe(switchMap(function (auth) {\n      return fromCallback(auth.onAuthStateChanged.bind(auth));\n    }));\n    var idTokenChanged = auth.pipe(switchMap(function (auth) {\n      return fromCallback(auth.onIdTokenChanged.bind(auth));\n    }));\n    this.authState = redirectResult.pipe(switchMapTo(authStateChanged), subscribeOn(schedulers.outsideAngular), observeOn(schedulers.insideAngular));\n    this.user = redirectResult.pipe(switchMapTo(idTokenChanged), subscribeOn(schedulers.outsideAngular), observeOn(schedulers.insideAngular));\n    this.idToken = this.user.pipe(switchMap(function (user) {\n      return user ? from(user.getIdToken()) : of(null);\n    }));\n    this.idTokenResult = this.user.pipe(switchMap(function (user) {\n      return user ? from(user.getIdTokenResult()) : of(null);\n    }));\n    this.credential = merge(redirectResult, logins, // pipe in null authState to make credential zipable, just a weird devexp if\n    // authState and user go null to still have a credential\n    this.authState.pipe(filter(function (it) {\n      return !it;\n    }))).pipe( // handle the { user: { } } when a user is already logged in, rather have null\n    // TODO handle the type corcersion better\n    map(function (credential) {\n      return (credential === null || credential === void 0 ? void 0 : credential.user) ? credential : null;\n    }), subscribeOn(schedulers.outsideAngular), observeOn(schedulers.insideAngular));\n  }\n\n  return ɵlazySDKProxy(this, auth, zone, {\n    spy: {\n      apply: function apply(name, _, val) {\n        // If they call a signIn or createUser function listen into the promise\n        // this will give us the user credential, push onto the logins Subject\n        // to be consumed in .credential\n        if (name.startsWith('signIn') || name.startsWith('createUser')) {\n          // TODO fix the types, the trouble is UserCredential has everything optional\n          val.then(function (user) {\n            return logins.next(user);\n          });\n        }\n      }\n    }\n  });\n});\n\nAngularFireAuth.ɵfac = function AngularFireAuth_Factory(t) {\n  return new (t || AngularFireAuth)(ɵngcc0.ɵɵinject(FIREBASE_OPTIONS), ɵngcc0.ɵɵinject(FIREBASE_APP_NAME, 8), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(USE_EMULATOR, 8), ɵngcc0.ɵɵinject(SETTINGS, 8), ɵngcc0.ɵɵinject(TENANT_ID, 8), ɵngcc0.ɵɵinject(LANGUAGE_CODE, 8), ɵngcc0.ɵɵinject(USE_DEVICE_LANGUAGE, 8), ɵngcc0.ɵɵinject(PERSISTENCE, 8));\n};\n/** @nocollapse */\n\n\nAngularFireAuth.ɵprov = i0.ɵɵdefineInjectable({\n  factory: function AngularFireAuth_Factory() {\n    return new AngularFireAuth(i0.ɵɵinject(i1.FIREBASE_OPTIONS), i0.ɵɵinject(i1.FIREBASE_APP_NAME, 8), i0.ɵɵinject(i0.PLATFORM_ID), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(USE_EMULATOR, 8), i0.ɵɵinject(SETTINGS, 8), i0.ɵɵinject(TENANT_ID, 8), i0.ɵɵinject(LANGUAGE_CODE, 8), i0.ɵɵinject(USE_DEVICE_LANGUAGE, 8), i0.ɵɵinject(PERSISTENCE, 8));\n  },\n  token: AngularFireAuth,\n  providedIn: \"any\"\n});\n/** @nocollapse */\n\nAngularFireAuth.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [FIREBASE_OPTIONS]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [FIREBASE_APP_NAME]\n    }]\n  }, {\n    type: Object,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }, {\n    type: NgZone\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [USE_EMULATOR]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [SETTINGS]\n    }]\n  }, {\n    type: String,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [TENANT_ID]\n    }]\n  }, {\n    type: String,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [LANGUAGE_CODE]\n    }]\n  }, {\n    type: Boolean,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [USE_DEVICE_LANGUAGE]\n    }]\n  }, {\n    type: String,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [PERSISTENCE]\n    }]\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AngularFireAuth, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'any'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [FIREBASE_OPTIONS]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [FIREBASE_APP_NAME]\n      }]\n    }, {\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [USE_EMULATOR]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [SETTINGS]\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [TENANT_ID]\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [LANGUAGE_CODE]\n      }]\n    }, {\n      type: Boolean,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [USE_DEVICE_LANGUAGE]\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [PERSISTENCE]\n      }]\n    }];\n  }, null);\n})();\n\nɵapplyMixins(AngularFireAuth, [proxyPolyfillCompat]);\n\nvar AngularFireAuthModule = /*#__PURE__*/_createClass(function AngularFireAuthModule() {\n  _classCallCheck(this, AngularFireAuthModule);\n});\n\nAngularFireAuthModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: AngularFireAuthModule\n});\nAngularFireAuthModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function AngularFireAuthModule_Factory(t) {\n    return new (t || AngularFireAuthModule)();\n  },\n  providers: [AngularFireAuth]\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AngularFireAuthModule, [{\n    type: NgModule,\n    args: [{\n      providers: [AngularFireAuth]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { AngularFireAuth, AngularFireAuthModule, LANGUAGE_CODE, PERSISTENCE, SETTINGS, TENANT_ID, USE_DEVICE_LANGUAGE, USE_EMULATOR };","map":{"version":3,"sources":["../../../src/auth/base.ts","../../../src/auth/auth.ts","../../../src/auth/auth.module.ts","../../../src/auth/angular-fire-auth.ts"],"names":[],"mappings":"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","sourcesContent":["export const proxyPolyfillCompat = {\n  app: null,\n  applyActionCode: null,\n  checkActionCode: null,\n  confirmPasswordReset: null,\n  createUserWithEmailAndPassword: null,\n  currentUser: null,\n  fetchSignInMethodsForEmail: null,\n  isSignInWithEmailLink: null,\n  getRedirectResult: null,\n  languageCode: null,\n  settings: null,\n  onAuthStateChanged: null,\n  onIdTokenChanged: null,\n  sendSignInLinkToEmail: null,\n  sendPasswordResetEmail: null,\n  setPersistence: null,\n  signInAndRetrieveDataWithCredential: null,\n  signInAnonymously: null,\n  signInWithCredential: null,\n  signInWithCustomToken: null,\n  signInWithEmailAndPassword: null,\n  signInWithPhoneNumber: null,\n  signInWithEmailLink: null,\n  signInWithPopup: null,\n  signInWithRedirect: null,\n  signOut: null,\n  tenantId: null,\n  updateCurrentUser: null,\n  useDeviceLanguage: null,\n  useEmulator: null,\n  verifyPasswordResetCode: null,\n};\n","import { Injectable, Inject, Optional, NgZone, PLATFORM_ID, InjectionToken } from '@angular/core';\nimport { Observable, of, from, merge, Subject, Subscriber } from 'rxjs';\nimport { switchMap, map, observeOn, shareReplay, first, filter, switchMapTo, subscribeOn } from 'rxjs/operators';\nimport {\n  FIREBASE_OPTIONS,\n  FIREBASE_APP_NAME,\n  FirebaseOptions,\n  FirebaseAppConfig,\n  ɵPromiseProxy,\n  ɵlazySDKProxy,\n  ɵfirebaseAppFactory,\n  ɵAngularFireSchedulers,\n  ɵkeepUnstableUntilFirstFactory,\n  ɵapplyMixins\n} from '@angular/fire';\nimport firebase from 'firebase/app';\nimport { isPlatformServer } from '@angular/common';\nimport { proxyPolyfillCompat } from './base';\nimport { ɵfetchInstance } from '@angular/fire';\n\nexport interface AngularFireAuth extends ɵPromiseProxy<firebase.auth.Auth> {}\n\ntype UseEmulatorArguments = [string, number];\nexport const USE_EMULATOR = new InjectionToken<UseEmulatorArguments>('angularfire2.auth.use-emulator');\n\nexport const SETTINGS = new InjectionToken<firebase.auth.AuthSettings>('angularfire2.auth.settings');\nexport const TENANT_ID = new InjectionToken<string>('angularfire2.auth.tenant-id');\nexport const LANGUAGE_CODE = new InjectionToken<string>('angularfire2.auth.langugage-code');\nexport const USE_DEVICE_LANGUAGE = new InjectionToken<boolean>('angularfire2.auth.use-device-language');\nexport const PERSISTENCE = new InjectionToken<string>('angularfire.auth.persistence');\n\n@Injectable({\n  providedIn: 'any'\n})\nexport class AngularFireAuth {\n\n  /**\n   * Observable of authentication state; as of Firebase 4.0 this is only triggered via sign-in/out\n   */\n  public readonly authState: Observable<firebase.User|null>;\n\n  /**\n   * Observable of the currently signed-in user's JWT token used to identify the user to a Firebase service (or null).\n   */\n  public readonly idToken: Observable<string|null>;\n\n  /**\n   * Observable of the currently signed-in user (or null).\n   */\n  public readonly user: Observable<firebase.User|null>;\n\n  /**\n   * Observable of the currently signed-in user's IdTokenResult object which contains the ID token JWT string and other\n   * helper properties for getting different data associated with the token as well as all the decoded payload claims\n   * (or null).\n   */\n  public readonly idTokenResult: Observable<firebase.auth.IdTokenResult|null>;\n\n  /**\n   * Observable of the currently signed-in user's credential, or null\n   */\n  public readonly credential: Observable<Required<firebase.auth.UserCredential>|null>;\n\n  constructor(\n    @Inject(FIREBASE_OPTIONS) options: FirebaseOptions,\n    @Optional() @Inject(FIREBASE_APP_NAME) nameOrConfig: string|FirebaseAppConfig|null|undefined,\n    // tslint:disable-next-line:ban-types\n    @Inject(PLATFORM_ID) platformId: Object,\n    zone: NgZone,\n    @Optional() @Inject(USE_EMULATOR) _useEmulator: any, // can't use the tuple here\n    @Optional() @Inject(SETTINGS) _settings: any, // can't use firebase.auth.AuthSettings here\n    @Optional() @Inject(TENANT_ID) tenantId: string | null,\n    @Optional() @Inject(LANGUAGE_CODE) languageCode: string | null,\n    @Optional() @Inject(USE_DEVICE_LANGUAGE) useDeviceLanguage: boolean | null,\n    @Optional() @Inject(PERSISTENCE) persistence: string | null,\n  ) {\n    const schedulers = new ɵAngularFireSchedulers(zone);\n    const keepUnstableUntilFirst = ɵkeepUnstableUntilFirstFactory(schedulers);\n    const logins = new Subject<Required<firebase.auth.UserCredential>>();\n\n    const auth = of(undefined).pipe(\n      observeOn(schedulers.outsideAngular),\n      switchMap(() => zone.runOutsideAngular(() => import('firebase/auth'))),\n      map(() => ɵfirebaseAppFactory(options, zone, nameOrConfig)),\n      map(app => zone.runOutsideAngular(() => {\n        const useEmulator: UseEmulatorArguments | null = _useEmulator;\n        const settings: firebase.auth.AuthSettings | null = _settings;\n        return ɵfetchInstance(`${app.name}.auth`, 'AngularFireAuth', app, () => {\n          const auth = zone.runOutsideAngular(() => app.auth());\n          if (useEmulator) {\n            // Firebase Auth doesn't conform to the useEmulator convention, let's smooth that over\n            auth.useEmulator(`http://${useEmulator.join(':')}`);\n          }\n          if (tenantId) {\n            auth.tenantId = tenantId;\n          }\n          auth.languageCode = languageCode;\n          if (useDeviceLanguage) {\n            auth.useDeviceLanguage();\n          }\n          if (settings) {\n            for (const [k, v] of Object.entries(settings)) {\n              auth.settings[k] = v;\n            }\n          }\n          if (persistence) {\n            auth.setPersistence(persistence);\n          }\n          return auth;\n        }, [useEmulator, tenantId, languageCode, useDeviceLanguage, settings, persistence]);\n      })),\n      shareReplay({ bufferSize: 1, refCount: false }),\n    );\n\n    if (isPlatformServer(platformId)) {\n\n      this.authState = this.user = this.idToken = this.idTokenResult = this.credential = of(null);\n\n    } else {\n\n      // HACK, as we're exporting auth.Auth, rather than auth, developers importing firebase.auth\n      //       (e.g, `import { auth } from 'firebase/app'`) are getting an undefined auth object unexpectedly\n      //       as we're completely lazy. Let's eagerly load the Auth SDK here.\n      //       There could potentially be race conditions still... but this greatly decreases the odds while\n      //       we reevaluate the API.\n      const _ = auth.pipe(first()).subscribe();\n\n      const redirectResult = auth.pipe(\n        switchMap(auth => auth.getRedirectResult().then(it => it, () => null)),\n        keepUnstableUntilFirst,\n        shareReplay({ bufferSize: 1, refCount: false }),\n      );\n\n      const fromCallback = <T = any>(cb: (sub: Subscriber<T>) => () => void) => new Observable<T>(subscriber =>\n        ({ unsubscribe: zone.runOutsideAngular(() => cb(subscriber)) })\n      );\n\n      const authStateChanged = auth.pipe(\n        switchMap(auth => fromCallback(auth.onAuthStateChanged.bind(auth))),\n      );\n\n      const idTokenChanged = auth.pipe(\n        switchMap(auth => fromCallback(auth.onIdTokenChanged.bind(auth)))\n      );\n\n      this.authState = redirectResult.pipe(\n        switchMapTo(authStateChanged),\n        subscribeOn(schedulers.outsideAngular),\n        observeOn(schedulers.insideAngular),\n      );\n\n      this.user = redirectResult.pipe(\n        switchMapTo(idTokenChanged),\n        subscribeOn(schedulers.outsideAngular),\n        observeOn(schedulers.insideAngular),\n      );\n\n      this.idToken = this.user.pipe(\n        switchMap(user => user ? from(user.getIdToken()) : of(null))\n      );\n\n      this.idTokenResult = this.user.pipe(\n        switchMap(user => user ? from(user.getIdTokenResult()) : of(null))\n      );\n\n      this.credential = merge(\n        redirectResult,\n        logins,\n        // pipe in null authState to make credential zipable, just a weird devexp if\n        // authState and user go null to still have a credential\n        this.authState.pipe(filter(it => !it))\n      ).pipe(\n        // handle the { user: { } } when a user is already logged in, rather have null\n        // TODO handle the type corcersion better\n        map(credential => credential?.user ? credential as Required<firebase.auth.UserCredential> : null),\n        subscribeOn(schedulers.outsideAngular),\n        observeOn(schedulers.insideAngular),\n      );\n\n    }\n\n    return ɵlazySDKProxy(this, auth, zone, { spy: {\n      apply: (name, _, val) => {\n        // If they call a signIn or createUser function listen into the promise\n        // this will give us the user credential, push onto the logins Subject\n        // to be consumed in .credential\n        if (name.startsWith('signIn') || name.startsWith('createUser')) {\n          // TODO fix the types, the trouble is UserCredential has everything optional\n          val.then((user: firebase.auth.UserCredential) => logins.next(user as any));\n        }\n      }\n    }});\n\n  }\n\n}\n\nɵapplyMixins(AngularFireAuth, [proxyPolyfillCompat]);\n","import { NgModule } from '@angular/core';\nimport { AngularFireAuth } from './auth';\n\n@NgModule({\n  providers: [ AngularFireAuth ]\n})\nexport class AngularFireAuthModule { }\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"]},"metadata":{},"sourceType":"module"}