{"ast":null,"code":"import _createClass from \"D:/queen-supermarket/Biz1Market_EXE/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"D:/queen-supermarket/Biz1Market_EXE/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { Directive, Injectable, Component, ViewEncapsulation, ChangeDetectionStrategy, forwardRef, ChangeDetectorRef, Input, ElementRef, Optional, ViewChild, NgModule } from '@angular/core';\nimport { __decorate, __metadata } from 'tslib';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { InputBoolean } from 'ng-zorro-antd/core/util';\nimport { ReplaySubject, Subject } from 'rxjs';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { takeUntil } from 'rxjs/operators';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * Generated from: radio-button.directive.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nvar _c0 = [\"*\"];\nvar _c1 = [\"inputElement\"];\nvar _c2 = [\"nz-radio\", \"\"];\n\nvar NzRadioButtonDirective = /*#__PURE__*/_createClass(function NzRadioButtonDirective() {\n  _classCallCheck(this, NzRadioButtonDirective);\n});\n\nNzRadioButtonDirective.ɵfac = function NzRadioButtonDirective_Factory(t) {\n  return new (t || NzRadioButtonDirective)();\n};\n\nNzRadioButtonDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: NzRadioButtonDirective,\n  selectors: [[\"\", \"nz-radio-button\", \"\"]]\n});\n/**\n * @fileoverview added by tsickle\n * Generated from: radio.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nvar NzRadioService = /*#__PURE__*/function () {\n  function NzRadioService() {\n    _classCallCheck(this, NzRadioService);\n\n    this.selected$ = new ReplaySubject(1);\n    this.touched$ = new Subject();\n    this.disabled$ = new ReplaySubject(1);\n    this.name$ = new ReplaySubject(1);\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(NzRadioService, [{\n    key: \"touch\",\n    value: function touch() {\n      this.touched$.next();\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"select\",\n    value: function select(value) {\n      this.selected$.next(value);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"setDisabled\",\n    value: function setDisabled(value) {\n      this.disabled$.next(value);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"setName\",\n    value: function setName(value) {\n      this.name$.next(value);\n    }\n  }]);\n\n  return NzRadioService;\n}();\n\nNzRadioService.ɵfac = function NzRadioService_Factory(t) {\n  return new (t || NzRadioService)();\n};\n\nNzRadioService.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: NzRadioService,\n  factory: NzRadioService.ɵfac\n});\n\nif (false) {\n  /** @type {?} */\n  NzRadioService.prototype.selected$;\n  /** @type {?} */\n\n  NzRadioService.prototype.touched$;\n  /** @type {?} */\n\n  NzRadioService.prototype.disabled$;\n  /** @type {?} */\n\n  NzRadioService.prototype.name$;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: radio-group.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar NzRadioGroupComponent = /*#__PURE__*/function () {\n  /**\n   * @param {?} cdr\n   * @param {?} nzRadioService\n   */\n  function NzRadioGroupComponent(cdr, nzRadioService) {\n    _classCallCheck(this, NzRadioGroupComponent);\n\n    this.cdr = cdr;\n    this.nzRadioService = nzRadioService;\n    this.value = null;\n    this.destroy$ = new Subject();\n\n    this.onChange =\n    /**\n    * @return {?}\n    */\n    function () {};\n\n    this.onTouched =\n    /**\n    * @return {?}\n    */\n    function () {};\n\n    this.nzDisabled = false;\n    this.nzButtonStyle = 'outline';\n    this.nzSize = 'default';\n    this.nzName = null;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(NzRadioGroupComponent, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this = this;\n\n      this.nzRadioService.selected$.subscribe(\n      /**\n      * @param {?} value\n      * @return {?}\n      */\n      function (value) {\n        if (_this.value !== value) {\n          _this.value = value;\n\n          _this.onChange(_this.value);\n        }\n      });\n      this.nzRadioService.touched$.subscribe(\n      /**\n      * @return {?}\n      */\n      function () {\n        Promise.resolve().then(\n        /**\n        * @return {?}\n        */\n        function () {\n          return _this.onTouched();\n        });\n      });\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      var nzDisabled = changes.nzDisabled,\n          nzName = changes.nzName;\n\n      if (nzDisabled) {\n        this.nzRadioService.setDisabled(this.nzDisabled);\n      }\n\n      if (nzName) {\n        this.nzRadioService.setName(\n        /** @type {?} */\n        this.nzName);\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.destroy$.next();\n      this.destroy$.complete();\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      this.value = value;\n      this.nzRadioService.select(value);\n      this.cdr.markForCheck();\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(isDisabled) {\n      this.nzDisabled = isDisabled;\n      this.nzRadioService.setDisabled(isDisabled);\n      this.cdr.markForCheck();\n    }\n  }]);\n\n  return NzRadioGroupComponent;\n}();\n\nNzRadioGroupComponent.ɵfac = function NzRadioGroupComponent_Factory(t) {\n  return new (t || NzRadioGroupComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(NzRadioService));\n};\n\nNzRadioGroupComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: NzRadioGroupComponent,\n  selectors: [[\"nz-radio-group\"]],\n  hostVars: 8,\n  hostBindings: function NzRadioGroupComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"ant-radio-group\", true)(\"ant-radio-group-large\", ctx.nzSize === \"large\")(\"ant-radio-group-small\", ctx.nzSize === \"small\")(\"ant-radio-group-solid\", ctx.nzButtonStyle === \"solid\");\n    }\n  },\n  inputs: {\n    nzDisabled: \"nzDisabled\",\n    nzButtonStyle: \"nzButtonStyle\",\n    nzSize: \"nzSize\",\n    nzName: \"nzName\"\n  },\n  exportAs: [\"nzRadioGroup\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([NzRadioService, {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(\n    /**\n    * @return {?}\n    */\n    function () {\n      return NzRadioGroupComponent;\n    }),\n    multi: true\n  }]), ɵngcc0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c0,\n  decls: 1,\n  vars: 0,\n  template: function NzRadioGroupComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵprojection(0);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nNzRadioGroupComponent.ctorParameters = function () {\n  return [{\n    type: ChangeDetectorRef\n  }, {\n    type: NzRadioService\n  }];\n};\n\nNzRadioGroupComponent.propDecorators = {\n  nzDisabled: [{\n    type: Input\n  }],\n  nzButtonStyle: [{\n    type: Input\n  }],\n  nzSize: [{\n    type: Input\n  }],\n  nzName: [{\n    type: Input\n  }]\n};\n\n__decorate([InputBoolean(), __metadata(\"design:type\", Object)], NzRadioGroupComponent.prototype, \"nzDisabled\", void 0);\n\nif (false) {\n  /** @type {?} */\n  NzRadioGroupComponent.ngAcceptInputType_nzDisabled;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NzRadioGroupComponent.prototype.value;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NzRadioGroupComponent.prototype.destroy$;\n  /** @type {?} */\n\n  NzRadioGroupComponent.prototype.onChange;\n  /** @type {?} */\n\n  NzRadioGroupComponent.prototype.onTouched;\n  /** @type {?} */\n\n  NzRadioGroupComponent.prototype.nzDisabled;\n  /** @type {?} */\n\n  NzRadioGroupComponent.prototype.nzButtonStyle;\n  /** @type {?} */\n\n  NzRadioGroupComponent.prototype.nzSize;\n  /** @type {?} */\n\n  NzRadioGroupComponent.prototype.nzName;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NzRadioGroupComponent.prototype.cdr;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NzRadioGroupComponent.prototype.nzRadioService;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: radio.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar NzRadioComponent = /*#__PURE__*/function () {\n  /**\n   * @param {?} elementRef\n   * @param {?} cdr\n   * @param {?} focusMonitor\n   * @param {?} nzRadioService\n   * @param {?} nzRadioButtonDirective\n   */\n  function NzRadioComponent(elementRef, cdr, focusMonitor, nzRadioService, nzRadioButtonDirective) {\n    _classCallCheck(this, NzRadioComponent);\n\n    this.elementRef = elementRef;\n    this.cdr = cdr;\n    this.focusMonitor = focusMonitor;\n    this.nzRadioService = nzRadioService;\n    this.nzRadioButtonDirective = nzRadioButtonDirective;\n    this.isNgModel = false;\n    this.destroy$ = new Subject();\n    this.isChecked = false;\n    this.name = null;\n    this.isRadioButton = !!this.nzRadioButtonDirective;\n\n    this.onChange =\n    /**\n    * @return {?}\n    */\n    function () {};\n\n    this.onTouched =\n    /**\n    * @return {?}\n    */\n    function () {};\n\n    this.nzValue = null;\n    this.nzDisabled = false;\n    this.nzAutoFocus = false;\n  }\n  /**\n   * @param {?} event\n   * @return {?}\n   */\n\n\n  _createClass(NzRadioComponent, [{\n    key: \"onHostClick\",\n    value: function onHostClick(event) {\n      /** prevent label click triggered twice. **/\n      event.stopPropagation();\n      event.preventDefault();\n\n      if (!this.nzDisabled && !this.isChecked) {\n        if (this.nzRadioService) {\n          this.nzRadioService.select(this.nzValue);\n        }\n\n        if (this.isNgModel) {\n          this.isChecked = true;\n          this.onChange(true);\n        }\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this.focusMonitor.focusVia(\n      /** @type {?} */\n      this.inputElement, 'keyboard');\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      /** @type {?} */\n      this.inputElement.nativeElement.blur();\n    }\n    /**\n     * @param {?} disabled\n     * @return {?}\n     */\n\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(disabled) {\n      this.nzDisabled = disabled;\n      this.cdr.markForCheck();\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      this.isChecked = value;\n      this.cdr.markForCheck();\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this.isNgModel = true;\n      this.onChange = fn;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this2 = this;\n\n      if (this.nzRadioService) {\n        this.nzRadioService.name$.pipe(takeUntil(this.destroy$)).subscribe(\n        /**\n        * @param {?} name\n        * @return {?}\n        */\n        function (name) {\n          _this2.name = name;\n\n          _this2.cdr.markForCheck();\n        });\n        this.nzRadioService.disabled$.pipe(takeUntil(this.destroy$)).subscribe(\n        /**\n        * @param {?} disabled\n        * @return {?}\n        */\n        function (disabled) {\n          _this2.nzDisabled = disabled;\n\n          _this2.cdr.markForCheck();\n        });\n        this.nzRadioService.selected$.pipe(takeUntil(this.destroy$)).subscribe(\n        /**\n        * @param {?} value\n        * @return {?}\n        */\n        function (value) {\n          _this2.isChecked = _this2.nzValue === value;\n\n          _this2.cdr.markForCheck();\n        });\n      }\n\n      this.focusMonitor.monitor(this.elementRef, true).subscribe(\n      /**\n      * @param {?} focusOrigin\n      * @return {?}\n      */\n      function (focusOrigin) {\n        if (!focusOrigin) {\n          Promise.resolve().then(\n          /**\n          * @return {?}\n          */\n          function () {\n            return _this2.onTouched();\n          });\n\n          if (_this2.nzRadioService) {\n            _this2.nzRadioService.touch();\n          }\n        }\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      if (this.nzAutoFocus) {\n        this.focus();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.destroy$.next();\n      this.destroy$.complete();\n      this.focusMonitor.stopMonitoring(this.elementRef);\n    }\n  }]);\n\n  return NzRadioComponent;\n}();\n\nNzRadioComponent.ɵfac = function NzRadioComponent_Factory(t) {\n  return new (t || NzRadioComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(NzRadioService, 8), ɵngcc0.ɵɵdirectiveInject(NzRadioButtonDirective, 8));\n};\n\nNzRadioComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: NzRadioComponent,\n  selectors: [[\"\", \"nz-radio\", \"\"], [\"\", \"nz-radio-button\", \"\"]],\n  viewQuery: function NzRadioComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c1, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.inputElement = _t.first);\n    }\n  },\n  hostVars: 12,\n  hostBindings: function NzRadioComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function NzRadioComponent_click_HostBindingHandler($event) {\n        return ctx.onHostClick($event);\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"ant-radio-wrapper\", !ctx.isRadioButton)(\"ant-radio-button-wrapper\", ctx.isRadioButton)(\"ant-radio-wrapper-checked\", ctx.isChecked && !ctx.isRadioButton)(\"ant-radio-button-wrapper-checked\", ctx.isChecked && ctx.isRadioButton)(\"ant-radio-wrapper-disabled\", ctx.nzDisabled && !ctx.isRadioButton)(\"ant-radio-button-wrapper-disabled\", ctx.nzDisabled && ctx.isRadioButton);\n    }\n  },\n  inputs: {\n    nzValue: \"nzValue\",\n    nzDisabled: \"nzDisabled\",\n    nzAutoFocus: \"nzAutoFocus\"\n  },\n  exportAs: [\"nzRadio\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(\n    /**\n    * @return {?}\n    */\n    function () {\n      return NzRadioComponent;\n    }),\n    multi: true\n  }])],\n  attrs: _c2,\n  ngContentSelectors: _c0,\n  decls: 6,\n  vars: 24,\n  consts: [[\"type\", \"radio\", 3, \"disabled\", \"checked\"], [\"inputElement\", \"\"]],\n  template: function NzRadioComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"span\");\n      ɵngcc0.ɵɵelement(1, \"input\", 0, 1);\n      ɵngcc0.ɵɵelement(3, \"span\");\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(4, \"span\");\n      ɵngcc0.ɵɵprojection(5);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"ant-radio\", !ctx.isRadioButton)(\"ant-radio-checked\", ctx.isChecked && !ctx.isRadioButton)(\"ant-radio-disabled\", ctx.nzDisabled && !ctx.isRadioButton)(\"ant-radio-button\", ctx.isRadioButton)(\"ant-radio-button-checked\", ctx.isChecked && ctx.isRadioButton)(\"ant-radio-button-disabled\", ctx.nzDisabled && ctx.isRadioButton);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵclassProp(\"ant-radio-input\", !ctx.isRadioButton)(\"ant-radio-button-input\", ctx.isRadioButton);\n      ɵngcc0.ɵɵproperty(\"disabled\", ctx.nzDisabled)(\"checked\", ctx.isChecked);\n      ɵngcc0.ɵɵattribute(\"autofocus\", ctx.nzAutoFocus ? \"autofocus\" : null)(\"name\", ctx.name);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵclassProp(\"ant-radio-inner\", !ctx.isRadioButton)(\"ant-radio-button-inner\", ctx.isRadioButton);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nNzRadioComponent.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: FocusMonitor\n  }, {\n    type: NzRadioService,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: NzRadioButtonDirective,\n    decorators: [{\n      type: Optional\n    }]\n  }];\n};\n\nNzRadioComponent.propDecorators = {\n  inputElement: [{\n    type: ViewChild,\n    args: ['inputElement', {\n      static: false\n    }]\n  }],\n  nzValue: [{\n    type: Input\n  }],\n  nzDisabled: [{\n    type: Input\n  }],\n  nzAutoFocus: [{\n    type: Input\n  }]\n};\n\n__decorate([InputBoolean(), __metadata(\"design:type\", Object)], NzRadioComponent.prototype, \"nzDisabled\", void 0);\n\n__decorate([InputBoolean(), __metadata(\"design:type\", Object)], NzRadioComponent.prototype, \"nzAutoFocus\", void 0);\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NzRadioButtonDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[nz-radio-button]'\n    }]\n  }], null, null);\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NzRadioService, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NzRadioGroupComponent, [{\n    type: Component,\n    args: [{\n      selector: 'nz-radio-group',\n      exportAs: 'nzRadioGroup',\n      preserveWhitespaces: false,\n      template: \" <ng-content></ng-content> \",\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      providers: [NzRadioService, {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(\n        /**\n        * @return {?}\n        */\n        function () {\n          return NzRadioGroupComponent;\n        }),\n        multi: true\n      }],\n      host: {\n        '[class.ant-radio-group]': \"true\",\n        '[class.ant-radio-group-large]': \"nzSize === 'large'\",\n        '[class.ant-radio-group-small]': \"nzSize === 'small'\",\n        '[class.ant-radio-group-solid]': \"nzButtonStyle === 'solid'\"\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: NzRadioService\n    }];\n  }, {\n    nzDisabled: [{\n      type: Input\n    }],\n    nzButtonStyle: [{\n      type: Input\n    }],\n    nzSize: [{\n      type: Input\n    }],\n    nzName: [{\n      type: Input\n    }]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NzRadioComponent, [{\n    type: Component,\n    args: [{\n      selector: '[nz-radio],[nz-radio-button]',\n      exportAs: 'nzRadio',\n      preserveWhitespaces: false,\n      template: \"\\n    <span\\n      [class.ant-radio]=\\\"!isRadioButton\\\"\\n      [class.ant-radio-checked]=\\\"isChecked && !isRadioButton\\\"\\n      [class.ant-radio-disabled]=\\\"nzDisabled && !isRadioButton\\\"\\n      [class.ant-radio-button]=\\\"isRadioButton\\\"\\n      [class.ant-radio-button-checked]=\\\"isChecked && isRadioButton\\\"\\n      [class.ant-radio-button-disabled]=\\\"nzDisabled && isRadioButton\\\"\\n    >\\n      <input\\n        #inputElement\\n        type=\\\"radio\\\"\\n        [attr.autofocus]=\\\"nzAutoFocus ? 'autofocus' : null\\\"\\n        [class.ant-radio-input]=\\\"!isRadioButton\\\"\\n        [class.ant-radio-button-input]=\\\"isRadioButton\\\"\\n        [disabled]=\\\"nzDisabled\\\"\\n        [checked]=\\\"isChecked\\\"\\n        [attr.name]=\\\"name\\\"\\n      />\\n      <span [class.ant-radio-inner]=\\\"!isRadioButton\\\" [class.ant-radio-button-inner]=\\\"isRadioButton\\\"></span>\\n    </span>\\n    <span><ng-content></ng-content></span>\\n  \",\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(\n        /**\n        * @return {?}\n        */\n        function () {\n          return NzRadioComponent;\n        }),\n        multi: true\n      }],\n      host: {\n        '[class.ant-radio-wrapper]': '!isRadioButton',\n        '[class.ant-radio-button-wrapper]': 'isRadioButton',\n        '[class.ant-radio-wrapper-checked]': 'isChecked && !isRadioButton',\n        '[class.ant-radio-button-wrapper-checked]': 'isChecked && isRadioButton',\n        '[class.ant-radio-wrapper-disabled]': 'nzDisabled && !isRadioButton',\n        '[class.ant-radio-button-wrapper-disabled]': 'nzDisabled && isRadioButton',\n        '(click)': 'onHostClick($event)'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc1.FocusMonitor\n    }, {\n      type: NzRadioService,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: NzRadioButtonDirective,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    nzValue: [{\n      type: Input\n    }],\n    nzDisabled: [{\n      type: Input\n    }],\n    nzAutoFocus: [{\n      type: Input\n    }],\n    inputElement: [{\n      type: ViewChild,\n      args: ['inputElement', {\n        static: false\n      }]\n    }]\n  });\n})();\n\nif (false) {\n  /** @type {?} */\n  NzRadioComponent.ngAcceptInputType_nzDisabled;\n  /** @type {?} */\n\n  NzRadioComponent.ngAcceptInputType_nzAutoFocus;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NzRadioComponent.prototype.isNgModel;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NzRadioComponent.prototype.destroy$;\n  /** @type {?} */\n\n  NzRadioComponent.prototype.isChecked;\n  /** @type {?} */\n\n  NzRadioComponent.prototype.name;\n  /** @type {?} */\n\n  NzRadioComponent.prototype.isRadioButton;\n  /** @type {?} */\n\n  NzRadioComponent.prototype.onChange;\n  /** @type {?} */\n\n  NzRadioComponent.prototype.onTouched;\n  /** @type {?} */\n\n  NzRadioComponent.prototype.inputElement;\n  /** @type {?} */\n\n  NzRadioComponent.prototype.nzValue;\n  /** @type {?} */\n\n  NzRadioComponent.prototype.nzDisabled;\n  /** @type {?} */\n\n  NzRadioComponent.prototype.nzAutoFocus;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NzRadioComponent.prototype.elementRef;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NzRadioComponent.prototype.cdr;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NzRadioComponent.prototype.focusMonitor;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NzRadioComponent.prototype.nzRadioService;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NzRadioComponent.prototype.nzRadioButtonDirective;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: radio.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar NzRadioModule = /*#__PURE__*/_createClass(function NzRadioModule() {\n  _classCallCheck(this, NzRadioModule);\n});\n\nNzRadioModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: NzRadioModule\n});\nNzRadioModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function NzRadioModule_Factory(t) {\n    return new (t || NzRadioModule)();\n  },\n  imports: [[CommonModule, FormsModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NzRadioModule, {\n    declarations: function declarations() {\n      return [NzRadioComponent, NzRadioButtonDirective, NzRadioGroupComponent];\n    },\n    imports: function imports() {\n      return [CommonModule, FormsModule];\n    },\n    exports: function exports() {\n      return [NzRadioComponent, NzRadioButtonDirective, NzRadioGroupComponent];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NzRadioModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, FormsModule],\n      exports: [NzRadioComponent, NzRadioButtonDirective, NzRadioGroupComponent],\n      declarations: [NzRadioComponent, NzRadioButtonDirective, NzRadioGroupComponent]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: ng-zorro-antd-radio.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { NzRadioButtonDirective, NzRadioComponent, NzRadioGroupComponent, NzRadioModule, NzRadioService };","map":{"version":3,"sources":["ng-zorro-antd/radio/radio-button.directive.ts","ng-zorro-antd/radio/radio.service.ts","ng-zorro-antd/radio/radio-group.component.ts","ng-zorro-antd/radio/radio.component.ts","ng-zorro-antd/radio/radio.module.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { Directive } from '@angular/core';\n\n@Directive({\n  selector: '[nz-radio-button]'\n})\nexport class NzRadioButtonDirective {}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nimport { Injectable } from '@angular/core';\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\nimport { ReplaySubject, Subject } from 'rxjs';\n\n@Injectable()\nexport class NzRadioService {\n  selected$ = new ReplaySubject<NzSafeAny>(1);\n  touched$ = new Subject<void>();\n  disabled$ = new ReplaySubject<boolean>(1);\n  name$ = new ReplaySubject<string>(1);\n  touch(): void {\n    this.touched$.next();\n  }\n  select(value: NzSafeAny): void {\n    this.selected$.next(value);\n  }\n  setDisabled(value: boolean): void {\n    this.disabled$.next(value);\n  }\n  setName(value: string): void {\n    this.name$.next(value);\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  forwardRef,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { BooleanInput, NzSafeAny, NzSizeLDSType, OnChangeType, OnTouchedType } from 'ng-zorro-antd/core/types';\nimport { InputBoolean } from 'ng-zorro-antd/core/util';\nimport { Subject } from 'rxjs';\nimport { NzRadioService } from './radio.service';\n\nexport type NzRadioButtonStyle = 'outline' | 'solid';\n\n@Component({\n  selector: 'nz-radio-group',\n  exportAs: 'nzRadioGroup',\n  preserveWhitespaces: false,\n  template: ` <ng-content></ng-content> `,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [\n    NzRadioService,\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => NzRadioGroupComponent),\n      multi: true\n    }\n  ],\n  host: {\n    '[class.ant-radio-group]': `true`,\n    '[class.ant-radio-group-large]': `nzSize === 'large'`,\n    '[class.ant-radio-group-small]': `nzSize === 'small'`,\n    '[class.ant-radio-group-solid]': `nzButtonStyle === 'solid'`\n  }\n})\nexport class NzRadioGroupComponent implements OnInit, ControlValueAccessor, OnDestroy, OnChanges {\n  static ngAcceptInputType_nzDisabled: BooleanInput;\n\n  private value: NzSafeAny | null = null;\n  private destroy$ = new Subject();\n  onChange: OnChangeType = () => {};\n  onTouched: OnTouchedType = () => {};\n  @Input() @InputBoolean() nzDisabled = false;\n  @Input() nzButtonStyle: NzRadioButtonStyle = 'outline';\n  @Input() nzSize: NzSizeLDSType = 'default';\n  @Input() nzName: string | null = null;\n\n  constructor(private cdr: ChangeDetectorRef, private nzRadioService: NzRadioService) {}\n\n  ngOnInit(): void {\n    this.nzRadioService.selected$.subscribe(value => {\n      if (this.value !== value) {\n        this.value = value;\n        this.onChange(this.value);\n      }\n    });\n    this.nzRadioService.touched$.subscribe(() => {\n      Promise.resolve().then(() => this.onTouched());\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    const { nzDisabled, nzName } = changes;\n    if (nzDisabled) {\n      this.nzRadioService.setDisabled(this.nzDisabled);\n    }\n    if (nzName) {\n      this.nzRadioService.setName(this.nzName!);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  writeValue(value: NzSafeAny): void {\n    this.value = value;\n    this.nzRadioService.select(value);\n    this.cdr.markForCheck();\n  }\n\n  registerOnChange(fn: OnChangeType): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: OnTouchedType): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.nzDisabled = isDisabled;\n    this.nzRadioService.setDisabled(isDisabled);\n    this.cdr.markForCheck();\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { BooleanInput, NzSafeAny, OnChangeType, OnTouchedType } from 'ng-zorro-antd/core/types';\nimport { InputBoolean } from 'ng-zorro-antd/core/util';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { NzRadioButtonDirective } from './radio-button.directive';\nimport { NzRadioService } from './radio.service';\n\n@Component({\n  selector: '[nz-radio],[nz-radio-button]',\n  exportAs: 'nzRadio',\n  preserveWhitespaces: false,\n  template: `\n    <span\n      [class.ant-radio]=\"!isRadioButton\"\n      [class.ant-radio-checked]=\"isChecked && !isRadioButton\"\n      [class.ant-radio-disabled]=\"nzDisabled && !isRadioButton\"\n      [class.ant-radio-button]=\"isRadioButton\"\n      [class.ant-radio-button-checked]=\"isChecked && isRadioButton\"\n      [class.ant-radio-button-disabled]=\"nzDisabled && isRadioButton\"\n    >\n      <input\n        #inputElement\n        type=\"radio\"\n        [attr.autofocus]=\"nzAutoFocus ? 'autofocus' : null\"\n        [class.ant-radio-input]=\"!isRadioButton\"\n        [class.ant-radio-button-input]=\"isRadioButton\"\n        [disabled]=\"nzDisabled\"\n        [checked]=\"isChecked\"\n        [attr.name]=\"name\"\n      />\n      <span [class.ant-radio-inner]=\"!isRadioButton\" [class.ant-radio-button-inner]=\"isRadioButton\"></span>\n    </span>\n    <span><ng-content></ng-content></span>\n  `,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => NzRadioComponent),\n      multi: true\n    }\n  ],\n  host: {\n    '[class.ant-radio-wrapper]': '!isRadioButton',\n    '[class.ant-radio-button-wrapper]': 'isRadioButton',\n    '[class.ant-radio-wrapper-checked]': 'isChecked && !isRadioButton',\n    '[class.ant-radio-button-wrapper-checked]': 'isChecked && isRadioButton',\n    '[class.ant-radio-wrapper-disabled]': 'nzDisabled && !isRadioButton',\n    '[class.ant-radio-button-wrapper-disabled]': 'nzDisabled && isRadioButton',\n    '(click)': 'onHostClick($event)'\n  }\n})\nexport class NzRadioComponent implements ControlValueAccessor, AfterViewInit, OnDestroy, OnInit {\n  static ngAcceptInputType_nzDisabled: BooleanInput;\n  static ngAcceptInputType_nzAutoFocus: BooleanInput;\n\n  private isNgModel = false;\n  private destroy$ = new Subject<void>();\n  isChecked = false;\n  name: string | null = null;\n  isRadioButton = !!this.nzRadioButtonDirective;\n  onChange: OnChangeType = () => {};\n  onTouched: OnTouchedType = () => {};\n  @ViewChild('inputElement', { static: false }) inputElement?: ElementRef;\n  @Input() nzValue: NzSafeAny | null = null;\n  @Input() @InputBoolean() nzDisabled = false;\n  @Input() @InputBoolean() nzAutoFocus = false;\n\n  onHostClick(event: MouseEvent): void {\n    /** prevent label click triggered twice. **/\n    event.stopPropagation();\n    event.preventDefault();\n    if (!this.nzDisabled && !this.isChecked) {\n      if (this.nzRadioService) {\n        this.nzRadioService.select(this.nzValue);\n      }\n      if (this.isNgModel) {\n        this.isChecked = true;\n        this.onChange(true);\n      }\n    }\n  }\n\n  focus(): void {\n    this.focusMonitor.focusVia(this.inputElement!, 'keyboard');\n  }\n\n  blur(): void {\n    this.inputElement!.nativeElement.blur();\n  }\n\n  constructor(\n    private elementRef: ElementRef,\n    private cdr: ChangeDetectorRef,\n    private focusMonitor: FocusMonitor,\n    @Optional() private nzRadioService: NzRadioService,\n    @Optional() private nzRadioButtonDirective: NzRadioButtonDirective\n  ) {}\n\n  setDisabledState(disabled: boolean): void {\n    this.nzDisabled = disabled;\n    this.cdr.markForCheck();\n  }\n\n  writeValue(value: boolean): void {\n    this.isChecked = value;\n    this.cdr.markForCheck();\n  }\n\n  registerOnChange(fn: OnChangeType): void {\n    this.isNgModel = true;\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: OnTouchedType): void {\n    this.onTouched = fn;\n  }\n\n  ngOnInit(): void {\n    if (this.nzRadioService) {\n      this.nzRadioService.name$.pipe(takeUntil(this.destroy$)).subscribe(name => {\n        this.name = name;\n        this.cdr.markForCheck();\n      });\n      this.nzRadioService.disabled$.pipe(takeUntil(this.destroy$)).subscribe(disabled => {\n        this.nzDisabled = disabled;\n        this.cdr.markForCheck();\n      });\n      this.nzRadioService.selected$.pipe(takeUntil(this.destroy$)).subscribe(value => {\n        this.isChecked = this.nzValue === value;\n        this.cdr.markForCheck();\n      });\n    }\n    this.focusMonitor.monitor(this.elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        Promise.resolve().then(() => this.onTouched());\n        if (this.nzRadioService) {\n          this.nzRadioService.touch();\n        }\n      }\n    });\n  }\n\n  ngAfterViewInit(): void {\n    if (this.nzAutoFocus) {\n      this.focus();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n    this.focusMonitor.stopMonitoring(this.elementRef);\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { NzRadioButtonDirective } from './radio-button.directive';\nimport { NzRadioGroupComponent } from './radio-group.component';\nimport { NzRadioComponent } from './radio.component';\n\n@NgModule({\n  imports: [CommonModule, FormsModule],\n  exports: [NzRadioComponent, NzRadioButtonDirective, NzRadioGroupComponent],\n  declarations: [NzRadioComponent, NzRadioButtonDirective, NzRadioGroupComponent]\n})\nexport class NzRadioModule {}\n"]},"metadata":{},"sourceType":"module"}