{"ast":null,"code":"import _slicedToArray from \"D:/master-sp-new/Biz1Maket_Single_Store/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _createClass from \"D:/master-sp-new/Biz1Maket_Single_Store/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"D:/master-sp-new/Biz1Maket_Single_Store/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { createAction, props, select, Store, createSelector } from '@ngrx/store';\nimport { InjectionToken, NgModule, ErrorHandler, Inject } from '@angular/core';\nimport { NavigationStart, RoutesRecognized, NavigationCancel, NavigationError, NavigationEnd, Router } from '@angular/router';\nimport { withLatestFrom } from 'rxjs/operators';\n/**\n * @fileoverview added by tsickle\n * Generated from: src/actions.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * An action dispatched when a router navigation request is fired.\n * @type {?}\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@ngrx/store';\nimport * as ɵngcc2 from '@angular/router';\nvar ROUTER_REQUEST = '@ngrx/router-store/request';\n/** @type {?} */\n\nvar routerRequestAction = createAction(ROUTER_REQUEST, props());\n/**\n * An action dispatched when the router navigates.\n * @type {?}\n */\n\nvar ROUTER_NAVIGATION = '@ngrx/router-store/navigation';\n/** @type {?} */\n\nvar routerNavigationAction = createAction(ROUTER_NAVIGATION, props());\n/**\n * An action dispatched when the router cancels navigation.\n * @type {?}\n */\n\nvar ROUTER_CANCEL = '@ngrx/router-store/cancel';\n/** @type {?} */\n\nvar routerCancelAction = createAction(ROUTER_CANCEL, props());\n/**\n * An action dispatched when the router errors.\n * @type {?}\n */\n\nvar ROUTER_ERROR = '@ngrx/router-store/error';\n/** @type {?} */\n\nvar routerErrorAction = createAction(ROUTER_ERROR, props());\n/**\n * An action dispatched after navigation has ended and new route is active.\n * @type {?}\n */\n\nvar ROUTER_NAVIGATED = '@ngrx/router-store/navigated';\n/** @type {?} */\n\nvar routerNavigatedAction = createAction(ROUTER_NAVIGATED, props());\n/**\n * @fileoverview added by tsickle\n * Generated from: src/reducer.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @template T\n * @param {?} state\n * @param {?} action\n * @return {?}\n */\n\nfunction routerReducer(state, action) {\n  // Allow compilation with strictFunctionTypes - ref: #1344\n\n  /** @type {?} */\n  var routerAction =\n  /** @type {?} */\n  action;\n\n  switch (routerAction.type) {\n    case ROUTER_NAVIGATION:\n    case ROUTER_ERROR:\n    case ROUTER_CANCEL:\n      return {\n        state: routerAction.payload.routerState,\n        navigationId: routerAction.payload.event.id\n      };\n\n    default:\n      return (\n        /** @type {?} */\n        state\n      );\n  }\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/serializers/base.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Simple router state.\n * All custom router states / state serializers should have at least\n * the properties of this interface.\n * @record\n */\n\n\nfunction BaseRouterStoreState() {}\n\nif (false) {\n  /** @type {?} */\n  BaseRouterStoreState.prototype.url;\n}\n/**\n * @abstract\n * @template T\n */\n\n\nvar RouterStateSerializer = /*#__PURE__*/_createClass(function RouterStateSerializer() {\n  _classCallCheck(this, RouterStateSerializer);\n});\n\nif (false) {\n  /**\n   * @abstract\n   * @param {?} routerState\n   * @return {?}\n   */\n  RouterStateSerializer.prototype.serialize = function (routerState) {};\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/serializers/default_serializer.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @record\n */\n\n\nfunction SerializedRouterStateSnapshot() {}\n\nif (false) {\n  /** @type {?} */\n  SerializedRouterStateSnapshot.prototype.root;\n  /** @type {?} */\n\n  SerializedRouterStateSnapshot.prototype.url;\n}\n\nvar DefaultRouterStateSerializer = /*#__PURE__*/function () {\n  function DefaultRouterStateSerializer() {\n    _classCallCheck(this, DefaultRouterStateSerializer);\n  }\n\n  _createClass(DefaultRouterStateSerializer, [{\n    key: \"serialize\",\n    value:\n    /**\n     * @param {?} routerState\n     * @return {?}\n     */\n    function serialize(routerState) {\n      return {\n        root: this.serializeRoute(routerState.root),\n        url: routerState.url\n      };\n    }\n    /**\n     * @private\n     * @param {?} route\n     * @return {?}\n     */\n\n  }, {\n    key: \"serializeRoute\",\n    value: function serializeRoute(route) {\n      var _this = this;\n\n      /** @type {?} */\n      var children = route.children.map(\n      /**\n      * @param {?} c\n      * @return {?}\n      */\n      function (c) {\n        return _this.serializeRoute(c);\n      });\n      return {\n        params: route.params,\n        paramMap: route.paramMap,\n        data: route.data,\n        url: route.url,\n        outlet: route.outlet,\n        routeConfig: route.routeConfig ? {\n          component: route.routeConfig.component,\n          path: route.routeConfig.path,\n          pathMatch: route.routeConfig.pathMatch,\n          redirectTo: route.routeConfig.redirectTo,\n          outlet: route.routeConfig.outlet\n        } : null,\n        queryParams: route.queryParams,\n        queryParamMap: route.queryParamMap,\n        fragment: route.fragment,\n        component:\n        /** @type {?} */\n        route.routeConfig ? route.routeConfig.component : undefined,\n        root:\n        /** @type {?} */\n        undefined,\n        parent:\n        /** @type {?} */\n        undefined,\n        firstChild: children[0],\n        pathFromRoot:\n        /** @type {?} */\n        undefined,\n        children: children\n      };\n    }\n  }]);\n\n  return DefaultRouterStateSerializer;\n}();\n/**\n * @fileoverview added by tsickle\n * Generated from: src/serializers/minimal_serializer.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @record\n */\n\n\nfunction MinimalActivatedRouteSnapshot() {}\n\nif (false) {\n  /** @type {?} */\n  MinimalActivatedRouteSnapshot.prototype.routeConfig;\n  /** @type {?} */\n\n  MinimalActivatedRouteSnapshot.prototype.url;\n  /** @type {?} */\n\n  MinimalActivatedRouteSnapshot.prototype.params;\n  /** @type {?} */\n\n  MinimalActivatedRouteSnapshot.prototype.queryParams;\n  /** @type {?} */\n\n  MinimalActivatedRouteSnapshot.prototype.fragment;\n  /** @type {?} */\n\n  MinimalActivatedRouteSnapshot.prototype.data;\n  /** @type {?} */\n\n  MinimalActivatedRouteSnapshot.prototype.outlet;\n  /** @type {?|undefined} */\n\n  MinimalActivatedRouteSnapshot.prototype.firstChild;\n  /** @type {?} */\n\n  MinimalActivatedRouteSnapshot.prototype.children;\n}\n/**\n * @record\n */\n\n\nfunction MinimalRouterStateSnapshot() {}\n\nif (false) {\n  /** @type {?} */\n  MinimalRouterStateSnapshot.prototype.root;\n  /** @type {?} */\n\n  MinimalRouterStateSnapshot.prototype.url;\n}\n\nvar MinimalRouterStateSerializer = /*#__PURE__*/function () {\n  function MinimalRouterStateSerializer() {\n    _classCallCheck(this, MinimalRouterStateSerializer);\n  }\n\n  _createClass(MinimalRouterStateSerializer, [{\n    key: \"serialize\",\n    value:\n    /**\n     * @param {?} routerState\n     * @return {?}\n     */\n    function serialize(routerState) {\n      return {\n        root: this.serializeRoute(routerState.root),\n        url: routerState.url\n      };\n    }\n    /**\n     * @private\n     * @param {?} route\n     * @return {?}\n     */\n\n  }, {\n    key: \"serializeRoute\",\n    value: function serializeRoute(route) {\n      var _this2 = this;\n\n      /** @type {?} */\n      var children = route.children.map(\n      /**\n      * @param {?} c\n      * @return {?}\n      */\n      function (c) {\n        return _this2.serializeRoute(c);\n      });\n      return {\n        params: route.params,\n        data: route.data,\n        url: route.url,\n        outlet: route.outlet,\n        routeConfig: route.routeConfig ? {\n          path: route.routeConfig.path,\n          pathMatch: route.routeConfig.pathMatch,\n          redirectTo: route.routeConfig.redirectTo,\n          outlet: route.routeConfig.outlet\n        } : null,\n        queryParams: route.queryParams,\n        fragment: route.fragment,\n        firstChild: children[0],\n        children: children\n      };\n    }\n  }]);\n\n  return MinimalRouterStateSerializer;\n}();\n/**\n * @fileoverview added by tsickle\n * Generated from: src/router_store_module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @enum {number} */\n\n\nvar RouterState = {\n  Full: 0,\n  Minimal: 1\n};\n/**\n * @record\n * @template T\n */\n\nfunction StoreRouterConfig() {}\n\nif (false) {\n  /** @type {?|undefined} */\n  StoreRouterConfig.prototype.stateKey;\n  /** @type {?|undefined} */\n\n  StoreRouterConfig.prototype.serializer;\n  /**\n   * By default, ROUTER_NAVIGATION is dispatched before guards and resolvers run.\n   * Therefore, the action could run too soon, for example\n   * there may be a navigation cancel due to a guard saying the navigation is not allowed.\n   * To run ROUTER_NAVIGATION after guards and resolvers,\n   * set this property to NavigationActionTiming.PostActivation.\n   * @type {?|undefined}\n   */\n\n  StoreRouterConfig.prototype.navigationActionTiming;\n  /**\n   * Decides which router serializer should be used, if there is none provided, and the metadata on the dispatched \\@ngrx/router-store action payload.\n   * Set to `Full` to use the `DefaultRouterStateSerializer` and to set the angular router events as payload.\n   * Set to `Minimal` to use the `MinimalRouterStateSerializer` and to set a minimal router event with the navigation id and url as payload.\n   * @type {?|undefined}\n   */\n\n  StoreRouterConfig.prototype.routerState;\n}\n/**\n * @record\n */\n\n\nfunction StoreRouterActionPayload() {}\n\nif (false) {\n  /** @type {?} */\n  StoreRouterActionPayload.prototype.event;\n  /** @type {?|undefined} */\n\n  StoreRouterActionPayload.prototype.routerState;\n  /** @type {?|undefined} */\n\n  StoreRouterActionPayload.prototype.storeState;\n}\n/** @enum {number} */\n\n\nvar NavigationActionTiming = {\n  PreActivation: 1,\n  PostActivation: 2\n};\nNavigationActionTiming[NavigationActionTiming.PreActivation] = 'PreActivation';\nNavigationActionTiming[NavigationActionTiming.PostActivation] = 'PostActivation';\n/** @type {?} */\n\nvar _ROUTER_CONFIG = new InjectionToken('@ngrx/router-store Internal Configuration');\n/** @type {?} */\n\n\nvar ROUTER_CONFIG = new InjectionToken('@ngrx/router-store Configuration');\n/** @type {?} */\n\nvar DEFAULT_ROUTER_FEATURENAME = 'router';\n/**\n * @param {?} config\n * @return {?}\n */\n\nfunction _createRouterConfig(config) {\n  return Object.assign({\n    stateKey: DEFAULT_ROUTER_FEATURENAME,\n    serializer: MinimalRouterStateSerializer,\n    navigationActionTiming: NavigationActionTiming.PreActivation\n  }, config);\n}\n/** @enum {number} */\n\n\nvar RouterTrigger = {\n  NONE: 1,\n  ROUTER: 2,\n  STORE: 3\n};\nRouterTrigger[RouterTrigger.NONE] = 'NONE';\nRouterTrigger[RouterTrigger.ROUTER] = 'ROUTER';\nRouterTrigger[RouterTrigger.STORE] = 'STORE';\n/**\n * Connects RouterModule with StoreModule.\n *\n * During the navigation, before any guards or resolvers run, the router will dispatch\n * a ROUTER_NAVIGATION action, which has the following signature:\n *\n * ```\n * export type RouterNavigationPayload = {\n *   routerState: SerializedRouterStateSnapshot,\n *   event: RoutesRecognized\n * }\n * ```\n *\n * Either a reducer or an effect can be invoked in response to this action.\n * If the invoked reducer throws, the navigation will be canceled.\n *\n * If navigation gets canceled because of a guard, a ROUTER_CANCEL action will be\n * dispatched. If navigation results in an error, a ROUTER_ERROR action will be dispatched.\n *\n * Both ROUTER_CANCEL and ROUTER_ERROR contain the store state before the navigation\n * which can be used to restore the consistency of the store.\n *\n * Usage:\n *\n * ```typescript\n * \\@NgModule({\n *   declarations: [AppCmp, SimpleCmp],\n *   imports: [\n *     BrowserModule,\n *     StoreModule.forRoot(mapOfReducers),\n *     RouterModule.forRoot([\n *       { path: '', component: SimpleCmp },\n *       { path: 'next', component: SimpleCmp }\n *     ]),\n *     StoreRouterConnectingModule.forRoot()\n *   ],\n *   bootstrap: [AppCmp]\n * })\n * export class AppModule {\n * }\n * ```\n */\n\nvar StoreRouterConnectingModule = /*#__PURE__*/function () {\n  /**\n   * @param {?} store\n   * @param {?} router\n   * @param {?} serializer\n   * @param {?} errorHandler\n   * @param {?} config\n   */\n  function StoreRouterConnectingModule(store, router, serializer, errorHandler, config) {\n    _classCallCheck(this, StoreRouterConnectingModule);\n\n    this.store = store;\n    this.router = router;\n    this.serializer = serializer;\n    this.errorHandler = errorHandler;\n    this.config = config;\n    this.lastEvent = null;\n    this.routerState = null;\n    this.trigger = RouterTrigger.NONE;\n    this.stateKey =\n    /** @type {?} */\n    this.config.stateKey;\n    this.setUpStoreStateListener();\n    this.setUpRouterEventsListener();\n  }\n  /**\n   * @template T\n   * @param {?=} config\n   * @return {?}\n   */\n\n\n  _createClass(StoreRouterConnectingModule, [{\n    key: \"setUpStoreStateListener\",\n    value:\n    /**\n     * @private\n     * @return {?}\n     */\n    function setUpStoreStateListener() {\n      var _this3 = this;\n\n      this.store.pipe(select(\n      /** @type {?} */\n      this.stateKey), withLatestFrom(this.store)).subscribe(\n      /**\n      * @param {?} __0\n      * @return {?}\n      */\n      function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            routerStoreState = _ref2[0],\n            storeState = _ref2[1];\n\n        _this3.navigateIfNeeded(routerStoreState, storeState);\n      });\n    }\n    /**\n     * @private\n     * @param {?} routerStoreState\n     * @param {?} storeState\n     * @return {?}\n     */\n\n  }, {\n    key: \"navigateIfNeeded\",\n    value: function navigateIfNeeded(routerStoreState, storeState) {\n      var _this4 = this;\n\n      if (!routerStoreState || !routerStoreState.state) {\n        return;\n      }\n\n      if (this.trigger === RouterTrigger.ROUTER) {\n        return;\n      }\n\n      if (this.lastEvent instanceof NavigationStart) {\n        return;\n      }\n      /** @type {?} */\n\n\n      var url = routerStoreState.state.url;\n\n      if (!isSameUrl(this.router.url, url)) {\n        this.storeState = storeState;\n        this.trigger = RouterTrigger.STORE;\n        this.router.navigateByUrl(url).catch(\n        /**\n        * @param {?} error\n        * @return {?}\n        */\n        function (error) {\n          _this4.errorHandler.handleError(error);\n        });\n      }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"setUpRouterEventsListener\",\n    value: function setUpRouterEventsListener() {\n      var _this5 = this;\n\n      /** @type {?} */\n      var dispatchNavLate = this.config.navigationActionTiming === NavigationActionTiming.PostActivation;\n      /** @type {?} */\n\n      var routesRecognized;\n      this.router.events.pipe(withLatestFrom(this.store)).subscribe(\n      /**\n      * @param {?} __0\n      * @return {?}\n      */\n      function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n            event = _ref4[0],\n            storeState = _ref4[1];\n\n        _this5.lastEvent = event;\n\n        if (event instanceof NavigationStart) {\n          _this5.routerState = _this5.serializer.serialize(_this5.router.routerState.snapshot);\n\n          if (_this5.trigger !== RouterTrigger.STORE) {\n            _this5.storeState = storeState;\n\n            _this5.dispatchRouterRequest(event);\n          }\n        } else if (event instanceof RoutesRecognized) {\n          routesRecognized = event;\n\n          if (!dispatchNavLate && _this5.trigger !== RouterTrigger.STORE) {\n            _this5.dispatchRouterNavigation(event);\n          }\n        } else if (event instanceof NavigationCancel) {\n          _this5.dispatchRouterCancel(event);\n\n          _this5.reset();\n        } else if (event instanceof NavigationError) {\n          _this5.dispatchRouterError(event);\n\n          _this5.reset();\n        } else if (event instanceof NavigationEnd) {\n          if (_this5.trigger !== RouterTrigger.STORE) {\n            if (dispatchNavLate) {\n              _this5.dispatchRouterNavigation(routesRecognized);\n            }\n\n            _this5.dispatchRouterNavigated(event);\n          }\n\n          _this5.reset();\n        }\n      });\n    }\n    /**\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"dispatchRouterRequest\",\n    value: function dispatchRouterRequest(event) {\n      this.dispatchRouterAction(ROUTER_REQUEST, {\n        event: event\n      });\n    }\n    /**\n     * @private\n     * @param {?} lastRoutesRecognized\n     * @return {?}\n     */\n\n  }, {\n    key: \"dispatchRouterNavigation\",\n    value: function dispatchRouterNavigation(lastRoutesRecognized) {\n      /** @type {?} */\n      var nextRouterState = this.serializer.serialize(lastRoutesRecognized.state);\n      this.dispatchRouterAction(ROUTER_NAVIGATION, {\n        routerState: nextRouterState,\n        event: new RoutesRecognized(lastRoutesRecognized.id, lastRoutesRecognized.url, lastRoutesRecognized.urlAfterRedirects, nextRouterState)\n      });\n    }\n    /**\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"dispatchRouterCancel\",\n    value: function dispatchRouterCancel(event) {\n      this.dispatchRouterAction(ROUTER_CANCEL, {\n        storeState: this.storeState,\n        event: event\n      });\n    }\n    /**\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"dispatchRouterError\",\n    value: function dispatchRouterError(event) {\n      this.dispatchRouterAction(ROUTER_ERROR, {\n        storeState: this.storeState,\n        event: new NavigationError(event.id, event.url, \"\".concat(event))\n      });\n    }\n    /**\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"dispatchRouterNavigated\",\n    value: function dispatchRouterNavigated(event) {\n      /** @type {?} */\n      var routerState = this.serializer.serialize(this.router.routerState.snapshot);\n      this.dispatchRouterAction(ROUTER_NAVIGATED, {\n        event: event,\n        routerState: routerState\n      });\n    }\n    /**\n     * @private\n     * @param {?} type\n     * @param {?} payload\n     * @return {?}\n     */\n\n  }, {\n    key: \"dispatchRouterAction\",\n    value: function dispatchRouterAction(type, payload) {\n      this.trigger = RouterTrigger.ROUTER;\n\n      try {\n        this.store.dispatch({\n          type: type,\n          payload: Object.assign(Object.assign({\n            routerState: this.routerState\n          }, payload), {\n            event: this.config.routerState === 0\n            /* Full */\n            ? payload.event : {\n              id: payload.event.id,\n              url: payload.event.url,\n              // safe, as it will just be `undefined` for non-NavigationEnd router events\n              urlAfterRedirects:\n              /** @type {?} */\n              payload.event.urlAfterRedirects\n            }\n          })\n        });\n      } finally {\n        this.trigger = RouterTrigger.NONE;\n      }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.trigger = RouterTrigger.NONE;\n      this.storeState = null;\n      this.routerState = null;\n    }\n  }], [{\n    key: \"forRoot\",\n    value: function forRoot() {\n      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return {\n        ngModule: StoreRouterConnectingModule,\n        providers: [{\n          provide: _ROUTER_CONFIG,\n          useValue: config\n        }, {\n          provide: ROUTER_CONFIG,\n          useFactory: _createRouterConfig,\n          deps: [_ROUTER_CONFIG]\n        }, {\n          provide: RouterStateSerializer,\n          useClass: config.serializer ? config.serializer : config.routerState === 0\n          /* Full */\n          ? DefaultRouterStateSerializer : MinimalRouterStateSerializer\n        }]\n      };\n    }\n  }]);\n\n  return StoreRouterConnectingModule;\n}();\n\nStoreRouterConnectingModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: StoreRouterConnectingModule\n});\nStoreRouterConnectingModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function StoreRouterConnectingModule_Factory(t) {\n    return new (t || StoreRouterConnectingModule)(ɵngcc0.ɵɵinject(ɵngcc1.Store), ɵngcc0.ɵɵinject(ɵngcc2.Router), ɵngcc0.ɵɵinject(RouterStateSerializer), ɵngcc0.ɵɵinject(ɵngcc0.ErrorHandler), ɵngcc0.ɵɵinject(ROUTER_CONFIG));\n  }\n});\n/** @nocollapse */\n\nStoreRouterConnectingModule.ctorParameters = function () {\n  return [{\n    type: Store\n  }, {\n    type: Router\n  }, {\n    type: RouterStateSerializer\n  }, {\n    type: ErrorHandler\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [ROUTER_CONFIG]\n    }]\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(StoreRouterConnectingModule, [{\n    type: NgModule,\n    args: [{}]\n  }], function () {\n    return [{\n      type: ɵngcc1.Store\n    }, {\n      type: ɵngcc2.Router\n    }, {\n      type: RouterStateSerializer\n    }, {\n      type: ɵngcc0.ErrorHandler\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [ROUTER_CONFIG]\n      }]\n    }];\n  }, null);\n})();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  StoreRouterConnectingModule.prototype.lastEvent;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  StoreRouterConnectingModule.prototype.routerState;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  StoreRouterConnectingModule.prototype.storeState;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  StoreRouterConnectingModule.prototype.trigger;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  StoreRouterConnectingModule.prototype.stateKey;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  StoreRouterConnectingModule.prototype.store;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  StoreRouterConnectingModule.prototype.router;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  StoreRouterConnectingModule.prototype.serializer;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  StoreRouterConnectingModule.prototype.errorHandler;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  StoreRouterConnectingModule.prototype.config;\n}\n/**\n * Check if the URLs are matching. Accounts for the possibility of trailing \"/\" in url.\n * @param {?} first\n * @param {?} second\n * @return {?}\n */\n\n\nfunction isSameUrl(first, second) {\n  return stripTrailingSlash(first) === stripTrailingSlash(second);\n}\n/**\n * @param {?} text\n * @return {?}\n */\n\n\nfunction stripTrailingSlash(text) {\n  if (text.length > 0 && text[text.length - 1] === '/') {\n    return text.substring(0, text.length - 1);\n  }\n\n  return text;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/router_selectors.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @template V\n * @param {?} selectState\n * @return {?}\n */\n\n\nfunction getSelectors(selectState) {\n  /** @type {?} */\n  var selectRouterState = createSelector(selectState,\n  /**\n  * @param {?} router\n  * @return {?}\n  */\n  function (router) {\n    return router && router.state;\n  });\n  /** @type {?} */\n\n  var selectCurrentRoute = createSelector(selectRouterState,\n  /**\n  * @param {?} routerState\n  * @return {?}\n  */\n  function (routerState) {\n    if (!routerState) {\n      return undefined;\n    }\n    /** @type {?} */\n\n\n    var route = routerState.root;\n\n    while (route.firstChild) {\n      route = route.firstChild;\n    }\n\n    return route;\n  });\n  /** @type {?} */\n\n  var selectFragment = createSelector(selectCurrentRoute,\n  /**\n  * @param {?} route\n  * @return {?}\n  */\n  function (route) {\n    return route && route.fragment;\n  });\n  /** @type {?} */\n\n  var selectQueryParams = createSelector(selectCurrentRoute,\n  /**\n  * @param {?} route\n  * @return {?}\n  */\n  function (route) {\n    return route && route.queryParams;\n  });\n  /** @type {?} */\n\n  var selectQueryParam =\n  /**\n  * @param {?} param\n  * @return {?}\n  */\n  function selectQueryParam(param) {\n    return createSelector(selectQueryParams,\n    /**\n    * @param {?} params\n    * @return {?}\n    */\n    function (params) {\n      return params && params[param];\n    });\n  };\n  /** @type {?} */\n\n\n  var selectRouteParams = createSelector(selectCurrentRoute,\n  /**\n  * @param {?} route\n  * @return {?}\n  */\n  function (route) {\n    return route && route.params;\n  });\n  /** @type {?} */\n\n  var selectRouteParam =\n  /**\n  * @param {?} param\n  * @return {?}\n  */\n  function selectRouteParam(param) {\n    return createSelector(selectRouteParams,\n    /**\n    * @param {?} params\n    * @return {?}\n    */\n    function (params) {\n      return params && params[param];\n    });\n  };\n  /** @type {?} */\n\n\n  var selectRouteData = createSelector(selectCurrentRoute,\n  /**\n  * @param {?} route\n  * @return {?}\n  */\n  function (route) {\n    return route && route.data;\n  });\n  /** @type {?} */\n\n  var selectUrl = createSelector(selectRouterState,\n  /**\n  * @param {?} routerState\n  * @return {?}\n  */\n  function (routerState) {\n    return routerState && routerState.url;\n  });\n  return {\n    selectCurrentRoute: selectCurrentRoute,\n    selectFragment: selectFragment,\n    selectQueryParams: selectQueryParams,\n    selectQueryParam: selectQueryParam,\n    selectRouteParams: selectRouteParams,\n    selectRouteParam: selectRouteParam,\n    selectRouteData: selectRouteData,\n    selectUrl: selectUrl\n  };\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: public_api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: ngrx-router-store.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { DEFAULT_ROUTER_FEATURENAME, DefaultRouterStateSerializer, MinimalRouterStateSerializer, NavigationActionTiming, ROUTER_CANCEL, ROUTER_CONFIG, ROUTER_ERROR, ROUTER_NAVIGATED, ROUTER_NAVIGATION, ROUTER_REQUEST, RouterStateSerializer, StoreRouterConnectingModule, getSelectors, routerCancelAction, routerErrorAction, routerNavigatedAction, routerNavigationAction, routerReducer, routerRequestAction, _ROUTER_CONFIG as ɵa, _createRouterConfig as ɵb };","map":{"version":3,"sources":["../../../../modules/router-store/src/actions.ts","../../../../modules/router-store/src/reducer.ts","../../../../modules/router-store/src/serializers/base.ts","../../../../modules/router-store/src/serializers/default_serializer.ts","../../../../modules/router-store/src/serializers/minimal_serializer.ts","../../../../modules/router-store/src/router_store_module.ts","../../../../modules/router-store/src/router_selectors.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;IAea,cAAc,GAAG,4B;AAC9B;;AAEY,IAmBC,mBAAmB,GAAG,YAAY,CAC7C,cAD6C,EAE7C,KAAK,EAFwC,CAnBnC;AAsBV;AACC;AAC+C;AAE1C;;AAAI,IAAC,iBAAiB,GAAG,+BAArB;AACZ;;AAEY,IAmBC,sBAAsB,GAAG,YAAY,CAChD,iBADgD,EAEhD,KAAK,EAF2C,CAnBtC;AAsBV;AAEA;AACwD;AAEnD;;AAAI,IAAE,aAAa,GAAG,2BAAlB;AACX;;AAEY,IAsBC,kBAAkB,GAAG,YAAY,CAC5C,aAD4C,EAE5C,KAAK,EAFuC,CAtBlC;AAyBV;AAEA;AAC4C;AAEvC;;AAAI,IAAE,YAAY,GAAG,0BAAjB;AACX;;AAEY,IAsBC,iBAAiB,GAAG,YAAY,CAC3C,YAD2C,EAE3C,KAAK,EAFsC,CAtBjC;AAyBV;AAEA;AACwE;AAEnE;;AAAI,IAAE,gBAAgB,GAAG,8BAArB;AACX;;AAEY,IAmBC,qBAAqB,GAAG,YAAY,CAC/C,gBAD+C,EAE/C,KAAK,EAF0C,CAnBrC;AAuBZ;AACG;AAC8B;AAG/B;AAKG;;AAAI;AAAI;AAAe;AACT;AACP;AAAe;;AAC1B,SClKe,aDkKf,CC/JC,KD+JD,EC9JC,MD8JD,EC9Je;AACb;;AACoC;AAAqB,MACpD,YAAY;AAAA;AAAG,EAAA,MADqC;;AAE1D,UAAQ,YAAY,CAAC,IAArB;AACE,SAAK,iBAAL;AACA,SAAK,YAAL;AACA,SAAK,aAAL;AACE,aAAO;AACL,QAAA,KAAK,EAAE,YAAY,CAAC,OAAb,CAAqB,WADvB;AAEL,QAAA,YAAY,EAAE,YAAY,CAAC,OAAb,CAAqB,KAArB,CAA2B;AAFpC,OAAP;;AAIF;AACE;AAAA;AAAO,QAAA;AAAP;AATJ;AAWF;AACC;AAAI;AAAkC;AAA2C;AAAsI;;AAAI;AAAI;AAAwB;AAAqE;AAAqC;AAAW;;;AAAI,SAAA,oBAAA,GAAA,CC5BhX;;AACD,IAAA,KAAA,EAAA;AACY;AAHV,EAAA,oBAAA,CAAA,SAAA,CAAA,GAAA;AACF;AACA;AACG;AAAa;AAAe;;;IAAT,qB;;;;AAKtB,IAAA,KAAA,EAAA;AAAa;AAAQ;AAAiB;AAA8B;AAAmB;AAFrF,EAAA,qBAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAAA,WAAA,EAAA,CAAA,CAAA;AACF;AACC;AAAI;AAAkC;AAAyD;AAAsI;;AAAI;AAAI;AAAW;;;AAAI,SAAA,6BAAA,GAAA,CCV5P;;AACD,IAAA,KAAA,EAAA;AACY;AAJV,EAAA,6BAAA,CAAA,SAAA,CAAA,IAAA;AACF;;AAAE,EAAA,6BAAA,CAAA,SAAA,CAAA,GAAA;AACF;;IAEa,4B;;;;;;;;AACX;AAAQ;AAA8B;AAAmB;AACzD,uBAAU,WAAV,EAA0C;AACxC,aAAO;AACL,QAAA,IAAI,EAAE,KAAK,cAAL,CAAoB,WAAW,CAAC,IAAhC,CADD;AAEL,QAAA,GAAG,EAAE,WAAW,CAAC;AAFZ,OAAP;AAID;AACH;AACO;AAAgB;AACF;AACf;;;;WAFI,wBACN,KADM,EACuB;AAAA;;AAC9B;AAAyB,UAClB,QAAQ,GAAG,KAAK,CAAC,QAAN,CAAe,GAAf;AAAkB;AAAM;AAAwB;AAE9D;AAFiC,gBAAC,CAAD;AAAA,eAAO,KAAI,CAAC,cAAL,CAAoB,CAApB,CAAP;AAAA,OAAnB,CADO;AAExB,aAAO;AACL,QAAA,MAAM,EAAE,KAAK,CAAC,MADT;AAEL,QAAA,QAAQ,EAAE,KAAK,CAAC,QAFX;AAGL,QAAA,IAAI,EAAE,KAAK,CAAC,IAHP;AAIL,QAAA,GAAG,EAAE,KAAK,CAAC,GAJN;AAKL,QAAA,MAAM,EAAE,KAAK,CAAC,MALT;AAML,QAAA,WAAW,EAAE,KAAK,CAAC,WAAN,GACT;AACE,UAAA,SAAS,EAAE,KAAK,CAAC,WAAN,CAAkB,SAD/B;AAEE,UAAA,IAAI,EAAE,KAAK,CAAC,WAAN,CAAkB,IAF1B;AAGE,UAAA,SAAS,EAAE,KAAK,CAAC,WAAN,CAAkB,SAH/B;AAIE,UAAA,UAAU,EAAE,KAAK,CAAC,WAAN,CAAkB,UAJhC;AAKE,UAAA,MAAM,EAAE,KAAK,CAAC,WAAN,CAAkB;AAL5B,SADS,GAQT,IAdC;AAeL,QAAA,WAAW,EAAE,KAAK,CAAC,WAfd;AAgBL,QAAA,aAAa,EAAE,KAAK,CAAC,aAhBhB;AAiBL,QAAA,QAAQ,EAAE,KAAK,CAAC,QAjBX;AAkBL,QAAA,SAAS;AAAA;AAAG,QAAA,KAAK,CAAC,WAAN,GACR,KAAK,CAAC,WAAN,CAAkB,SADV,GAER,SApBC;AAqBL,QAAA,IAAI;AAAA;AAAE,QAAA,SArBD;AAsBL,QAAA,MAAM;AAAA;AAAE,QAAA,SAtBH;AAuBL,QAAA,UAAU,EAAE,QAAQ,CAAC,CAAD,CAvBf;AAwBL,QAAA,YAAY;AAAA;AAAE,QAAA,SAxBT;AAyBL,QAAA,QAAQ,EAAR;AAzBK,OAAP;AA2BD;;;;;AAEF;AAAI;AAAkC;AAAyD;AAAsI;;AAAI;AAAI;AAAW;;;AAAI,SAAA,6BAAA,GAAA,CCrC5P;;AACD,IAAA,KAAA,EAAA;AACY;AAXV,EAAA,6BAAA,CAAA,SAAA,CAAA,WAAA;AACF;;AAAE,EAAA,6BAAA,CAAA,SAAA,CAAA,GAAA;AACF;;AAAE,EAAA,6BAAA,CAAA,SAAA,CAAA,MAAA;AACF;;AAAE,EAAA,6BAAA,CAAA,SAAA,CAAA,WAAA;AACF;;AAAE,EAAA,6BAAA,CAAA,SAAA,CAAA,QAAA;AACF;;AAAE,EAAA,6BAAA,CAAA,SAAA,CAAA,IAAA;AACF;;AAAE,EAAA,6BAAA,CAAA,SAAA,CAAA,MAAA;AACF;;AAAE,EAAA,6BAAA,CAAA,SAAA,CAAA,UAAA;AACF;;AAAE,EAAA,6BAAA,CAAA,SAAA,CAAA,QAAA;AACF;AACA;AACG;AAAW;;;AAAI,SAAA,0BAAA,GAAA,CAGjB;;AACD,IAAA,KAAA,EAAA;AACY;AAJV,EAAA,0BAAA,CAAA,SAAA,CAAA,IAAA;AACF;;AAAE,EAAA,0BAAA,CAAA,SAAA,CAAA,GAAA;AACF;;IAEa,4B;;;;;;;;AACX;AAAQ;AAA8B;AAAmB;AACzD,uBAAU,WAAV,EAA0C;AACxC,aAAO;AACL,QAAA,IAAI,EAAE,KAAK,cAAL,CAAoB,WAAW,CAAC,IAAhC,CADD;AAEL,QAAA,GAAG,EAAE,WAAW,CAAC;AAFZ,OAAP;AAID;AACH;AACO;AAAgB;AACF;AACf;;;;WAFI,wBACN,KADM,EACuB;AAAA;;AAC9B;AAAyB,UAClB,QAAQ,GAAG,KAAK,CAAC,QAAN,CAAe,GAAf;AAAkB;AAAM;AAAwB;AAE9D;AAFiC,gBAAC,CAAD;AAAA,eAAO,MAAI,CAAC,cAAL,CAAoB,CAApB,CAAP;AAAA,OAAnB,CADO;AAExB,aAAO;AACL,QAAA,MAAM,EAAE,KAAK,CAAC,MADT;AAEL,QAAA,IAAI,EAAE,KAAK,CAAC,IAFP;AAGL,QAAA,GAAG,EAAE,KAAK,CAAC,GAHN;AAIL,QAAA,MAAM,EAAE,KAAK,CAAC,MAJT;AAKL,QAAA,WAAW,EAAE,KAAK,CAAC,WAAN,GACT;AACE,UAAA,IAAI,EAAE,KAAK,CAAC,WAAN,CAAkB,IAD1B;AAEE,UAAA,SAAS,EAAE,KAAK,CAAC,WAAN,CAAkB,SAF/B;AAGE,UAAA,UAAU,EAAE,KAAK,CAAC,WAAN,CAAkB,UAHhC;AAIE,UAAA,MAAM,EAAE,KAAK,CAAC,WAAN,CAAkB;AAJ5B,SADS,GAOT,IAZC;AAaL,QAAA,WAAW,EAAE,KAAK,CAAC,WAbd;AAcL,QAAA,QAAQ,EAAE,KAAK,CAAC,QAdX;AAeL,QAAA,UAAU,EAAE,QAAQ,CAAC,CAAD,CAff;AAgBL,QAAA,QAAQ,EAAR;AAhBK,OAAP;AAkBD;;;;;AAEF;AAAI;AAAkC;AAA8C;AAAsI;;AAAI;;;ACP/N,IAAkB,WAAW,GAAA;AAC3B,EAAA,IAAI,EAAA,CADuB;AAE3B,EAAA,OAAO,EAAA;AAFoB,CAA7B;AAIA;AACG;AAAW;AAAe;;AAAI,SAAA,iBAAA,GAAA,CAmBhC;;AACD,IAAA,KAAA,EAAA;AACY;AAlBV,EAAA,iBAAA,CAAA,SAAA,CAAA,QAAA;AACF;;AAAE,EAAA,iBAAA,CAAA,SAAA,CAAA,UAAA;AACF;AACE;AACE;AACE;AACE;AACE;AAEJ;AAA2B;;AAA/B,EAAA,iBAAA,CAAA,SAAA,CAAA,sBAAA;AACF;AACE;AACG;AACE;AAEJ;AACF;;AADC,EAAA,iBAAA,CAAA,SAAA,CAAA,WAAA;AACF;AACA;AACG;AAAW;;;AAAd,SAAA,wBAAA,GAAA,CAIC;;AACD,IAAA,KAAA,EAAA;AACY;AALV,EAAA,wBAAA,CAAA,SAAA,CAAA,KAAA;AACF;;AAAE,EAAA,wBAAA,CAAA,SAAA,CAAA,WAAA;AACF;;AAAE,EAAA,wBAAA,CAAA,SAAA,CAAA,UAAA;AACF;AACA;;;AACqB,IAAT,sBAAsB,GAAA;AAChC,EAAA,aAAa,EAAA,CADmB;AAEhC,EAAA,cAAc,EAAA;AAFkB,CAAb;AAIrB,sBAAA,CAAA,sBAAA,CAAA,aAAA,CAAA,GAAA,eAAA;AAE6B,sBAAA,CAAA,sBAAA,CAAA,cAAA,CAAA,GAAA,gBAAA;AAGhB;;AAAiB,IAJjB,cAAc,GAAG,IAAI,cAAJ,CAC5B,2CAD4B,CAIA;AAF5B;;;AACc,IAAH,aAAa,GAAG,IAAI,cAAJ,CAC3B,kCAD2B,CAAb;AAEd;;AACc,IAAH,0BAA0B,GAAG,QAA1B;AAChB;AACG;AAAqB;AACtB;;AAAI,SADU,mBACV,CAAJ,MAAI,EAAqB;AAEzB,SAAA,MAAA,CAAA,MAAA,CAAA;AACE,IAAA,QAAQ,EAAE,0BADZ;AAEE,IAAA,UAAU,EAAE,4BAFd;AAGE,IAAA,sBAAsB,EAAE,sBAAsB,CAAC;AAHjD,GAAA,EAIK,MAJL,CAAA;AAMD;AACD;;;AACA,IAAK,aAAa,GAAA;AAChB,EAAA,IAAI,EAAA,CADY;AAEhB,EAAA,MAAM,EAAA,CAFU;AAGhB,EAAA,KAAK,EAAA;AAHW,CAAlB;AAKA,aAAA,CAAA,aAAA,CAAA,IAAA,CAAA,GAAA,MAAA;AAEuC,aAAA,CAAA,aAAA,CAAA,MAAA,CAAA,GAAA,QAAA;AAEE,aAAA,CAAA,aAAA,CAAA,KAAA,CAAA,GAAA,OAAA;AACzC;AAAI;AAA2C;AAAG;AAIhC;AAGjB;AAAG;AAEH;AAA2C;AAC3B;AAA6B;AAAK;AAAO;AAAG;AAEM;AACf;AAAG;AAEb;AACO;AAAG;AAMzB;AAGhB;AAAG;AAAU;AAAG;AAC1B;AAAgB;AACU;AAAgB;AACvB;AAEhB;AAA8B;AAGjC;AAIE;AACO;AAC+B;AACnC;AACO;AAAM;AAA4B;AAAK;AAAO;;IAF9C,2B;AACb;AAAQ;AACM;AAAyB;AACtC;AAC0B;AACb;AA6BZ,uCACU,KADV,EAEU,MAFV,EAGU,UAHV,EAIU,YAJV,EAKiC,MALjC,EAK0D;AAAA;;AAJhD,SAAA,KAAA,GAAA,KAAA;AACA,SAAA,MAAA,GAAA,MAAA;AACA,SAAA,UAAA,GAAA,UAAA;AACA,SAAA,YAAA,GAAA,YAAA;AACuB,SAAA,MAAA,GAAA,MAAA;AAZzB,SAAA,SAAA,GAA0B,IAA1B;AACA,SAAA,WAAA,GAAoD,IAApD;AAEA,SAAA,OAAA,GAAU,aAAa,CAAC,IAAxB;AAWN,SAAK,QAAL;AAAa;AAAG,SAAK,MAAL,CAAY,QAA5B;AAEA,SAAK,uBAAL;AACA,SAAK,yBAAL;AACD;AACH;AACO;AAAmB;AAClB;AACI;;;;;;AAvBZ;AACO;AAAgB;AACvB;AAmBU,uCAAuB;AAAA;;AAC7B,WAAK,KAAL,CACG,IADH,CACQ,MAAM;AAAA;AAAC,WAAK,QAAN,CADd,EACsC,cAAc,CAAC,KAAK,KAAN,CADpD,EAEG,SAFH;AAEY;AAAM;AAA0B;AAChC;AADC,sBAA+B;AAAA;AAAA,YAA7B,gBAA6B;AAAA,YAAX,UAAW;;AACxC,QAAA,MAAI,CAAC,gBAAL,CAAsB,gBAAtB,EAAwC,UAAxC;AACD,OAJH;AAKD;AACH;AACO;AAAgB;AACO;AACb;AAEb;;;;WAJM,0BACN,gBADM,EAEN,UAFM,EAES;AAAA;;AAEf,UAAI,CAAC,gBAAD,IAAqB,CAAC,gBAAgB,CAAC,KAA3C,EAAkD;AAChD;AACD;;AACD,UAAI,KAAK,OAAL,KAAiB,aAAa,CAAC,MAAnC,EAA2C;AACzC;AACD;;AACD,UAAI,KAAK,SAAL,YAA0B,eAA9B,EAA+C;AAC7C;AACD;AACL;;;AACwB,UAAd,GAAG,GAAG,gBAAgB,CAAC,KAAjB,CAAuB,GAAf;;AACpB,UAAI,CAAC,SAAS,CAAC,KAAK,MAAL,CAAY,GAAb,EAAkB,GAAlB,CAAd,EAAsC;AACpC,aAAK,UAAL,GAAkB,UAAlB;AACA,aAAK,OAAL,GAAe,aAAa,CAAC,KAA7B;AACA,aAAK,MAAL,CAAY,aAAZ,CAA0B,GAA1B,EAA+B,KAA/B;AAAoC;AAAM;AACxB;AACnB;AAFsC,kBAAC,KAAD,EAAM;AACzC,UAAA,MAAI,CAAC,YAAL,CAAkB,WAAlB,CAA8B,KAA9B;AACD,SAFD;AAGD;AACF;AACH;AACO;AAAgB;AAAmB;;;;WAAhC,qCAAyB;AAAA;;AAAK;AACrB,UAAT,eAAe,GACnB,KAAK,MAAL,CAAY,sBAAZ,KACA,sBAAsB,CAAC,cAFV;AAGnB;;AAAyB,UAAjB,gBAAiB;AAErB,WAAK,MAAL,CAAY,MAAZ,CACG,IADH,CACQ,cAAc,CAAC,KAAK,KAAN,CADtB,EAEG,SAFH;AAEY;AAAM;AAClB;AAAuB;AADV,uBAAoB;AAAA;AAAA,YAAlB,KAAkB;AAAA,YAAX,UAAW;;AAC7B,QAAA,MAAI,CAAC,SAAL,GAAiB,KAAjB;;AAEA,YAAI,KAAK,YAAY,eAArB,EAAsC;AACpC,UAAA,MAAI,CAAC,WAAL,GAAmB,MAAI,CAAC,UAAL,CAAgB,SAAhB,CACjB,MAAI,CAAC,MAAL,CAAY,WAAZ,CAAwB,QADP,CAAnB;;AAGA,cAAI,MAAI,CAAC,OAAL,KAAiB,aAAa,CAAC,KAAnC,EAA0C;AACxC,YAAA,MAAI,CAAC,UAAL,GAAkB,UAAlB;;AACA,YAAA,MAAI,CAAC,qBAAL,CAA2B,KAA3B;AACD;AACF,SARD,MAQO,IAAI,KAAK,YAAY,gBAArB,EAAuC;AAC5C,UAAA,gBAAgB,GAAG,KAAnB;;AAEA,cAAI,CAAC,eAAD,IAAoB,MAAI,CAAC,OAAL,KAAiB,aAAa,CAAC,KAAvD,EAA8D;AAC5D,YAAA,MAAI,CAAC,wBAAL,CAA8B,KAA9B;AACD;AACF,SANM,MAMA,IAAI,KAAK,YAAY,gBAArB,EAAuC;AAC5C,UAAA,MAAI,CAAC,oBAAL,CAA0B,KAA1B;;AACA,UAAA,MAAI,CAAC,KAAL;AACD,SAHM,MAGA,IAAI,KAAK,YAAY,eAArB,EAAsC;AAC3C,UAAA,MAAI,CAAC,mBAAL,CAAyB,KAAzB;;AACA,UAAA,MAAI,CAAC,KAAL;AACD,SAHM,MAGA,IAAI,KAAK,YAAY,aAArB,EAAoC;AACzC,cAAI,MAAI,CAAC,OAAL,KAAiB,aAAa,CAAC,KAAnC,EAA0C;AACxC,gBAAI,eAAJ,EAAqB;AACnB,cAAA,MAAI,CAAC,wBAAL,CAA8B,gBAA9B;AACD;;AACD,YAAA,MAAI,CAAC,uBAAL,CAA6B,KAA7B;AACD;;AACD,UAAA,MAAI,CAAC,KAAL;AACD;AACF,OAlCH;AAmCD;AACH;AACO;AAAgB;AAAwB;AAC7C;;;;WADQ,+BAAsB,KAAtB,EAA4C;AAClD,WAAK,oBAAL,CAA0B,cAA1B,EAA0C;AAAE,QAAA,KAAK,EAAL;AAAF,OAA1C;AACD;AACH;AACO;AAAgB;AACG;AACxB;;;;WAFQ,kCACN,oBADM,EACgC;AACvC;AACa,UAAN,eAAe,GAAG,KAAK,UAAL,CAAgB,SAAhB,CACtB,oBAAoB,CAAC,KADC,CAAZ;AAGZ,WAAK,oBAAL,CAA0B,iBAA1B,EAA6C;AAC3C,QAAA,WAAW,EAAE,eAD8B;AAE3C,QAAA,KAAK,EAAE,IAAI,gBAAJ,CACL,oBAAoB,CAAC,EADhB,EAEL,oBAAoB,CAAC,GAFhB,EAGL,oBAAoB,CAAC,iBAHhB,EAIL,eAJK;AAFoC,OAA7C;AASD;AACH;AACO;AAAgB;AAAwB;AAC7C;;;;WADQ,8BAAqB,KAArB,EAA4C;AAClD,WAAK,oBAAL,CAA0B,aAA1B,EAAyC;AACvC,QAAA,UAAU,EAAE,KAAK,UADsB;AAEvC,QAAA,KAAK,EAAL;AAFuC,OAAzC;AAID;AACH;AACO;AAAgB;AAAwB;AAC3C;;;;WADM,6BAAoB,KAApB,EAA0C;AAChD,WAAK,oBAAL,CAA0B,YAA1B,EAAwC;AACtC,QAAA,UAAU,EAAE,KAAK,UADqB;AAEtC,QAAA,KAAK,EAAE,IAAI,eAAJ,CAAoB,KAAK,CAAC,EAA1B,EAA8B,KAAK,CAAC,GAApC,YAA4C,KAA5C;AAF+B,OAAxC;AAID;AACH;AACO;AAAgB;AAAwB;AAC7C;;;;WADQ,iCAAwB,KAAxB,EAA4C;AAAI;AACvC,UAAT,WAAW,GAAG,KAAK,UAAL,CAAgB,SAAhB,CAClB,KAAK,MAAL,CAAY,WAAZ,CAAwB,QADN,CAAL;AAGf,WAAK,oBAAL,CAA0B,gBAA1B,EAA4C;AAAE,QAAA,KAAK,EAAL,KAAF;AAAS,QAAA,WAAW,EAAX;AAAT,OAA5C;AACD;AACH;AACO;AAAgB;AACT;AACQ;AACnB;;;;WAHO,8BACN,IADM,EAEN,OAFM,EAE2B;AAEjC,WAAK,OAAL,GAAe,aAAa,CAAC,MAA7B;;AACA,UAAI;AACF,aAAK,KAAL,CAAW,QAAX,CAAoB;AAClB,UAAA,IAAI,EAAJ,IADkB;AAElB,UAAA,OAAO,EAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA;AACL,YAAA,WAAW,EAAE,KAAK;AADb,WAAA,EAEF,OAFE,CAAA,EAEK;AACV,YAAA,KAAK,EACH,KAAK,MAAL,CAAY,WAAZ,KAAuB;AAAA;AAAvB,cACI,OAAO,CAAC,KADZ,GAEI;AACE,cAAA,EAAE,EAAE,OAAO,CAAC,KAAR,CAAc,EADpB;AAEE,cAAA,GAAG,EAAE,OAAO,CAAC,KAAR,CAAc,GAFrB;AAGhB;AACkB,cAAA,iBAAiB;AAAE;AAAC,cAAA,OAAO,CAAC,KAAT,CAChB;AALL;AAJI,WAFL;AAFW,SAApB;AAiBD,OAlBD,SAkBU;AACR,aAAK,OAAL,GAAe,aAAa,CAAC,IAA7B;AACD;AACF;AACH;AACO;AACJ;AAAmB;;;;WADZ,iBAAK;AACX,WAAK,OAAL,GAAe,aAAa,CAAC,IAA7B;AACA,WAAK,UAAL,GAAkB,IAAlB;AACA,WAAK,WAAL,GAAmB,IAAnB;AACD;;;WAnMD,mBAGmC;AAAA,UAAjC,MAAiC,uEAAF,EAAE;AAEjC,aAAO;AACL,QAAA,QAAQ,EAAE,2BADL;AAEL,QAAA,SAAS,EAAE,CACT;AAAE,UAAA,OAAO,EAAE,cAAX;AAA2B,UAAA,QAAQ,EAAE;AAArC,SADS,EAET;AACE,UAAA,OAAO,EAAE,aADX;AAEE,UAAA,UAAU,EAAE,mBAFd;AAGE,UAAA,IAAI,EAAE,CAAC,cAAD;AAHR,SAFS,EAOT;AACE,UAAA,OAAO,EAAE,qBADX;AAEE,UAAA,QAAQ,EAAE,MAAM,CAAC,UAAP,GACN,MAAM,CAAC,UADD,GAEN,MAAM,CAAC,WAAP,KAAkB;AAAA;AAAlB,YACA,4BADA,GAEA;AANN,SAPS;AAFN,OAAP;AAmBD;;;;;;0CA1BF,gB,CAAA;AAAA,EAAA,IAAQ,EAAA;AAAR,C;;;;AACI;;AAAC;;AAAmB,2BAAA,CAAA,cAAA,GAAA;AAAA,SAAA,CAER;AAAA,IAAA,IAAA,EAxIU;AAwIV,GAFQ,EAtIW;AAAA,IAAA,IAAA,EANlC;AAMkC,GAsIX,EA3IvB;AAAA,IAAA,IAAA,EAiBA;AAjBA,GA2IuB,EAzHvB;AAAA,IAAA,IAAA,EAzBA;AAyBA,GAyHuB,EAjJvB;AAAA,IAAA,IAAA,EAAA,SAAA;AAAA,IAAA,UAAA,EAAA,CAAA;AAAA,MAAA,IAAA,EAwLG,MAxLH;AAwLS,MAAA,IAAA,EAAA,CAAC,aAAD;AAxLT,KAAA;AAAA,GAiJuB,CAAA;AAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;AAuCU,C;;AAAC,IAAA,KAAA,EAAA;AAAa;AAAQ;AAElD;AAAgB;AAdrB,EAAA,2BAAA,CAAA,SAAA,CAAA,SAAA;AACF;AAAQ;AAAiB;AAAgB;;AAAvC,EAAA,2BAAA,CAAA,SAAA,CAAA,WAAA;AACF;AAAQ;AAAiB;AACX;;AADZ,EAAA,2BAAA,CAAA,SAAA,CAAA,UAAA;AACF;AAAQ;AAAiB;AAEzB;;AAFE,EAAA,2BAAA,CAAA,SAAA,CAAA,OAAA;AACF;AACO;AAAiB;AACxB;;AADE,EAAA,2BAAA,CAAA,SAAA,CAAA,QAAA;AACF;AACO;AACE;AAAgB;;AAArB,EAAA,2BAAA,CAAA,SAAA,CAAA,KAAA;AAA0B;AACvB;AAAiB;AACZ;;AADR,EAAA,2BAAA,CAAA,SAAA,CAAA,MAAA;AAAuB;AACpB;AAAiB;AAAgB;;AAApC,EAAA,2BAAA,CAAA,SAAA,CAAA,UAAA;AAAyE;AACtE;AAAiB;AACxB;;AADI,EAAA,2BAAA,CAAA,SAAA,CAAA,YAAA;AAAmC;AAChC;AAAiB;AAAgB;;AAApC,EAAA,2BAAA,CAAA,SAAA,CAAA,MAAA;AACJ;AAAE;AACF;AAEuB;AAChB;AAAqB;AAG5B;;;AA2JA,SAAS,SAAT,CAAmB,KAAnB,EAAkC,MAAlC,EAAgD;AAC9C,SAAO,kBAAkB,CAAC,KAAD,CAAlB,KAA8B,kBAAkB,CAAC,MAAD,CAAvD;AACD;AACD;AACG;AAAmB;AAAe;;;AAArC,SAAS,kBAAT,CAA4B,IAA5B,EAAwC;AACtC,MAAI,IAAI,CAAC,MAAL,GAAc,CAAd,IAAmB,IAAI,CAAC,IAAI,CAAC,MAAL,GAAc,CAAf,CAAJ,KAA0B,GAAjD,EAAsD;AACpD,WAAO,IAAI,CAAC,SAAL,CAAe,CAAf,EAAkB,IAAI,CAAC,MAAL,GAAc,CAAhC,CAAP;AACD;;AACD,SAAO,IAAP;AACF;AACC;AAAI;AAAkC;AAA2C;AAAsI;;AAAI;AAAI;AAAe;AAA0B;AAAe;;;AAAI,SCpW5Q,YDoW4Q,CCnW1R,WDmW0R,ECnWxO;AACjD;AAAqB,MAChB,iBAAiB,GAAG,cAAc,CACtC,WADsC;AAC3B;AACV;AAAyB;AAEzB;AAFD,YAAC,MAAD;AAAA,WAAY,MAAM,IAAI,MAAM,CAAC,KAA7B;AAAA,GAFsC,CADlB;AAKxB;;AAAqB,MAAb,kBAAkB,GAAG,cAAc,CACvC,iBADuC;AACtB;AAChB;AACO;AACP;AAFD,YAAC,WAAD,EAAY;AACV,QAAI,CAAC,WAAL,EAAkB;AAChB,aAAO,SAAP;AACD;AACP;;;AAAyB,QAAf,KAAK,GAAG,WAAW,CAAC,IAAL;;AACnB,WAAO,KAAK,CAAC,UAAb,EAAyB;AACvB,MAAA,KAAK,GAAG,KAAK,CAAC,UAAd;AACD;;AACD,WAAO,KAAP;AACD,GAXsC,CAAtB;AAarB;;AAAqB,MAAb,cAAc,GAAG,cAAc,CACnC,kBADmC;AACjB;AACjB;AAAwB;AAEzB;AAFA,YAAC,KAAD;AAAA,WAAW,KAAK,IAAI,KAAK,CAAC,QAA1B;AAAA,GAFmC,CAAlB;AAIrB;;AAAqB,MAAb,iBAAiB,GAAG,cAAc,CACtC,kBADsC;AACpB;AACjB;AAAwB;AAE5B;AAFG,YAAC,KAAD;AAAA,WAAW,KAAK,IAAI,KAAK,CAAC,WAA1B;AAAA,GAFsC,CAArB;AAIrB;;AAAqB,MAAb,gBAAgB;AAAA;AAAQ;AACtB;AAAmB;AADF,WAAnB,gBAAmB,CAAC,KAAD;AAAA,WACvB,cAAc,CAAC,iBAAD;AAAkB;AAAO;AAAyB;AACzD;AAD2B,cAAC,MAAD;AAAA,aAAY,MAAM,IAAI,MAAM,CAAC,KAAD,CAA5B;AAAA,KAApB,CADS;AAAA,GAAN;AAErB;;;AAAqB,MAAb,iBAAiB,GAAG,cAAc,CACtC,kBADsC;AACpB;AACjB;AAAwB;AAEvB;AAFF,YAAC,KAAD;AAAA,WAAW,KAAK,IAAI,KAAK,CAAC,MAA1B;AAAA,GAFsC,CAArB;AAIrB;;AAAqB,MAAb,gBAAgB;AAAA;AAAQ;AACtB;AAAmB;AADF,WAAnB,gBAAmB,CAAC,KAAD;AAAA,WACvB,cAAc,CAAC,iBAAD;AAAkB;AAAO;AAAyB;AACzD;AAD2B,cAAC,MAAD;AAAA,aAAY,MAAM,IAAI,MAAM,CAAC,KAAD,CAA5B;AAAA,KAApB,CADS;AAAA,GAAN;AAErB;;;AAAqB,MAAb,eAAe,GAAG,cAAc,CACpC,kBADoC;AAClB;AACjB;AAAwB;AAErB;AAFJ,YAAC,KAAD;AAAA,WAAW,KAAK,IAAI,KAAK,CAAC,IAA1B;AAAA,GAFoC,CAAnB;AAIrB;;AAAqB,MAAb,SAAS,GAAG,cAAc,CAC9B,iBAD8B;AACb;AAChB;AAA8B;AACjC;AADE,YAAC,WAAD;AAAA,WAAiB,WAAW,IAAI,WAAW,CAAC,GAA5C;AAAA,GAF8B,CAAb;AAKnB,SAAO;AACL,IAAA,kBAAkB,EAAlB,kBADK;AAEL,IAAA,cAAc,EAAd,cAFK;AAGL,IAAA,iBAAiB,EAAjB,iBAHK;AAIL,IAAA,gBAAgB,EAAhB,gBAJK;AAKL,IAAA,iBAAiB,EAAjB,iBALK;AAML,IAAA,gBAAgB,EAAhB,gBANK;AAOL,IAAA,eAAe,EAAf,eAPK;AAQL,IAAA,SAAS,EAAT;AARK,GAAP;AAUF;AACC;AAAI;AAAkC;AAAgC;AAAsI;;AAAK;AAAI;AAAkC;AAAiC;AAAsI;;AAAK;AAAI;AAAkC;AAA4B;AAAsI;;AAAK;AAAI;AAAkC;AAAwC;AAAsI;;;AAAK,SAAA,0BAAA,EAAA,4BAAA,EAAA,4BAAA,EAAA,sBAAA,EAAA,aAAA,EAAA,aAAA,EAAA,YAAA,EAAA,gBAAA,EAAA,iBAAA,EAAA,cAAA,EAAA,qBAAA,EAAA,2BAAA,EAAA,YAAA,EAAA,kBAAA,EAAA,iBAAA,EAAA,qBAAA,EAAA,sBAAA,EAAA,aAAA,EAAA,mBAAA,EAAA,cAAA,IAAA,EAAA,EAAA,mBAAA,IAAA,EAAA","sourcesContent":["import {\n  NavigationCancel,\n  NavigationEnd,\n  NavigationError,\n  NavigationStart,\n  RoutesRecognized,\n} from '@angular/router';\n\nimport { BaseRouterStoreState } from './serializers/base';\nimport { SerializedRouterStateSnapshot } from './serializers/default_serializer';\nimport { createAction, props } from '@ngrx/store';\n\n/**\n * An action dispatched when a router navigation request is fired.\n */\nexport const ROUTER_REQUEST = '@ngrx/router-store/request';\n\n/**\n * Payload of ROUTER_REQUEST\n */\nexport type RouterRequestPayload<\n  T extends BaseRouterStoreState = SerializedRouterStateSnapshot\n> = {\n  routerState: T;\n  event: NavigationStart;\n};\n\n/**\n * An action dispatched when a router navigation request is fired.\n */\nexport type RouterRequestAction<\n  T extends BaseRouterStoreState = SerializedRouterStateSnapshot\n> = {\n  type: typeof ROUTER_REQUEST;\n  payload: RouterRequestPayload<T>;\n};\n\nexport const routerRequestAction = createAction(\n  ROUTER_REQUEST,\n  props<{ payload: RouterRequestPayload<SerializedRouterStateSnapshot> }>()\n);\n/**\n * An action dispatched when the router navigates.\n */\nexport const ROUTER_NAVIGATION = '@ngrx/router-store/navigation';\n\n/**\n * Payload of ROUTER_NAVIGATION.\n */\nexport type RouterNavigationPayload<\n  T extends BaseRouterStoreState = SerializedRouterStateSnapshot\n> = {\n  routerState: T;\n  event: RoutesRecognized;\n};\n\n/**\n * An action dispatched when the router navigates.\n */\nexport type RouterNavigationAction<\n  T extends BaseRouterStoreState = SerializedRouterStateSnapshot\n> = {\n  type: typeof ROUTER_NAVIGATION;\n  payload: RouterNavigationPayload<T>;\n};\n\nexport const routerNavigationAction = createAction(\n  ROUTER_NAVIGATION,\n  props<{ payload: RouterNavigationPayload<SerializedRouterStateSnapshot> }>()\n);\n\n/**\n * An action dispatched when the router cancels navigation.\n */\nexport const ROUTER_CANCEL = '@ngrx/router-store/cancel';\n\n/**\n * Payload of ROUTER_CANCEL.\n */\nexport type RouterCancelPayload<\n  T,\n  V extends BaseRouterStoreState = SerializedRouterStateSnapshot\n> = {\n  routerState: V;\n  storeState: T;\n  event: NavigationCancel;\n};\n\n/**\n * An action dispatched when the router cancels navigation.\n */\nexport type RouterCancelAction<\n  T,\n  V extends BaseRouterStoreState = SerializedRouterStateSnapshot\n> = {\n  type: typeof ROUTER_CANCEL;\n  payload: RouterCancelPayload<T, V>;\n};\n\nexport const routerCancelAction = createAction(\n  ROUTER_CANCEL,\n  props<{ payload: RouterCancelPayload<SerializedRouterStateSnapshot> }>()\n);\n\n/**\n * An action dispatched when the router errors.\n */\nexport const ROUTER_ERROR = '@ngrx/router-store/error';\n\n/**\n * Payload of ROUTER_ERROR.\n */\nexport type RouterErrorPayload<\n  T,\n  V extends BaseRouterStoreState = SerializedRouterStateSnapshot\n> = {\n  routerState: V;\n  storeState: T;\n  event: NavigationError;\n};\n\n/**\n * An action dispatched when the router errors.\n */\nexport type RouterErrorAction<\n  T,\n  V extends BaseRouterStoreState = SerializedRouterStateSnapshot\n> = {\n  type: typeof ROUTER_ERROR;\n  payload: RouterErrorPayload<T, V>;\n};\n\nexport const routerErrorAction = createAction(\n  ROUTER_ERROR,\n  props<{ payload: RouterErrorPayload<SerializedRouterStateSnapshot> }>()\n);\n\n/**\n * An action dispatched after navigation has ended and new route is active.\n */\nexport const ROUTER_NAVIGATED = '@ngrx/router-store/navigated';\n\n/**\n * Payload of ROUTER_NAVIGATED.\n */\nexport type RouterNavigatedPayload<\n  T extends BaseRouterStoreState = SerializedRouterStateSnapshot\n> = {\n  routerState: T;\n  event: NavigationEnd;\n};\n\n/**\n * An action dispatched after navigation has ended and new route is active.\n */\nexport type RouterNavigatedAction<\n  T extends BaseRouterStoreState = SerializedRouterStateSnapshot\n> = {\n  type: typeof ROUTER_NAVIGATED;\n  payload: RouterNavigatedPayload<T>;\n};\n\nexport const routerNavigatedAction = createAction(\n  ROUTER_NAVIGATED,\n  props<{ payload: RouterNavigatedPayload<SerializedRouterStateSnapshot> }>()\n);\n\n/**\n * A union type of router actions.\n */\nexport type RouterAction<\n  T,\n  V extends BaseRouterStoreState = SerializedRouterStateSnapshot\n> =\n  | RouterRequestAction<V>\n  | RouterNavigationAction<V>\n  | RouterCancelAction<T, V>\n  | RouterErrorAction<T, V>\n  | RouterNavigatedAction<V>;\n","import { Action } from '@ngrx/store';\nimport {\n  ROUTER_CANCEL,\n  ROUTER_ERROR,\n  ROUTER_NAVIGATION,\n  RouterAction,\n} from './actions';\nimport { BaseRouterStoreState } from './serializers/base';\nimport { SerializedRouterStateSnapshot } from './serializers/default_serializer';\n\nexport type RouterReducerState<\n  T extends BaseRouterStoreState = SerializedRouterStateSnapshot\n> = {\n  state: T;\n  navigationId: number;\n};\n\nexport function routerReducer<\n  T extends BaseRouterStoreState = SerializedRouterStateSnapshot\n>(\n  state: RouterReducerState<T> | undefined,\n  action: Action\n): RouterReducerState<T> {\n  // Allow compilation with strictFunctionTypes - ref: #1344\n  const routerAction = action as RouterAction<any, T>;\n  switch (routerAction.type) {\n    case ROUTER_NAVIGATION:\n    case ROUTER_ERROR:\n    case ROUTER_CANCEL:\n      return {\n        state: routerAction.payload.routerState,\n        navigationId: routerAction.payload.event.id,\n      };\n    default:\n      return state as RouterReducerState<T>;\n  }\n}\n","import { RouterStateSnapshot } from '@angular/router';\n\n/**\n * Simple router state.\n * All custom router states / state serializers should have at least\n * the properties of this interface.\n */\nexport interface BaseRouterStoreState {\n  url: string;\n}\n\nexport abstract class RouterStateSerializer<\n  T extends BaseRouterStoreState = BaseRouterStoreState\n> {\n  abstract serialize(routerState: RouterStateSnapshot): T;\n}\n","import { ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { BaseRouterStoreState, RouterStateSerializer } from './base';\n\nexport interface SerializedRouterStateSnapshot extends BaseRouterStoreState {\n  root: ActivatedRouteSnapshot;\n  url: string;\n}\n\nexport class DefaultRouterStateSerializer\n  implements RouterStateSerializer<SerializedRouterStateSnapshot> {\n  serialize(routerState: RouterStateSnapshot): SerializedRouterStateSnapshot {\n    return {\n      root: this.serializeRoute(routerState.root),\n      url: routerState.url,\n    };\n  }\n\n  private serializeRoute(\n    route: ActivatedRouteSnapshot\n  ): ActivatedRouteSnapshot {\n    const children = route.children.map((c) => this.serializeRoute(c));\n    return {\n      params: route.params,\n      paramMap: route.paramMap,\n      data: route.data,\n      url: route.url,\n      outlet: route.outlet,\n      routeConfig: route.routeConfig\n        ? {\n            component: route.routeConfig.component,\n            path: route.routeConfig.path,\n            pathMatch: route.routeConfig.pathMatch,\n            redirectTo: route.routeConfig.redirectTo,\n            outlet: route.routeConfig.outlet,\n          }\n        : null,\n      queryParams: route.queryParams,\n      queryParamMap: route.queryParamMap,\n      fragment: route.fragment,\n      component: (route.routeConfig\n        ? route.routeConfig.component\n        : undefined) as any,\n      root: undefined as any,\n      parent: undefined as any,\n      firstChild: children[0],\n      pathFromRoot: undefined as any,\n      children,\n    };\n  }\n}\n","import { RouterStateSnapshot, ActivatedRouteSnapshot } from '@angular/router';\nimport { BaseRouterStoreState, RouterStateSerializer } from './base';\n\nexport interface MinimalActivatedRouteSnapshot {\n  routeConfig: ActivatedRouteSnapshot['routeConfig'];\n  url: ActivatedRouteSnapshot['url'];\n  params: ActivatedRouteSnapshot['params'];\n  queryParams: ActivatedRouteSnapshot['queryParams'];\n  fragment: ActivatedRouteSnapshot['fragment'];\n  data: ActivatedRouteSnapshot['data'];\n  outlet: ActivatedRouteSnapshot['outlet'];\n  firstChild?: MinimalActivatedRouteSnapshot;\n  children: MinimalActivatedRouteSnapshot[];\n}\n\nexport interface MinimalRouterStateSnapshot extends BaseRouterStoreState {\n  root: MinimalActivatedRouteSnapshot;\n  url: string;\n}\n\nexport class MinimalRouterStateSerializer\n  implements RouterStateSerializer<MinimalRouterStateSnapshot> {\n  serialize(routerState: RouterStateSnapshot): MinimalRouterStateSnapshot {\n    return {\n      root: this.serializeRoute(routerState.root),\n      url: routerState.url,\n    };\n  }\n\n  private serializeRoute(\n    route: ActivatedRouteSnapshot\n  ): MinimalActivatedRouteSnapshot {\n    const children = route.children.map((c) => this.serializeRoute(c));\n    return {\n      params: route.params,\n      data: route.data,\n      url: route.url,\n      outlet: route.outlet,\n      routeConfig: route.routeConfig\n        ? {\n            path: route.routeConfig.path,\n            pathMatch: route.routeConfig.pathMatch,\n            redirectTo: route.routeConfig.redirectTo,\n            outlet: route.routeConfig.outlet,\n          }\n        : null,\n      queryParams: route.queryParams,\n      fragment: route.fragment,\n      firstChild: children[0],\n      children,\n    };\n  }\n}\n","import {\n  Inject,\n  InjectionToken,\n  ModuleWithProviders,\n  NgModule,\n  ErrorHandler,\n} from '@angular/core';\nimport {\n  NavigationCancel,\n  NavigationError,\n  NavigationEnd,\n  Router,\n  RoutesRecognized,\n  NavigationStart,\n  Event,\n  RouterEvent,\n} from '@angular/router';\nimport { select, Selector, Store } from '@ngrx/store';\nimport { withLatestFrom } from 'rxjs/operators';\n\nimport {\n  ROUTER_CANCEL,\n  ROUTER_ERROR,\n  ROUTER_NAVIGATED,\n  ROUTER_NAVIGATION,\n  ROUTER_REQUEST,\n} from './actions';\nimport { RouterReducerState } from './reducer';\nimport {\n  RouterStateSerializer,\n  BaseRouterStoreState,\n} from './serializers/base';\nimport {\n  DefaultRouterStateSerializer,\n  SerializedRouterStateSnapshot,\n} from './serializers/default_serializer';\nimport { MinimalRouterStateSerializer } from './serializers/minimal_serializer';\n\nexport type StateKeyOrSelector<\n  T extends BaseRouterStoreState = SerializedRouterStateSnapshot\n> = string | Selector<any, RouterReducerState<T>>;\n\n/**\n * Full = Serializes the router event with DefaultRouterStateSerializer\n * Minimal = Serializes the router event with MinimalRouterStateSerializer\n */\nexport const enum RouterState {\n  Full,\n  Minimal,\n}\n\nexport interface StoreRouterConfig<\n  T extends BaseRouterStoreState = SerializedRouterStateSnapshot\n> {\n  stateKey?: StateKeyOrSelector<T>;\n  serializer?: new (...args: any[]) => RouterStateSerializer;\n  /**\n   * By default, ROUTER_NAVIGATION is dispatched before guards and resolvers run.\n   * Therefore, the action could run too soon, for example\n   * there may be a navigation cancel due to a guard saying the navigation is not allowed.\n   * To run ROUTER_NAVIGATION after guards and resolvers,\n   * set this property to NavigationActionTiming.PostActivation.\n   */\n  navigationActionTiming?: NavigationActionTiming;\n  /**\n   * Decides which router serializer should be used, if there is none provided, and the metadata on the dispatched @ngrx/router-store action payload.\n   * Set to `Full` to use the `DefaultRouterStateSerializer` and to set the angular router events as payload.\n   * Set to `Minimal` to use the `MinimalRouterStateSerializer` and to set a minimal router event with the navigation id and url as payload.\n   */\n  routerState?: RouterState;\n}\n\ninterface StoreRouterActionPayload {\n  event: RouterEvent;\n  routerState?: SerializedRouterStateSnapshot;\n  storeState?: any;\n}\n\nexport enum NavigationActionTiming {\n  PreActivation = 1,\n  PostActivation = 2,\n}\n\nexport const _ROUTER_CONFIG = new InjectionToken(\n  '@ngrx/router-store Internal Configuration'\n);\nexport const ROUTER_CONFIG = new InjectionToken(\n  '@ngrx/router-store Configuration'\n);\nexport const DEFAULT_ROUTER_FEATURENAME = 'router';\n\nexport function _createRouterConfig(\n  config: StoreRouterConfig\n): StoreRouterConfig {\n  return {\n    stateKey: DEFAULT_ROUTER_FEATURENAME,\n    serializer: MinimalRouterStateSerializer,\n    navigationActionTiming: NavigationActionTiming.PreActivation,\n    ...config,\n  };\n}\n\nenum RouterTrigger {\n  NONE = 1,\n  ROUTER = 2,\n  STORE = 3,\n}\n\n/**\n * Connects RouterModule with StoreModule.\n *\n * During the navigation, before any guards or resolvers run, the router will dispatch\n * a ROUTER_NAVIGATION action, which has the following signature:\n *\n * ```\n * export type RouterNavigationPayload = {\n *   routerState: SerializedRouterStateSnapshot,\n *   event: RoutesRecognized\n * }\n * ```\n *\n * Either a reducer or an effect can be invoked in response to this action.\n * If the invoked reducer throws, the navigation will be canceled.\n *\n * If navigation gets canceled because of a guard, a ROUTER_CANCEL action will be\n * dispatched. If navigation results in an error, a ROUTER_ERROR action will be dispatched.\n *\n * Both ROUTER_CANCEL and ROUTER_ERROR contain the store state before the navigation\n * which can be used to restore the consistency of the store.\n *\n * Usage:\n *\n * ```typescript\n * @NgModule({\n *   declarations: [AppCmp, SimpleCmp],\n *   imports: [\n *     BrowserModule,\n *     StoreModule.forRoot(mapOfReducers),\n *     RouterModule.forRoot([\n *       { path: '', component: SimpleCmp },\n *       { path: 'next', component: SimpleCmp }\n *     ]),\n *     StoreRouterConnectingModule.forRoot()\n *   ],\n *   bootstrap: [AppCmp]\n * })\n * export class AppModule {\n * }\n * ```\n */\n@NgModule({})\nexport class StoreRouterConnectingModule {\n  static forRoot<\n    T extends BaseRouterStoreState = SerializedRouterStateSnapshot\n  >(\n    config: StoreRouterConfig<T> = {}\n  ): ModuleWithProviders<StoreRouterConnectingModule> {\n    return {\n      ngModule: StoreRouterConnectingModule,\n      providers: [\n        { provide: _ROUTER_CONFIG, useValue: config },\n        {\n          provide: ROUTER_CONFIG,\n          useFactory: _createRouterConfig,\n          deps: [_ROUTER_CONFIG],\n        },\n        {\n          provide: RouterStateSerializer,\n          useClass: config.serializer\n            ? config.serializer\n            : config.routerState === RouterState.Full\n            ? DefaultRouterStateSerializer\n            : MinimalRouterStateSerializer,\n        },\n      ],\n    };\n  }\n\n  private lastEvent: Event | null = null;\n  private routerState: SerializedRouterStateSnapshot | null = null;\n  private storeState: any;\n  private trigger = RouterTrigger.NONE;\n\n  private stateKey: StateKeyOrSelector;\n\n  constructor(\n    private store: Store<any>,\n    private router: Router,\n    private serializer: RouterStateSerializer<SerializedRouterStateSnapshot>,\n    private errorHandler: ErrorHandler,\n    @Inject(ROUTER_CONFIG) private config: StoreRouterConfig\n  ) {\n    this.stateKey = this.config.stateKey as StateKeyOrSelector;\n\n    this.setUpStoreStateListener();\n    this.setUpRouterEventsListener();\n  }\n\n  private setUpStoreStateListener(): void {\n    this.store\n      .pipe(select(this.stateKey as any), withLatestFrom(this.store))\n      .subscribe(([routerStoreState, storeState]) => {\n        this.navigateIfNeeded(routerStoreState, storeState);\n      });\n  }\n\n  private navigateIfNeeded(\n    routerStoreState: RouterReducerState,\n    storeState: any\n  ): void {\n    if (!routerStoreState || !routerStoreState.state) {\n      return;\n    }\n    if (this.trigger === RouterTrigger.ROUTER) {\n      return;\n    }\n    if (this.lastEvent instanceof NavigationStart) {\n      return;\n    }\n\n    const url = routerStoreState.state.url;\n    if (!isSameUrl(this.router.url, url)) {\n      this.storeState = storeState;\n      this.trigger = RouterTrigger.STORE;\n      this.router.navigateByUrl(url).catch((error) => {\n        this.errorHandler.handleError(error);\n      });\n    }\n  }\n\n  private setUpRouterEventsListener(): void {\n    const dispatchNavLate =\n      this.config.navigationActionTiming ===\n      NavigationActionTiming.PostActivation;\n    let routesRecognized: RoutesRecognized;\n\n    this.router.events\n      .pipe(withLatestFrom(this.store))\n      .subscribe(([event, storeState]) => {\n        this.lastEvent = event;\n\n        if (event instanceof NavigationStart) {\n          this.routerState = this.serializer.serialize(\n            this.router.routerState.snapshot\n          );\n          if (this.trigger !== RouterTrigger.STORE) {\n            this.storeState = storeState;\n            this.dispatchRouterRequest(event);\n          }\n        } else if (event instanceof RoutesRecognized) {\n          routesRecognized = event;\n\n          if (!dispatchNavLate && this.trigger !== RouterTrigger.STORE) {\n            this.dispatchRouterNavigation(event);\n          }\n        } else if (event instanceof NavigationCancel) {\n          this.dispatchRouterCancel(event);\n          this.reset();\n        } else if (event instanceof NavigationError) {\n          this.dispatchRouterError(event);\n          this.reset();\n        } else if (event instanceof NavigationEnd) {\n          if (this.trigger !== RouterTrigger.STORE) {\n            if (dispatchNavLate) {\n              this.dispatchRouterNavigation(routesRecognized);\n            }\n            this.dispatchRouterNavigated(event);\n          }\n          this.reset();\n        }\n      });\n  }\n\n  private dispatchRouterRequest(event: NavigationStart): void {\n    this.dispatchRouterAction(ROUTER_REQUEST, { event });\n  }\n\n  private dispatchRouterNavigation(\n    lastRoutesRecognized: RoutesRecognized\n  ): void {\n    const nextRouterState = this.serializer.serialize(\n      lastRoutesRecognized.state\n    );\n    this.dispatchRouterAction(ROUTER_NAVIGATION, {\n      routerState: nextRouterState,\n      event: new RoutesRecognized(\n        lastRoutesRecognized.id,\n        lastRoutesRecognized.url,\n        lastRoutesRecognized.urlAfterRedirects,\n        nextRouterState\n      ),\n    });\n  }\n\n  private dispatchRouterCancel(event: NavigationCancel): void {\n    this.dispatchRouterAction(ROUTER_CANCEL, {\n      storeState: this.storeState,\n      event,\n    });\n  }\n\n  private dispatchRouterError(event: NavigationError): void {\n    this.dispatchRouterAction(ROUTER_ERROR, {\n      storeState: this.storeState,\n      event: new NavigationError(event.id, event.url, `${event}`),\n    });\n  }\n\n  private dispatchRouterNavigated(event: NavigationEnd): void {\n    const routerState = this.serializer.serialize(\n      this.router.routerState.snapshot\n    );\n    this.dispatchRouterAction(ROUTER_NAVIGATED, { event, routerState });\n  }\n\n  private dispatchRouterAction(\n    type: string,\n    payload: StoreRouterActionPayload\n  ): void {\n    this.trigger = RouterTrigger.ROUTER;\n    try {\n      this.store.dispatch({\n        type,\n        payload: {\n          routerState: this.routerState,\n          ...payload,\n          event:\n            this.config.routerState === RouterState.Full\n              ? payload.event\n              : {\n                  id: payload.event.id,\n                  url: payload.event.url,\n                  // safe, as it will just be `undefined` for non-NavigationEnd router events\n                  urlAfterRedirects: (payload.event as NavigationEnd)\n                    .urlAfterRedirects,\n                },\n        },\n      });\n    } finally {\n      this.trigger = RouterTrigger.NONE;\n    }\n  }\n\n  private reset() {\n    this.trigger = RouterTrigger.NONE;\n    this.storeState = null;\n    this.routerState = null;\n  }\n}\n\n/**\n * Check if the URLs are matching. Accounts for the possibility of trailing \"/\" in url.\n */\nfunction isSameUrl(first: string, second: string): boolean {\n  return stripTrailingSlash(first) === stripTrailingSlash(second);\n}\n\nfunction stripTrailingSlash(text: string): string {\n  if (text.length > 0 && text[text.length - 1] === '/') {\n    return text.substring(0, text.length - 1);\n  }\n  return text;\n}\n","import { createSelector } from '@ngrx/store';\nimport { RouterStateSelectors } from './models';\nimport { RouterReducerState } from './reducer';\n\nexport function getSelectors<V>(\n  selectState: (state: V) => RouterReducerState<any>\n): RouterStateSelectors<V>;\nexport function getSelectors<V>(\n  selectState: (state: V) => RouterReducerState<any>\n): RouterStateSelectors<V> {\n  const selectRouterState = createSelector(\n    selectState,\n    (router) => router && router.state\n  );\n  const selectCurrentRoute = createSelector(\n    selectRouterState,\n    (routerState) => {\n      if (!routerState) {\n        return undefined;\n      }\n      let route = routerState.root;\n      while (route.firstChild) {\n        route = route.firstChild;\n      }\n      return route;\n    }\n  );\n  const selectFragment = createSelector(\n    selectCurrentRoute,\n    (route) => route && route.fragment\n  );\n  const selectQueryParams = createSelector(\n    selectCurrentRoute,\n    (route) => route && route.queryParams\n  );\n  const selectQueryParam = (param: string) =>\n    createSelector(selectQueryParams, (params) => params && params[param]);\n  const selectRouteParams = createSelector(\n    selectCurrentRoute,\n    (route) => route && route.params\n  );\n  const selectRouteParam = (param: string) =>\n    createSelector(selectRouteParams, (params) => params && params[param]);\n  const selectRouteData = createSelector(\n    selectCurrentRoute,\n    (route) => route && route.data\n  );\n  const selectUrl = createSelector(\n    selectRouterState,\n    (routerState) => routerState && routerState.url\n  );\n\n  return {\n    selectCurrentRoute,\n    selectFragment,\n    selectQueryParams,\n    selectQueryParam,\n    selectRouteParams,\n    selectRouteParam,\n    selectRouteData,\n    selectUrl,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}