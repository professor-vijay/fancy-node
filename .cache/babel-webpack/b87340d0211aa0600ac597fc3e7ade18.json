{"ast":null,"code":"\"use strict\";\n\nvar core_1 = require('@angular/core');\n\nvar ɵngcc0 = require('@angular/core');\n\nvar ChartComponent = function () {\n  function ChartComponent(elementRef, ngZone) {\n    this.elementRef = elementRef;\n    this.ngZone = ngZone;\n    this.clickCanvas = new core_1.EventEmitter();\n    this.clickDataset = new core_1.EventEmitter();\n    this.clickElements = new core_1.EventEmitter();\n    this.clickElement = new core_1.EventEmitter();\n  }\n\n  ChartComponent.prototype.ngOnInit = function () {\n    this.create();\n  };\n\n  ChartComponent.prototype.ngOnChanges = function (changes) {\n    var _this = this;\n\n    if (this.chart) {\n      if (changes['type'] || changes['options']) {\n        this.create();\n      } else if (changes['data']) {\n        var currentValue_1 = changes['data'].currentValue;\n        ['datasets', 'labels', 'xLabels', 'yLabels'].forEach(function (property) {\n          _this.chart.data[property] = currentValue_1[property];\n        });\n        this.chart.update();\n      }\n    }\n  };\n\n  ChartComponent.prototype.create = function () {\n    var _this = this;\n\n    this.ngZone.runOutsideAngular(function () {\n      if (_this.canvas) {\n        _this.elementRef.nativeElement.removeChild(_this.canvas);\n      }\n\n      _this.canvas = document.createElement('canvas');\n\n      _this.elementRef.nativeElement.appendChild(_this.canvas);\n\n      _this.chart = new Chart(_this.canvas, {\n        type: _this.type,\n        data: _this.data,\n        options: _this.options\n      });\n\n      _this.canvas.onclick = function (e) {\n        _this.ngZone.run(function () {\n          _this.clickCanvas.next(e);\n\n          if (_this.clickDataset.observers.length) {\n            _this.clickDataset.next(_this.chart.getDatasetAtEvent(e));\n          }\n\n          if (_this.clickElements.observers.length) {\n            _this.clickElements.next(_this.chart.getElementsAtEvent(e));\n          }\n\n          if (_this.clickElement.observers.length) {\n            _this.clickElement.next(_this.chart.getElementAtEvent(e));\n          }\n        });\n      };\n    });\n  };\n\n  ChartComponent.ctorParameters = function () {\n    return [{\n      type: core_1.ElementRef\n    }, {\n      type: core_1.NgZone\n    }];\n  };\n\n  ChartComponent.propDecorators = {\n    'type': [{\n      type: core_1.Input\n    }],\n    'data': [{\n      type: core_1.Input\n    }],\n    'options': [{\n      type: core_1.Input\n    }],\n    'clickCanvas': [{\n      type: core_1.Output\n    }],\n    'clickDataset': [{\n      type: core_1.Output\n    }],\n    'clickElements': [{\n      type: core_1.Output\n    }],\n    'clickElement': [{\n      type: core_1.Output\n    }]\n  };\n\n  ChartComponent.ɵfac = function ChartComponent_Factory(t) {\n    return new (t || ChartComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  ChartComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n    type: ChartComponent,\n    selectors: [[\"chart\"]],\n    inputs: {\n      type: \"type\",\n      data: \"data\",\n      options: \"options\"\n    },\n    outputs: {\n      clickCanvas: \"clickCanvas\",\n      clickDataset: \"clickDataset\",\n      clickElements: \"clickElements\",\n      clickElement: \"clickElement\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 0,\n    vars: 0,\n    template: function ChartComponent_Template(rf, ctx) {},\n    styles: [\"[_nghost-%COMP%] { display: block; }\"]\n  });\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(ChartComponent, [{\n      type: core_1.Component,\n      args: [{\n        selector: 'chart',\n        template: '',\n        styles: [':host { display: block; }']\n      }]\n    }], function () {\n      return [{\n        type: ɵngcc0.ElementRef\n      }, {\n        type: ɵngcc0.NgZone\n      }];\n    }, {\n      clickCanvas: [{\n        type: core_1.Output\n      }],\n      clickDataset: [{\n        type: core_1.Output\n      }],\n      clickElements: [{\n        type: core_1.Output\n      }],\n      clickElement: [{\n        type: core_1.Output\n      }],\n      type: [{\n        type: core_1.Input\n      }],\n      data: [{\n        type: core_1.Input\n      }],\n      options: [{\n        type: core_1.Input\n      }]\n    });\n  })();\n\n  return ChartComponent;\n}();\n\nexports.ChartComponent = ChartComponent;","map":{"version":3,"sources":["chart.component.js"],"names":[],"mappings":"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","sourcesContent":["\"use strict\";\nvar core_1 = require('@angular/core');\nvar ChartComponent = (function () {\n    function ChartComponent(elementRef, ngZone) {\n        this.elementRef = elementRef;\n        this.ngZone = ngZone;\n        this.clickCanvas = new core_1.EventEmitter();\n        this.clickDataset = new core_1.EventEmitter();\n        this.clickElements = new core_1.EventEmitter();\n        this.clickElement = new core_1.EventEmitter();\n    }\n    ChartComponent.prototype.ngOnInit = function () {\n        this.create();\n    };\n    ChartComponent.prototype.ngOnChanges = function (changes) {\n        var _this = this;\n        if (this.chart) {\n            if (changes['type'] || changes['options']) {\n                this.create();\n            }\n            else if (changes['data']) {\n                var currentValue_1 = changes['data'].currentValue;\n                ['datasets', 'labels', 'xLabels', 'yLabels'].forEach(function (property) {\n                    _this.chart.data[property] = currentValue_1[property];\n                });\n                this.chart.update();\n            }\n        }\n    };\n    ChartComponent.prototype.create = function () {\n        var _this = this;\n        this.ngZone.runOutsideAngular(function () {\n            if (_this.canvas) {\n                _this.elementRef.nativeElement.removeChild(_this.canvas);\n            }\n            _this.canvas = document.createElement('canvas');\n            _this.elementRef.nativeElement.appendChild(_this.canvas);\n            _this.chart = new Chart(_this.canvas, {\n                type: _this.type,\n                data: _this.data,\n                options: _this.options\n            });\n            _this.canvas.onclick = function (e) {\n                _this.ngZone.run(function () {\n                    _this.clickCanvas.next(e);\n                    if (_this.clickDataset.observers.length) {\n                        _this.clickDataset.next(_this.chart.getDatasetAtEvent(e));\n                    }\n                    if (_this.clickElements.observers.length) {\n                        _this.clickElements.next(_this.chart.getElementsAtEvent(e));\n                    }\n                    if (_this.clickElement.observers.length) {\n                        _this.clickElement.next(_this.chart.getElementAtEvent(e));\n                    }\n                });\n            };\n        });\n    };\n    ChartComponent.decorators = [\n        { type: core_1.Component, args: [{\n                    selector: 'chart',\n                    template: '',\n                    styles: [':host { display: block; }']\n                },] },\n    ];\n    ChartComponent.ctorParameters = function () { return [\n        { type: core_1.ElementRef, },\n        { type: core_1.NgZone, },\n    ]; };\n    ChartComponent.propDecorators = {\n        'type': [{ type: core_1.Input },],\n        'data': [{ type: core_1.Input },],\n        'options': [{ type: core_1.Input },],\n        'clickCanvas': [{ type: core_1.Output },],\n        'clickDataset': [{ type: core_1.Output },],\n        'clickElements': [{ type: core_1.Output },],\n        'clickElement': [{ type: core_1.Output },],\n    };\n    return ChartComponent;\n}());\nexports.ChartComponent = ChartComponent;\n"]},"metadata":{},"sourceType":"script"}