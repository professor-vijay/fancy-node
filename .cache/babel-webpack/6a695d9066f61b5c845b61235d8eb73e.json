{"ast":null,"code":"import _defineProperty from \"D:/queen-supermarket/Biz1Market_EXE/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"D:/queen-supermarket/Biz1Market_EXE/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"D:/queen-supermarket/Biz1Market_EXE/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/queen-supermarket/Biz1Market_EXE/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _slicedToArray from \"D:/queen-supermarket/Biz1Market_EXE/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Inject, Optional, PLATFORM_ID, NgZone, NgModule } from '@angular/core';\nimport { asyncScheduler, Observable, from, of } from 'rxjs';\nimport { startWith, pairwise, map, scan, distinctUntilChanged, filter, observeOn } from 'rxjs/operators';\nimport * as i1 from '@angular/fire';\nimport { ɵAngularFireSchedulers, ɵkeepUnstableUntilFirstFactory, ɵfirebaseAppFactory, ɵlogAuthEmulatorError, ɵfetchInstance, FIREBASE_OPTIONS, FIREBASE_APP_NAME } from '@angular/fire';\nimport { isPlatformServer } from '@angular/common';\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport * as i2 from '@angular/fire/auth';\nimport { USE_EMULATOR as USE_EMULATOR$1 } from '@angular/fire/auth';\nimport * as ɵngcc0 from '@angular/core';\n\nfunction _fromRef(ref) {\n  var scheduler = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : asyncScheduler;\n  return new Observable(function (subscriber) {\n    var unsubscribe;\n\n    if (scheduler != null) {\n      scheduler.schedule(function () {\n        unsubscribe = ref.onSnapshot({\n          includeMetadataChanges: true\n        }, subscriber);\n      });\n    } else {\n      unsubscribe = ref.onSnapshot({\n        includeMetadataChanges: true\n      }, subscriber);\n    }\n\n    return function () {\n      if (unsubscribe != null) {\n        unsubscribe();\n      }\n    };\n  });\n}\n\nfunction fromRef(ref, scheduler) {\n  return _fromRef(ref, scheduler);\n}\n\nfunction fromDocRef(ref, scheduler) {\n  return fromRef(ref, scheduler).pipe(startWith(undefined), pairwise(), map(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        priorPayload = _ref2[0],\n        payload = _ref2[1];\n\n    if (!payload.exists) {\n      return {\n        payload: payload,\n        type: 'removed'\n      };\n    }\n\n    if (!(priorPayload === null || priorPayload === void 0 ? void 0 : priorPayload.exists)) {\n      return {\n        payload: payload,\n        type: 'added'\n      };\n    }\n\n    return {\n      payload: payload,\n      type: 'modified'\n    };\n  }));\n}\n\nfunction fromCollectionRef(ref, scheduler) {\n  return fromRef(ref, scheduler).pipe(map(function (payload) {\n    return {\n      payload: payload,\n      type: 'query'\n    };\n  }));\n}\n/**\n * Return a stream of document changes on a query. These results are not in sort order but in\n * order of occurence.\n */\n\n\nfunction docChanges(query, scheduler) {\n  return fromCollectionRef(query, scheduler).pipe(startWith(undefined), pairwise(), map(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 2),\n        priorAction = _ref4[0],\n        action = _ref4[1];\n\n    var docChanges = action.payload.docChanges();\n    var actions = docChanges.map(function (change) {\n      return {\n        type: change.type,\n        payload: change\n      };\n    }); // the metadata has changed from the prior emission\n\n    if (priorAction && JSON.stringify(priorAction.payload.metadata) !== JSON.stringify(action.payload.metadata)) {\n      // go through all the docs in payload and figure out which ones changed\n      action.payload.docs.forEach(function (currentDoc, currentIndex) {\n        var docChange = docChanges.find(function (d) {\n          return d.doc.ref.isEqual(currentDoc.ref);\n        });\n        var priorDoc = priorAction === null || priorAction === void 0 ? void 0 : priorAction.payload.docs.find(function (d) {\n          return d.ref.isEqual(currentDoc.ref);\n        });\n\n        if (docChange && JSON.stringify(docChange.doc.metadata) === JSON.stringify(currentDoc.metadata) || !docChange && priorDoc && JSON.stringify(priorDoc.metadata) === JSON.stringify(currentDoc.metadata)) {// document doesn't appear to have changed, don't log another action\n        } else {\n          // since the actions are processed in order just push onto the array\n          actions.push({\n            type: 'modified',\n            payload: {\n              oldIndex: currentIndex,\n              newIndex: currentIndex,\n              type: 'modified',\n              doc: currentDoc\n            }\n          });\n        }\n      });\n    }\n\n    return actions;\n  }));\n}\n/**\n * Return a stream of document changes on a query. These results are in sort order.\n */\n\n\nfunction sortedChanges(query, events, scheduler) {\n  return docChanges(query, scheduler).pipe(scan(function (current, changes) {\n    return combineChanges(current, changes.map(function (it) {\n      return it.payload;\n    }), events);\n  }, []), distinctUntilChanged(), // cut down on unneed change cycles\n  map(function (changes) {\n    return changes.map(function (c) {\n      return {\n        type: c.type,\n        payload: c\n      };\n    });\n  }));\n}\n/**\n * Combines the total result set from the current set of changes from an incoming set\n * of changes.\n */\n\n\nfunction combineChanges(current, changes, events) {\n  changes.forEach(function (change) {\n    // skip unwanted change types\n    if (events.indexOf(change.type) > -1) {\n      current = combineChange(current, change);\n    }\n  });\n  return current;\n}\n/**\n * Splice arguments on top of a sliced array, to break top-level ===\n * this is useful for change-detection\n */\n\n\nfunction sliceAndSplice(original, start, deleteCount) {\n  var returnArray = original.slice();\n\n  for (var _len = arguments.length, args = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n    args[_key - 3] = arguments[_key];\n  }\n\n  returnArray.splice.apply(returnArray, [start, deleteCount].concat(args));\n  return returnArray;\n}\n/**\n * Creates a new sorted array from a new change.\n * Build our own because we allow filtering of action types ('added', 'removed', 'modified') before scanning\n * and so we have greater control over change detection (by breaking ===)\n */\n\n\nfunction combineChange(combined, change) {\n  switch (change.type) {\n    case 'added':\n      if (combined[change.newIndex] && combined[change.newIndex].doc.ref.isEqual(change.doc.ref)) {// Not sure why the duplicates are getting fired\n      } else {\n        return sliceAndSplice(combined, change.newIndex, 0, change);\n      }\n\n      break;\n\n    case 'modified':\n      if (combined[change.oldIndex] == null || combined[change.oldIndex].doc.ref.isEqual(change.doc.ref)) {\n        // When an item changes position we first remove it\n        // and then add it's new position\n        if (change.oldIndex !== change.newIndex) {\n          var copiedArray = combined.slice();\n          copiedArray.splice(change.oldIndex, 1);\n          copiedArray.splice(change.newIndex, 0, change);\n          return copiedArray;\n        } else {\n          return sliceAndSplice(combined, change.newIndex, 1, change);\n        }\n      }\n\n      break;\n\n    case 'removed':\n      if (combined[change.oldIndex] && combined[change.oldIndex].doc.ref.isEqual(change.doc.ref)) {\n        return sliceAndSplice(combined, change.oldIndex, 1);\n      }\n\n      break;\n  }\n\n  return combined;\n}\n\nfunction validateEventsArray(events) {\n  if (!events || events.length === 0) {\n    events = ['added', 'removed', 'modified'];\n  }\n\n  return events;\n}\n/**\n * AngularFirestoreCollection service\n *\n * This class creates a reference to a Firestore Collection. A reference and a query are provided in\n * in the constructor. The query can be the unqueried reference if no query is desired.The class\n * is generic which gives you type safety for data update methods and data streaming.\n *\n * This class uses Symbol.observable to transform into Observable using Observable.from().\n *\n * This class is rarely used directly and should be created from the AngularFirestore service.\n *\n * Example:\n *\n * const collectionRef = firebase.firestore.collection('stocks');\n * const query = collectionRef.where('price', '>', '0.01');\n * const fakeStock = new AngularFirestoreCollection<Stock>(collectionRef, query);\n *\n * // NOTE!: the updates are performed on the reference not the query\n * await fakeStock.add({ name: 'FAKE', price: 0.01 });\n *\n * // Subscribe to changes as snapshots. This provides you data updates as well as delta updates.\n * fakeStock.valueChanges().subscribe(value => console.log(value));\n */\n\n\nvar AngularFirestoreCollection = /*#__PURE__*/function () {\n  /**\n   * The constructor takes in a CollectionReference and Query to provide wrapper methods\n   * for data operations and data streaming.\n   *\n   * Note: Data operation methods are done on the reference not the query. This means\n   * when you update data it is not updating data to the window of your query unless\n   * the data fits the criteria of the query. See the AssociatedRefence type for details\n   * on this implication.\n   */\n  function AngularFirestoreCollection(ref, query, afs) {\n    _classCallCheck(this, AngularFirestoreCollection);\n\n    this.ref = ref;\n    this.query = query;\n    this.afs = afs;\n  }\n  /**\n   * Listen to the latest change in the stream. This method returns changes\n   * as they occur and they are not sorted by query order. This allows you to construct\n   * your own data structure.\n   */\n\n\n  _createClass(AngularFirestoreCollection, [{\n    key: \"stateChanges\",\n    value: function stateChanges(events) {\n      var source = docChanges(this.query, this.afs.schedulers.outsideAngular);\n\n      if (events && events.length > 0) {\n        source = source.pipe(map(function (actions) {\n          return actions.filter(function (change) {\n            return events.indexOf(change.type) > -1;\n          });\n        }));\n      }\n\n      return source.pipe( // We want to filter out empty arrays, but always emit at first, so the developer knows\n      // that the collection has been resolve; even if it's empty\n      startWith(undefined), pairwise(), filter(function (_ref5) {\n        var _ref6 = _slicedToArray(_ref5, 2),\n            prior = _ref6[0],\n            current = _ref6[1];\n\n        return current.length > 0 || !prior;\n      }), map(function (_ref7) {\n        var _ref8 = _slicedToArray(_ref7, 2),\n            prior = _ref8[0],\n            current = _ref8[1];\n\n        return current;\n      }), this.afs.keepUnstableUntilFirst);\n    }\n    /**\n     * Create a stream of changes as they occur it time. This method is similar to stateChanges()\n     * but it collects each event in an array over time.\n     */\n\n  }, {\n    key: \"auditTrail\",\n    value: function auditTrail(events) {\n      return this.stateChanges(events).pipe(scan(function (current, action) {\n        return [].concat(_toConsumableArray(current), _toConsumableArray(action));\n      }, []));\n    }\n    /**\n     * Create a stream of synchronized changes. This method keeps the local array in sorted\n     * query order.\n     */\n\n  }, {\n    key: \"snapshotChanges\",\n    value: function snapshotChanges(events) {\n      var validatedEvents = validateEventsArray(events);\n      var scheduledSortedChanges$ = sortedChanges(this.query, validatedEvents, this.afs.schedulers.outsideAngular);\n      return scheduledSortedChanges$.pipe(this.afs.keepUnstableUntilFirst);\n    }\n  }, {\n    key: \"valueChanges\",\n    value: function valueChanges() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return fromCollectionRef(this.query, this.afs.schedulers.outsideAngular).pipe(map(function (actions) {\n        return actions.payload.docs.map(function (a) {\n          if (options.idField) {\n            return Object.assign(Object.assign({}, a.data()), _defineProperty({}, options.idField, a.id));\n          } else {\n            return a.data();\n          }\n        });\n      }), this.afs.keepUnstableUntilFirst);\n    }\n    /**\n     * Retrieve the results of the query once.\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(options) {\n      return from(this.query.get(options)).pipe(observeOn(this.afs.schedulers.insideAngular));\n    }\n    /**\n     * Add data to a collection reference.\n     *\n     * Note: Data operation methods are done on the reference not the query. This means\n     * when you update data it is not updating data to the window of your query unless\n     * the data fits the criteria of the query.\n     */\n\n  }, {\n    key: \"add\",\n    value: function add(data) {\n      return this.ref.add(data);\n    }\n    /**\n     * Create a reference to a single document in a collection.\n     */\n\n  }, {\n    key: \"doc\",\n    value: function doc(path) {\n      // TODO is there a better way to solve this type issue\n      return new AngularFirestoreDocument(this.ref.doc(path), this.afs);\n    }\n  }]);\n\n  return AngularFirestoreCollection;\n}();\n/**\n * AngularFirestoreDocument service\n *\n * This class creates a reference to a Firestore Document. A reference is provided in\n * in the constructor. The class is generic which gives you type safety for data update\n * methods and data streaming.\n *\n * This class uses Symbol.observable to transform into Observable using Observable.from().\n *\n * This class is rarely used directly and should be created from the AngularFirestore service.\n *\n * Example:\n *\n * const fakeStock = new AngularFirestoreDocument<Stock>(doc('stocks/FAKE'));\n * await fakeStock.set({ name: 'FAKE', price: 0.01 });\n * fakeStock.valueChanges().map(snap => {\n *   if(snap.exists) return snap.data();\n *   return null;\n * }).subscribe(value => console.log(value));\n * // OR! Transform using Observable.from() and the data is unwrapped for you\n * Observable.from(fakeStock).subscribe(value => console.log(value));\n */\n\n\nvar AngularFirestoreDocument = /*#__PURE__*/function () {\n  /**\n   * The constructor takes in a DocumentReference to provide wrapper methods\n   * for data operations, data streaming, and Symbol.observable.\n   */\n  function AngularFirestoreDocument(ref, afs) {\n    _classCallCheck(this, AngularFirestoreDocument);\n\n    this.ref = ref;\n    this.afs = afs;\n  }\n  /**\n   * Create or overwrite a single document.\n   */\n\n\n  _createClass(AngularFirestoreDocument, [{\n    key: \"set\",\n    value: function set(data, options) {\n      return this.ref.set(data, options);\n    }\n    /**\n     * Update some fields of a document without overwriting the entire document.\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(data) {\n      return this.ref.update(data);\n    }\n    /**\n     * Delete a document.\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete() {\n      return this.ref.delete();\n    }\n    /**\n     * Create a reference to a sub-collection given a path and an optional query\n     * function.\n     */\n\n  }, {\n    key: \"collection\",\n    value: function collection(path, queryFn) {\n      var collectionRef = this.ref.collection(path);\n\n      var _associateQuery = associateQuery(collectionRef, queryFn),\n          ref = _associateQuery.ref,\n          query = _associateQuery.query;\n\n      return new AngularFirestoreCollection(ref, query, this.afs);\n    }\n    /**\n     * Listen to snapshot updates from the document.\n     */\n\n  }, {\n    key: \"snapshotChanges\",\n    value: function snapshotChanges() {\n      var scheduledFromDocRef$ = fromDocRef(this.ref, this.afs.schedulers.outsideAngular);\n      return scheduledFromDocRef$.pipe(this.afs.keepUnstableUntilFirst);\n    }\n  }, {\n    key: \"valueChanges\",\n    value: function valueChanges() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.snapshotChanges().pipe(map(function (_ref9) {\n        var payload = _ref9.payload;\n        return options.idField ? Object.assign(Object.assign({}, payload.data()), _defineProperty({}, options.idField, payload.id)) : payload.data();\n      }));\n    }\n    /**\n     * Retrieve the document once.\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(options) {\n      return from(this.ref.get(options)).pipe(observeOn(this.afs.schedulers.insideAngular));\n    }\n  }]);\n\n  return AngularFirestoreDocument;\n}();\n/**\n * AngularFirestoreCollectionGroup service\n *\n * This class holds a reference to a Firestore Collection Group Query.\n *\n * This class uses Symbol.observable to transform into Observable using Observable.from().\n *\n * This class is rarely used directly and should be created from the AngularFirestore service.\n *\n * Example:\n *\n * const collectionGroup = firebase.firestore.collectionGroup('stocks');\n * const query = collectionRef.where('price', '>', '0.01');\n * const fakeStock = new AngularFirestoreCollectionGroup<Stock>(query, afs);\n *\n * // Subscribe to changes as snapshots. This provides you data updates as well as delta updates.\n * fakeStock.valueChanges().subscribe(value => console.log(value));\n */\n\n\nvar AngularFirestoreCollectionGroup = /*#__PURE__*/function () {\n  /**\n   * The constructor takes in a CollectionGroupQuery to provide wrapper methods\n   * for data operations and data streaming.\n   */\n  function AngularFirestoreCollectionGroup(query, afs) {\n    _classCallCheck(this, AngularFirestoreCollectionGroup);\n\n    this.query = query;\n    this.afs = afs;\n  }\n  /**\n   * Listen to the latest change in the stream. This method returns changes\n   * as they occur and they are not sorted by query order. This allows you to construct\n   * your own data structure.\n   */\n\n\n  _createClass(AngularFirestoreCollectionGroup, [{\n    key: \"stateChanges\",\n    value: function stateChanges(events) {\n      if (!events || events.length === 0) {\n        return docChanges(this.query, this.afs.schedulers.outsideAngular).pipe(this.afs.keepUnstableUntilFirst);\n      }\n\n      return docChanges(this.query, this.afs.schedulers.outsideAngular).pipe(map(function (actions) {\n        return actions.filter(function (change) {\n          return events.indexOf(change.type) > -1;\n        });\n      }), filter(function (changes) {\n        return changes.length > 0;\n      }), this.afs.keepUnstableUntilFirst);\n    }\n    /**\n     * Create a stream of changes as they occur it time. This method is similar to stateChanges()\n     * but it collects each event in an array over time.\n     */\n\n  }, {\n    key: \"auditTrail\",\n    value: function auditTrail(events) {\n      return this.stateChanges(events).pipe(scan(function (current, action) {\n        return [].concat(_toConsumableArray(current), _toConsumableArray(action));\n      }, []));\n    }\n    /**\n     * Create a stream of synchronized changes. This method keeps the local array in sorted\n     * query order.\n     */\n\n  }, {\n    key: \"snapshotChanges\",\n    value: function snapshotChanges(events) {\n      var validatedEvents = validateEventsArray(events);\n      var scheduledSortedChanges$ = sortedChanges(this.query, validatedEvents, this.afs.schedulers.outsideAngular);\n      return scheduledSortedChanges$.pipe(this.afs.keepUnstableUntilFirst);\n    }\n  }, {\n    key: \"valueChanges\",\n    value: function valueChanges() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var fromCollectionRefScheduled$ = fromCollectionRef(this.query, this.afs.schedulers.outsideAngular);\n      return fromCollectionRefScheduled$.pipe(map(function (actions) {\n        return actions.payload.docs.map(function (a) {\n          if (options.idField) {\n            return Object.assign(_defineProperty({}, options.idField, a.id), a.data());\n          } else {\n            return a.data();\n          }\n        });\n      }), this.afs.keepUnstableUntilFirst);\n    }\n    /**\n     * Retrieve the results of the query once.\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(options) {\n      return from(this.query.get(options)).pipe(observeOn(this.afs.schedulers.insideAngular));\n    }\n  }]);\n\n  return AngularFirestoreCollectionGroup;\n}();\n/**\n * The value of this token determines whether or not the firestore will have persistance enabled\n */\n\n\nvar ENABLE_PERSISTENCE = new InjectionToken('angularfire2.enableFirestorePersistence');\nvar PERSISTENCE_SETTINGS = new InjectionToken('angularfire2.firestore.persistenceSettings');\nvar SETTINGS = new InjectionToken('angularfire2.firestore.settings');\nvar USE_EMULATOR = new InjectionToken('angularfire2.firestore.use-emulator');\n/**\n * A utility methods for associating a collection reference with\n * a query.\n *\n * @param collectionRef - A collection reference to query\n * @param queryFn - The callback to create a query\n *\n * Example:\n * const { query, ref } = associateQuery(docRef.collection('items'), ref => {\n *  return ref.where('age', '<', 200);\n * });\n */\n\nfunction associateQuery(collectionRef) {\n  var queryFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (ref) {\n    return ref;\n  };\n  var query = queryFn(collectionRef);\n  var ref = collectionRef;\n  return {\n    query: query,\n    ref: ref\n  };\n}\n/**\n * AngularFirestore Service\n *\n * This service is the main entry point for this feature module. It provides\n * an API for creating Collection and Reference services. These services can\n * then be used to do data updates and observable streams of the data.\n *\n * Example:\n *\n * import { Component } from '@angular/core';\n * import { AngularFirestore, AngularFirestoreCollection, AngularFirestoreDocument } from '@angular/fire/firestore';\n * import { Observable } from 'rxjs/Observable';\n * import { from } from 'rxjs/observable';\n *\n * @Component({\n *   selector: 'app-my-component',\n *   template: `\n *    <h2>Items for {{ (profile | async)?.name }}\n *    <ul>\n *       <li *ngFor=\"let item of items | async\">{{ item.name }}</li>\n *    </ul>\n *    <div class=\"control-input\">\n *       <input type=\"text\" #itemname />\n *       <button (click)=\"addItem(itemname.value)\">Add Item</button>\n *    </div>\n *   `\n * })\n * export class MyComponent implements OnInit {\n *\n *   // services for data operations and data streaming\n *   private readonly itemsRef: AngularFirestoreCollection<Item>;\n *   private readonly profileRef: AngularFirestoreDocument<Profile>;\n *\n *   // observables for template\n *   items: Observable<Item[]>;\n *   profile: Observable<Profile>;\n *\n *   // inject main service\n *   constructor(private readonly afs: AngularFirestore) {}\n *\n *   ngOnInit() {\n *     this.itemsRef = afs.collection('items', ref => ref.where('user', '==', 'davideast').limit(10));\n *     this.items = this.itemsRef.valueChanges().map(snap => snap.docs.map(data => doc.data()));\n *     // this.items = from(this.itemsRef); // you can also do this with no mapping\n *\n *     this.profileRef = afs.doc('users/davideast');\n *     this.profile = this.profileRef.valueChanges();\n *   }\n *\n *   addItem(name: string) {\n *     const user = 'davideast';\n *     this.itemsRef.add({ name, user });\n *   }\n * }\n */\n\n\nvar AngularFirestore = /*#__PURE__*/function () {\n  /**\n   * Each Feature of AngularFire has a FirebaseApp injected. This way we\n   * don't rely on the main Firebase App instance and we can create named\n   * apps and use multiple apps.\n   */\n  function AngularFirestore(options, nameOrConfig, shouldEnablePersistence, settings, // tslint:disable-next-line:ban-types\n  platformId, zone, persistenceSettings, _useEmulator, useAuthEmulator) {\n    _classCallCheck(this, AngularFirestore);\n\n    this.schedulers = new ɵAngularFireSchedulers(zone);\n    this.keepUnstableUntilFirst = ɵkeepUnstableUntilFirstFactory(this.schedulers);\n    var app = ɵfirebaseAppFactory(options, zone, nameOrConfig);\n\n    if (!firebase.auth && useAuthEmulator) {\n      ɵlogAuthEmulatorError();\n    }\n\n    var useEmulator = _useEmulator;\n\n    var _ɵfetchInstance = ɵfetchInstance(\"\".concat(app.name, \".firestore\"), 'AngularFirestore', app, function () {\n      var firestore = zone.runOutsideAngular(function () {\n        return app.firestore();\n      });\n\n      if (settings) {\n        firestore.settings(settings);\n      }\n\n      if (useEmulator) {\n        firestore.useEmulator.apply(firestore, _toConsumableArray(useEmulator));\n      }\n\n      if (shouldEnablePersistence && !isPlatformServer(platformId)) {\n        // We need to try/catch here because not all enablePersistence() failures are caught\n        // https://github.com/firebase/firebase-js-sdk/issues/608\n        var enablePersistence = function enablePersistence() {\n          try {\n            return from(firestore.enablePersistence(persistenceSettings || undefined).then(function () {\n              return true;\n            }, function () {\n              return false;\n            }));\n          } catch (e) {\n            if (typeof console !== 'undefined') {\n              console.warn(e);\n            }\n\n            return of(false);\n          }\n        };\n\n        return [firestore, zone.runOutsideAngular(enablePersistence)];\n      } else {\n        return [firestore, of(false)];\n      }\n    }, [settings, useEmulator, shouldEnablePersistence]);\n\n    var _ɵfetchInstance2 = _slicedToArray(_ɵfetchInstance, 2);\n\n    this.firestore = _ɵfetchInstance2[0];\n    this.persistenceEnabled$ = _ɵfetchInstance2[1];\n  }\n\n  _createClass(AngularFirestore, [{\n    key: \"collection\",\n    value: function collection(pathOrRef, queryFn) {\n      var collectionRef;\n\n      if (typeof pathOrRef === 'string') {\n        collectionRef = this.firestore.collection(pathOrRef);\n      } else {\n        collectionRef = pathOrRef;\n      }\n\n      var _associateQuery2 = associateQuery(collectionRef, queryFn),\n          ref = _associateQuery2.ref,\n          query = _associateQuery2.query;\n\n      var refInZone = this.schedulers.ngZone.run(function () {\n        return ref;\n      });\n      return new AngularFirestoreCollection(refInZone, query, this);\n    }\n    /**\n     * Create a reference to a Firestore Collection Group based on a collectionId\n     * and an optional query function to narrow the result\n     * set.\n     */\n\n  }, {\n    key: \"collectionGroup\",\n    value: function collectionGroup(collectionId, queryGroupFn) {\n      var queryFn = queryGroupFn || function (ref) {\n        return ref;\n      };\n\n      var collectionGroup = this.firestore.collectionGroup(collectionId);\n      return new AngularFirestoreCollectionGroup(queryFn(collectionGroup), this);\n    }\n  }, {\n    key: \"doc\",\n    value: function doc(pathOrRef) {\n      var ref;\n\n      if (typeof pathOrRef === 'string') {\n        ref = this.firestore.doc(pathOrRef);\n      } else {\n        ref = pathOrRef;\n      }\n\n      var refInZone = this.schedulers.ngZone.run(function () {\n        return ref;\n      });\n      return new AngularFirestoreDocument(refInZone, this);\n    }\n    /**\n     * Returns a generated Firestore Document Id.\n     */\n\n  }, {\n    key: \"createId\",\n    value: function createId() {\n      return this.firestore.collection('_').doc().id;\n    }\n  }]);\n\n  return AngularFirestore;\n}();\n\nAngularFirestore.ɵfac = function AngularFirestore_Factory(t) {\n  return new (t || AngularFirestore)(ɵngcc0.ɵɵinject(FIREBASE_OPTIONS), ɵngcc0.ɵɵinject(FIREBASE_APP_NAME, 8), ɵngcc0.ɵɵinject(ENABLE_PERSISTENCE, 8), ɵngcc0.ɵɵinject(SETTINGS, 8), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(PERSISTENCE_SETTINGS, 8), ɵngcc0.ɵɵinject(USE_EMULATOR, 8), ɵngcc0.ɵɵinject(USE_EMULATOR$1, 8));\n};\n/** @nocollapse */\n\n\nAngularFirestore.ɵprov = i0.ɵɵdefineInjectable({\n  factory: function AngularFirestore_Factory() {\n    return new AngularFirestore(i0.ɵɵinject(i1.FIREBASE_OPTIONS), i0.ɵɵinject(i1.FIREBASE_APP_NAME, 8), i0.ɵɵinject(ENABLE_PERSISTENCE, 8), i0.ɵɵinject(SETTINGS, 8), i0.ɵɵinject(i0.PLATFORM_ID), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(PERSISTENCE_SETTINGS, 8), i0.ɵɵinject(USE_EMULATOR, 8), i0.ɵɵinject(i2.USE_EMULATOR, 8));\n  },\n  token: AngularFirestore,\n  providedIn: \"any\"\n});\n/** @nocollapse */\n\nAngularFirestore.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [FIREBASE_OPTIONS]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [FIREBASE_APP_NAME]\n    }]\n  }, {\n    type: Boolean,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [ENABLE_PERSISTENCE]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [SETTINGS]\n    }]\n  }, {\n    type: Object,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }, {\n    type: NgZone\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [PERSISTENCE_SETTINGS]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [USE_EMULATOR]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [USE_EMULATOR$1]\n    }]\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AngularFirestore, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'any'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [FIREBASE_OPTIONS]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [FIREBASE_APP_NAME]\n      }]\n    }, {\n      type: Boolean,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ENABLE_PERSISTENCE]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [SETTINGS]\n      }]\n    }, {\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [PERSISTENCE_SETTINGS]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [USE_EMULATOR]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [USE_EMULATOR$1]\n      }]\n    }];\n  }, null);\n})();\n\nvar AngularFirestoreModule = /*#__PURE__*/function () {\n  function AngularFirestoreModule() {\n    _classCallCheck(this, AngularFirestoreModule);\n  }\n\n  _createClass(AngularFirestoreModule, null, [{\n    key: \"enablePersistence\",\n    value:\n    /**\n     * Attempt to enable persistent storage, if possible\n     */\n    function enablePersistence(persistenceSettings) {\n      return {\n        ngModule: AngularFirestoreModule,\n        providers: [{\n          provide: ENABLE_PERSISTENCE,\n          useValue: true\n        }, {\n          provide: PERSISTENCE_SETTINGS,\n          useValue: persistenceSettings\n        }]\n      };\n    }\n  }]);\n\n  return AngularFirestoreModule;\n}();\n\nAngularFirestoreModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: AngularFirestoreModule\n});\nAngularFirestoreModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function AngularFirestoreModule_Factory(t) {\n    return new (t || AngularFirestoreModule)();\n  },\n  providers: [AngularFirestore]\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AngularFirestoreModule, [{\n    type: NgModule,\n    args: [{\n      providers: [AngularFirestore]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { AngularFirestore, AngularFirestoreCollection, AngularFirestoreCollectionGroup, AngularFirestoreDocument, AngularFirestoreModule, ENABLE_PERSISTENCE, PERSISTENCE_SETTINGS, SETTINGS, USE_EMULATOR, associateQuery, combineChange, combineChanges, docChanges, fromCollectionRef, fromDocRef, fromRef, sortedChanges, validateEventsArray };","map":{"version":3,"sources":["../../../src/firestore/observable/fromRef.ts","../../../src/firestore/collection/changes.ts","../../../src/firestore/collection/collection.ts","../../../src/firestore/document/document.ts","../../../src/firestore/collection-group/collection-group.ts","../../../src/firestore/firestore.ts","../../../src/firestore/firestore.module.ts","../../../src/firestore/angular-fire-firestore.ts"],"names":["USE_AUTH_EMULATOR"],"mappings":"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","sourcesContent":["import { asyncScheduler, Observable, SchedulerLike } from 'rxjs';\nimport { Action, DocumentReference, DocumentSnapshot, Query, QuerySnapshot, Reference } from '../interfaces';\nimport { map, pairwise, startWith } from 'rxjs/operators';\n\nfunction _fromRef<T, R>(ref: Reference<T>, scheduler: SchedulerLike = asyncScheduler): Observable<R> {\n  return new Observable(subscriber => {\n    let unsubscribe: () => void;\n    if (scheduler != null) {\n      scheduler.schedule(() => {\n        unsubscribe = ref.onSnapshot({ includeMetadataChanges: true }, subscriber);\n      });\n    } else {\n      unsubscribe = ref.onSnapshot({ includeMetadataChanges: true }, subscriber);\n    }\n\n    return () => {\n      if (unsubscribe != null) {\n        unsubscribe();\n      }\n    };\n  });\n}\n\nexport function fromRef<R, T>(ref: DocumentReference<T> | Query<T>, scheduler?: SchedulerLike) {\n  return _fromRef<typeof ref, R>(ref, scheduler);\n}\n\nexport function fromDocRef<T>(ref: DocumentReference<T>, scheduler?: SchedulerLike): Observable<Action<DocumentSnapshot<T>>> {\n  return fromRef<DocumentSnapshot<T>, T>(ref, scheduler)\n    .pipe(\n      startWith(undefined),\n      pairwise(),\n      map(([priorPayload, payload]) => {\n        if (!payload.exists) {\n          return { payload, type: 'removed' };\n        }\n        if (!priorPayload?.exists) {\n          return { payload, type: 'added' };\n        }\n        return { payload, type: 'modified' };\n      })\n    );\n}\n\nexport function fromCollectionRef<T>(ref: Query<T>, scheduler?: SchedulerLike): Observable<Action<QuerySnapshot<T>>> {\n  return fromRef<QuerySnapshot<T>, T>(ref, scheduler).pipe(map(payload => ({ payload, type: 'query' })));\n}\n","import { fromCollectionRef } from '../observable/fromRef';\nimport { Observable, SchedulerLike } from 'rxjs';\nimport { distinctUntilChanged, map, pairwise, scan, startWith } from 'rxjs/operators';\nimport { DocumentChange, DocumentChangeAction, DocumentChangeType, Query } from '../interfaces';\n\n/**\n * Return a stream of document changes on a query. These results are not in sort order but in\n * order of occurence.\n */\nexport function docChanges<T>(query: Query, scheduler?: SchedulerLike): Observable<DocumentChangeAction<T>[]> {\n  return fromCollectionRef(query, scheduler)\n    .pipe(\n      startWith(undefined),\n      pairwise(),\n      map(([priorAction, action]) => {\n        const docChanges = action.payload.docChanges();\n        const actions = docChanges.map(change => ({ type: change.type, payload: change }));\n        // the metadata has changed from the prior emission\n        if (priorAction && JSON.stringify(priorAction.payload.metadata) !== JSON.stringify(action.payload.metadata)) {\n          // go through all the docs in payload and figure out which ones changed\n          action.payload.docs.forEach((currentDoc, currentIndex) => {\n            const docChange = docChanges.find(d => d.doc.ref.isEqual(currentDoc.ref));\n            const priorDoc = priorAction?.payload.docs.find(d => d.ref.isEqual(currentDoc.ref));\n            if (docChange && JSON.stringify(docChange.doc.metadata) === JSON.stringify(currentDoc.metadata) ||\n              !docChange && priorDoc && JSON.stringify(priorDoc.metadata) === JSON.stringify(currentDoc.metadata)) {\n              // document doesn't appear to have changed, don't log another action\n            } else {\n              // since the actions are processed in order just push onto the array\n              actions.push({\n                type: 'modified',\n                payload: {\n                  oldIndex: currentIndex,\n                  newIndex: currentIndex,\n                  type: 'modified',\n                  doc: currentDoc\n                }\n              });\n            }\n          });\n        }\n        return actions as DocumentChangeAction<T>[];\n      }),\n  );\n}\n\n/**\n * Return a stream of document changes on a query. These results are in sort order.\n */\nexport function sortedChanges<T>(\n  query: Query,\n  events: DocumentChangeType[],\n  scheduler?: SchedulerLike): Observable<DocumentChangeAction<T>[]> {\n  return docChanges<T>(query, scheduler)\n    .pipe(\n      scan((current, changes) => combineChanges<T>(current, changes.map(it => it.payload), events), []),\n      distinctUntilChanged(), // cut down on unneed change cycles\n      map(changes => changes.map(c => ({ type: c.type, payload: c } as DocumentChangeAction<T>))));\n}\n\n/**\n * Combines the total result set from the current set of changes from an incoming set\n * of changes.\n */\nexport function combineChanges<T>(current: DocumentChange<T>[], changes: DocumentChange<T>[], events: DocumentChangeType[]) {\n  changes.forEach(change => {\n    // skip unwanted change types\n    if (events.indexOf(change.type) > -1) {\n      current = combineChange(current, change);\n    }\n  });\n  return current;\n}\n\n/**\n * Splice arguments on top of a sliced array, to break top-level ===\n * this is useful for change-detection\n */\nfunction sliceAndSplice<T>(\n  original: T[],\n  start: number,\n  deleteCount: number,\n  ...args: T[]\n): T[] {\n  const returnArray = original.slice();\n  returnArray.splice(start, deleteCount, ...args);\n  return returnArray;\n}\n\n/**\n * Creates a new sorted array from a new change.\n * Build our own because we allow filtering of action types ('added', 'removed', 'modified') before scanning\n * and so we have greater control over change detection (by breaking ===)\n */\nexport function combineChange<T>(combined: DocumentChange<T>[], change: DocumentChange<T>): DocumentChange<T>[] {\n  switch (change.type) {\n    case 'added':\n      if (combined[change.newIndex] && combined[change.newIndex].doc.ref.isEqual(change.doc.ref)) {\n        // Not sure why the duplicates are getting fired\n      } else {\n        return sliceAndSplice(combined, change.newIndex, 0, change);\n      }\n      break;\n    case 'modified':\n      if (combined[change.oldIndex] == null || combined[change.oldIndex].doc.ref.isEqual(change.doc.ref)) {\n        // When an item changes position we first remove it\n        // and then add it's new position\n        if (change.oldIndex !== change.newIndex) {\n          const copiedArray = combined.slice();\n          copiedArray.splice(change.oldIndex, 1);\n          copiedArray.splice(change.newIndex, 0, change);\n          return copiedArray;\n        } else {\n          return sliceAndSplice(combined, change.newIndex, 1, change);\n        }\n      }\n      break;\n    case 'removed':\n      if (combined[change.oldIndex] && combined[change.oldIndex].doc.ref.isEqual(change.doc.ref)) {\n        return sliceAndSplice(combined, change.oldIndex, 1);\n      }\n      break;\n  }\n  return combined;\n}\n","import { from, Observable } from 'rxjs';\nimport { fromCollectionRef } from '../observable/fromRef';\nimport { filter, map, observeOn, pairwise, scan, startWith } from 'rxjs/operators';\nimport firebase from 'firebase/app';\n\nimport { CollectionReference, DocumentChangeAction, DocumentChangeType, DocumentData, DocumentReference, Query } from '../interfaces';\nimport { docChanges, sortedChanges } from './changes';\nimport { AngularFirestoreDocument } from '../document/document';\nimport { AngularFirestore } from '../firestore';\n\nexport function validateEventsArray(events?: DocumentChangeType[]) {\n  if (!events || events.length === 0) {\n    events = ['added', 'removed', 'modified'];\n  }\n  return events;\n}\n\n/**\n * AngularFirestoreCollection service\n *\n * This class creates a reference to a Firestore Collection. A reference and a query are provided in\n * in the constructor. The query can be the unqueried reference if no query is desired.The class\n * is generic which gives you type safety for data update methods and data streaming.\n *\n * This class uses Symbol.observable to transform into Observable using Observable.from().\n *\n * This class is rarely used directly and should be created from the AngularFirestore service.\n *\n * Example:\n *\n * const collectionRef = firebase.firestore.collection('stocks');\n * const query = collectionRef.where('price', '>', '0.01');\n * const fakeStock = new AngularFirestoreCollection<Stock>(collectionRef, query);\n *\n * // NOTE!: the updates are performed on the reference not the query\n * await fakeStock.add({ name: 'FAKE', price: 0.01 });\n *\n * // Subscribe to changes as snapshots. This provides you data updates as well as delta updates.\n * fakeStock.valueChanges().subscribe(value => console.log(value));\n */\nexport class AngularFirestoreCollection<T = DocumentData> {\n  /**\n   * The constructor takes in a CollectionReference and Query to provide wrapper methods\n   * for data operations and data streaming.\n   *\n   * Note: Data operation methods are done on the reference not the query. This means\n   * when you update data it is not updating data to the window of your query unless\n   * the data fits the criteria of the query. See the AssociatedRefence type for details\n   * on this implication.\n   */\n  constructor(\n    public readonly ref: CollectionReference<T>,\n    private readonly query: Query<T>,\n    private readonly afs: AngularFirestore) { }\n\n  /**\n   * Listen to the latest change in the stream. This method returns changes\n   * as they occur and they are not sorted by query order. This allows you to construct\n   * your own data structure.\n   */\n  stateChanges(events?: DocumentChangeType[]): Observable<DocumentChangeAction<T>[]> {\n    let source = docChanges<T>(this.query, this.afs.schedulers.outsideAngular);\n    if (events && events.length > 0) {\n      source = source.pipe(\n        map(actions => actions.filter(change => events.indexOf(change.type) > -1))\n      );\n    }\n    return source.pipe(\n      // We want to filter out empty arrays, but always emit at first, so the developer knows\n      // that the collection has been resolve; even if it's empty\n      startWith(undefined),\n      pairwise(),\n      filter(([prior, current]) => current.length > 0 || !prior),\n      map(([prior, current]) => current),\n      this.afs.keepUnstableUntilFirst\n    );\n  }\n\n  /**\n   * Create a stream of changes as they occur it time. This method is similar to stateChanges()\n   * but it collects each event in an array over time.\n   */\n  auditTrail(events?: DocumentChangeType[]): Observable<DocumentChangeAction<T>[]> {\n    return this.stateChanges(events).pipe(scan((current, action) => [...current, ...action], []));\n  }\n\n  /**\n   * Create a stream of synchronized changes. This method keeps the local array in sorted\n   * query order.\n   */\n  snapshotChanges(events?: DocumentChangeType[]): Observable<DocumentChangeAction<T>[]> {\n    const validatedEvents = validateEventsArray(events);\n    const scheduledSortedChanges$ = sortedChanges<T>(this.query, validatedEvents, this.afs.schedulers.outsideAngular);\n    return scheduledSortedChanges$.pipe(\n      this.afs.keepUnstableUntilFirst\n    );\n  }\n\n  /**\n   * Listen to all documents in the collection and its possible query as an Observable.\n   *\n   * If the `idField` option is provided, document IDs are included and mapped to the\n   * provided `idField` property name.\n   */\n  valueChanges(): Observable<T[]>;\n  // tslint:disable-next-line:unified-signatures\n  valueChanges({}): Observable<T[]>;\n  valueChanges<K extends string>(options: {idField: K}): Observable<(T & { [T in K]: string })[]>;\n  valueChanges<K extends string>(options: {idField?: K} = {}): Observable<T[]> {\n    return fromCollectionRef<T>(this.query, this.afs.schedulers.outsideAngular)\n      .pipe(\n        map(actions => actions.payload.docs.map(a => {\n          if (options.idField) {\n            return {\n              ...a.data() as {},\n              ...{ [options.idField]: a.id }\n            } as T & { [T in K]: string };\n          } else {\n            return a.data();\n          }\n        })),\n        this.afs.keepUnstableUntilFirst\n      );\n  }\n\n  /**\n   * Retrieve the results of the query once.\n   */\n  get(options?: firebase.firestore.GetOptions) {\n    return from(this.query.get(options)).pipe(\n      observeOn(this.afs.schedulers.insideAngular),\n    );\n  }\n\n  /**\n   * Add data to a collection reference.\n   *\n   * Note: Data operation methods are done on the reference not the query. This means\n   * when you update data it is not updating data to the window of your query unless\n   * the data fits the criteria of the query.\n   */\n  add(data: T): Promise<DocumentReference<T>> {\n    return this.ref.add(data);\n  }\n\n  /**\n   * Create a reference to a single document in a collection.\n   */\n  doc<T2 = T>(path?: string): AngularFirestoreDocument<T2> {\n    // TODO is there a better way to solve this type issue\n    return new AngularFirestoreDocument(this.ref.doc(path) as any, this.afs);\n  }\n}\n","import { from, Observable } from 'rxjs';\nimport { Action, DocumentData, DocumentReference, DocumentSnapshot, QueryFn, SetOptions } from '../interfaces';\nimport { fromDocRef } from '../observable/fromRef';\nimport { map, observeOn } from 'rxjs/operators';\nimport { AngularFirestore, associateQuery } from '../firestore';\nimport { AngularFirestoreCollection } from '../collection/collection';\nimport firebase from 'firebase/app';\n\n/**\n * AngularFirestoreDocument service\n *\n * This class creates a reference to a Firestore Document. A reference is provided in\n * in the constructor. The class is generic which gives you type safety for data update\n * methods and data streaming.\n *\n * This class uses Symbol.observable to transform into Observable using Observable.from().\n *\n * This class is rarely used directly and should be created from the AngularFirestore service.\n *\n * Example:\n *\n * const fakeStock = new AngularFirestoreDocument<Stock>(doc('stocks/FAKE'));\n * await fakeStock.set({ name: 'FAKE', price: 0.01 });\n * fakeStock.valueChanges().map(snap => {\n *   if(snap.exists) return snap.data();\n *   return null;\n * }).subscribe(value => console.log(value));\n * // OR! Transform using Observable.from() and the data is unwrapped for you\n * Observable.from(fakeStock).subscribe(value => console.log(value));\n */\nexport class AngularFirestoreDocument<T = DocumentData> {\n\n  /**\n   * The constructor takes in a DocumentReference to provide wrapper methods\n   * for data operations, data streaming, and Symbol.observable.\n   */\n  constructor(public ref: DocumentReference<T>, private afs: AngularFirestore) { }\n\n  /**\n   * Create or overwrite a single document.\n   */\n  set(data: T, options?: SetOptions): Promise<void> {\n    return this.ref.set(data, options);\n  }\n\n  /**\n   * Update some fields of a document without overwriting the entire document.\n   */\n  update(data: Partial<T>): Promise<void> {\n    return this.ref.update(data);\n  }\n\n  /**\n   * Delete a document.\n   */\n  delete(): Promise<void> {\n    return this.ref.delete();\n  }\n\n  /**\n   * Create a reference to a sub-collection given a path and an optional query\n   * function.\n   */\n  collection<R = DocumentData>(path: string, queryFn?: QueryFn): AngularFirestoreCollection<R> {\n    const collectionRef = this.ref.collection(path) as firebase.firestore.CollectionReference<R>;\n    const { ref, query } = associateQuery(collectionRef, queryFn);\n    return new AngularFirestoreCollection(ref, query, this.afs);\n  }\n\n  /**\n   * Listen to snapshot updates from the document.\n   */\n  snapshotChanges(): Observable<Action<DocumentSnapshot<T>>> {\n    const scheduledFromDocRef$ = fromDocRef<T>(this.ref, this.afs.schedulers.outsideAngular);\n    return scheduledFromDocRef$.pipe(\n      this.afs.keepUnstableUntilFirst\n    );\n  }\n\n  /**\n   * Listen to unwrapped snapshot updates from the document.\n   *\n   * If the `idField` option is provided, document IDs are included and mapped to the\n   * provided `idField` property name.\n   */\n  valueChanges(options?: { }): Observable<T | undefined>;\n  valueChanges<K extends string>(options: { idField: K }): Observable<(T & { [T in K]: string }) | undefined>;\n  valueChanges<K extends string>(options: { idField?: K } = {}): Observable<T | undefined> {\n    return this.snapshotChanges().pipe(\n      map(({ payload }) =>\n        options.idField ? {\n          ...payload.data(),\n          ...{ [options.idField]: payload.id }\n        } as T & { [T in K]: string } : payload.data()\n      )\n    );\n  }\n\n  /**\n   * Retrieve the document once.\n   */\n  get(options?: firebase.firestore.GetOptions) {\n    return from(this.ref.get(options)).pipe(\n      observeOn(this.afs.schedulers.insideAngular),\n    );\n  }\n}\n","import { from, Observable } from 'rxjs';\nimport { fromCollectionRef } from '../observable/fromRef';\nimport { filter, map, observeOn, scan } from 'rxjs/operators';\nimport firebase from 'firebase/app';\n\nimport { DocumentChangeAction, DocumentChangeType, DocumentData, Query } from '../interfaces';\nimport { validateEventsArray } from '../collection/collection';\nimport { docChanges, sortedChanges } from '../collection/changes';\nimport { AngularFirestore } from '../firestore';\n\n/**\n * AngularFirestoreCollectionGroup service\n *\n * This class holds a reference to a Firestore Collection Group Query.\n *\n * This class uses Symbol.observable to transform into Observable using Observable.from().\n *\n * This class is rarely used directly and should be created from the AngularFirestore service.\n *\n * Example:\n *\n * const collectionGroup = firebase.firestore.collectionGroup('stocks');\n * const query = collectionRef.where('price', '>', '0.01');\n * const fakeStock = new AngularFirestoreCollectionGroup<Stock>(query, afs);\n *\n * // Subscribe to changes as snapshots. This provides you data updates as well as delta updates.\n * fakeStock.valueChanges().subscribe(value => console.log(value));\n */\nexport class AngularFirestoreCollectionGroup<T = DocumentData> {\n  /**\n   * The constructor takes in a CollectionGroupQuery to provide wrapper methods\n   * for data operations and data streaming.\n   */\n  constructor(\n    private readonly query: Query<T>,\n    private readonly afs: AngularFirestore) { }\n\n  /**\n   * Listen to the latest change in the stream. This method returns changes\n   * as they occur and they are not sorted by query order. This allows you to construct\n   * your own data structure.\n   */\n  stateChanges(events?: DocumentChangeType[]): Observable<DocumentChangeAction<T>[]> {\n    if (!events || events.length === 0) {\n      return docChanges<T>(this.query, this.afs.schedulers.outsideAngular).pipe(\n        this.afs.keepUnstableUntilFirst\n      );\n    }\n    return docChanges<T>(this.query, this.afs.schedulers.outsideAngular)\n      .pipe(\n        map(actions => actions.filter(change => events.indexOf(change.type) > -1)),\n        filter(changes =>  changes.length > 0),\n        this.afs.keepUnstableUntilFirst\n      );\n  }\n\n  /**\n   * Create a stream of changes as they occur it time. This method is similar to stateChanges()\n   * but it collects each event in an array over time.\n   */\n  auditTrail(events?: DocumentChangeType[]): Observable<DocumentChangeAction<T>[]> {\n    return this.stateChanges(events).pipe(scan((current, action) => [...current, ...action], []));\n  }\n\n  /**\n   * Create a stream of synchronized changes. This method keeps the local array in sorted\n   * query order.\n   */\n  snapshotChanges(events?: DocumentChangeType[]): Observable<DocumentChangeAction<T>[]> {\n    const validatedEvents = validateEventsArray(events);\n    const scheduledSortedChanges$ = sortedChanges<T>(this.query, validatedEvents, this.afs.schedulers.outsideAngular);\n    return scheduledSortedChanges$.pipe(\n      this.afs.keepUnstableUntilFirst\n    );\n  }\n\n  /**\n   * Listen to all documents in the collection and its possible query as an Observable.\n   *\n   * If the `idField` option is provided, document IDs are included and mapped to the\n   * provided `idField` property name.\n   */\n  valueChanges(): Observable<T[]>;\n  // tslint:disable-next-line:unified-signatures\n  valueChanges({}): Observable<T[]>;\n  valueChanges<K extends string>(options: {idField: K}): Observable<(T & { [T in K]: string })[]>;\n  valueChanges<K extends string>(options: {idField?: K} = {}): Observable<T[]> {\n    const fromCollectionRefScheduled$ = fromCollectionRef<T>(this.query, this.afs.schedulers.outsideAngular);\n    return fromCollectionRefScheduled$\n      .pipe(\n        map(actions => actions.payload.docs.map(a => {\n          if (options.idField) {\n            return {\n              [options.idField]: a.id,\n              ...a.data()\n            } as T & { [T in K]: string };\n          } else {\n            return a.data();\n          }\n        })),\n        this.afs.keepUnstableUntilFirst\n      );\n  }\n\n  /**\n   * Retrieve the results of the query once.\n   */\n  get(options?: firebase.firestore.GetOptions) {\n    return from(this.query.get(options)).pipe(\n      observeOn(this.afs.schedulers.insideAngular)\n    );\n  }\n\n}\n","import { Inject, Injectable, InjectionToken, NgZone, Optional, PLATFORM_ID } from '@angular/core';\nimport { from, Observable, of } from 'rxjs';\nimport {\n  AssociatedReference,\n  CollectionReference,\n  DocumentReference,\n  PersistenceSettings,\n  Query,\n  QueryFn,\n  QueryGroupFn,\n  Settings\n} from './interfaces';\nimport { AngularFirestoreDocument } from './document/document';\nimport { AngularFirestoreCollection } from './collection/collection';\nimport { AngularFirestoreCollectionGroup } from './collection-group/collection-group';\nimport {\n  FIREBASE_APP_NAME,\n  FIREBASE_OPTIONS,\n  FirebaseAppConfig,\n  FirebaseOptions,\n  ɵAngularFireSchedulers,\n  ɵfirebaseAppFactory,\n  ɵkeepUnstableUntilFirstFactory,\n  FirebaseApp\n} from '@angular/fire';\nimport { isPlatformServer } from '@angular/common';\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport { USE_EMULATOR as USE_AUTH_EMULATOR } from '@angular/fire/auth';\nimport { ɵfetchInstance, ɵlogAuthEmulatorError } from '@angular/fire';\n\n/**\n * The value of this token determines whether or not the firestore will have persistance enabled\n */\nexport const ENABLE_PERSISTENCE = new InjectionToken<boolean>('angularfire2.enableFirestorePersistence');\nexport const PERSISTENCE_SETTINGS = new InjectionToken<PersistenceSettings | undefined>('angularfire2.firestore.persistenceSettings');\nexport const SETTINGS = new InjectionToken<Settings>('angularfire2.firestore.settings');\n\n// SEMVER(7): use Parameters to detirmine the useEmulator arguments\n// type UseEmulatorArguments = Parameters<typeof firebase.firestore.Firestore.prototype.useEmulator>;\ntype UseEmulatorArguments = [string, number];\nexport const USE_EMULATOR = new InjectionToken<UseEmulatorArguments>('angularfire2.firestore.use-emulator');\n\n/**\n * A utility methods for associating a collection reference with\n * a query.\n *\n * @param collectionRef - A collection reference to query\n * @param queryFn - The callback to create a query\n *\n * Example:\n * const { query, ref } = associateQuery(docRef.collection('items'), ref => {\n *  return ref.where('age', '<', 200);\n * });\n */\nexport function associateQuery<T>(collectionRef: CollectionReference<T>, queryFn = ref => ref): AssociatedReference<T> {\n  const query = queryFn(collectionRef);\n  const ref = collectionRef;\n  return { query, ref };\n}\n\ntype InstanceCache = Map<FirebaseApp, [\n  firebase.firestore.Firestore,\n  firebase.firestore.Settings | null,\n  UseEmulatorArguments | null,\n  boolean | null]\n>;\n\n/**\n * AngularFirestore Service\n *\n * This service is the main entry point for this feature module. It provides\n * an API for creating Collection and Reference services. These services can\n * then be used to do data updates and observable streams of the data.\n *\n * Example:\n *\n * import { Component } from '@angular/core';\n * import { AngularFirestore, AngularFirestoreCollection, AngularFirestoreDocument } from '@angular/fire/firestore';\n * import { Observable } from 'rxjs/Observable';\n * import { from } from 'rxjs/observable';\n *\n * @Component({\n *   selector: 'app-my-component',\n *   template: `\n *    <h2>Items for {{ (profile | async)?.name }}\n *    <ul>\n *       <li *ngFor=\"let item of items | async\">{{ item.name }}</li>\n *    </ul>\n *    <div class=\"control-input\">\n *       <input type=\"text\" #itemname />\n *       <button (click)=\"addItem(itemname.value)\">Add Item</button>\n *    </div>\n *   `\n * })\n * export class MyComponent implements OnInit {\n *\n *   // services for data operations and data streaming\n *   private readonly itemsRef: AngularFirestoreCollection<Item>;\n *   private readonly profileRef: AngularFirestoreDocument<Profile>;\n *\n *   // observables for template\n *   items: Observable<Item[]>;\n *   profile: Observable<Profile>;\n *\n *   // inject main service\n *   constructor(private readonly afs: AngularFirestore) {}\n *\n *   ngOnInit() {\n *     this.itemsRef = afs.collection('items', ref => ref.where('user', '==', 'davideast').limit(10));\n *     this.items = this.itemsRef.valueChanges().map(snap => snap.docs.map(data => doc.data()));\n *     // this.items = from(this.itemsRef); // you can also do this with no mapping\n *\n *     this.profileRef = afs.doc('users/davideast');\n *     this.profile = this.profileRef.valueChanges();\n *   }\n *\n *   addItem(name: string) {\n *     const user = 'davideast';\n *     this.itemsRef.add({ name, user });\n *   }\n * }\n */\n@Injectable({\n  providedIn: 'any'\n})\nexport class AngularFirestore {\n  public readonly firestore: firebase.firestore.Firestore;\n  public readonly persistenceEnabled$: Observable<boolean>;\n  public readonly schedulers: ɵAngularFireSchedulers;\n  public readonly keepUnstableUntilFirst: <T>(obs: Observable<T>) => Observable<T>;\n\n  /**\n   * Each Feature of AngularFire has a FirebaseApp injected. This way we\n   * don't rely on the main Firebase App instance and we can create named\n   * apps and use multiple apps.\n   */\n  constructor(\n    @Inject(FIREBASE_OPTIONS) options: FirebaseOptions,\n    @Optional() @Inject(FIREBASE_APP_NAME) nameOrConfig: string | FirebaseAppConfig | null | undefined,\n    @Optional() @Inject(ENABLE_PERSISTENCE) shouldEnablePersistence: boolean | null,\n    @Optional() @Inject(SETTINGS) settings: Settings | null,\n    // tslint:disable-next-line:ban-types\n    @Inject(PLATFORM_ID) platformId: Object,\n    zone: NgZone,\n    @Optional() @Inject(PERSISTENCE_SETTINGS) persistenceSettings: PersistenceSettings | null,\n    @Optional() @Inject(USE_EMULATOR) _useEmulator: any,\n    @Optional() @Inject(USE_AUTH_EMULATOR) useAuthEmulator: any,\n  ) {\n    this.schedulers = new ɵAngularFireSchedulers(zone);\n    this.keepUnstableUntilFirst = ɵkeepUnstableUntilFirstFactory(this.schedulers);\n\n    const app = ɵfirebaseAppFactory(options, zone, nameOrConfig);\n    if (!firebase.auth && useAuthEmulator) {\n      ɵlogAuthEmulatorError();\n    }\n    const useEmulator: UseEmulatorArguments | null = _useEmulator;\n\n    [this.firestore, this.persistenceEnabled$] = ɵfetchInstance(`${app.name}.firestore`, 'AngularFirestore', app, () => {\n      const firestore = zone.runOutsideAngular(() => app.firestore());\n      if (settings) {\n        firestore.settings(settings);\n      }\n      if (useEmulator) {\n        firestore.useEmulator(...useEmulator);\n      }\n\n      if (shouldEnablePersistence && !isPlatformServer(platformId)) {\n        // We need to try/catch here because not all enablePersistence() failures are caught\n        // https://github.com/firebase/firebase-js-sdk/issues/608\n        const enablePersistence = () => {\n          try {\n            return from(firestore.enablePersistence(persistenceSettings || undefined).then(() => true, () => false));\n          } catch (e) {\n            if (typeof console !== 'undefined') { console.warn(e); }\n            return of(false);\n          }\n        };\n        return [firestore, zone.runOutsideAngular(enablePersistence)];\n      } else {\n        return [firestore, of(false)];\n      }\n\n    }, [settings, useEmulator, shouldEnablePersistence]);\n  }\n\n  /**\n   * Create a reference to a Firestore Collection based on a path or\n   * CollectionReference and an optional query function to narrow the result\n   * set.\n   */\n  collection<T>(path: string, queryFn?: QueryFn): AngularFirestoreCollection<T>;\n  // tslint:disable-next-line:unified-signatures\n  collection<T>(ref: CollectionReference, queryFn?: QueryFn): AngularFirestoreCollection<T>;\n  collection<T>(pathOrRef: string | CollectionReference<T>, queryFn?: QueryFn): AngularFirestoreCollection<T> {\n    let collectionRef: CollectionReference<T>;\n    if (typeof pathOrRef === 'string') {\n      collectionRef = this.firestore.collection(pathOrRef) as firebase.firestore.CollectionReference<T>;\n    } else {\n      collectionRef = pathOrRef;\n    }\n    const { ref, query } = associateQuery<T>(collectionRef, queryFn);\n    const refInZone = this.schedulers.ngZone.run(() => ref);\n    return new AngularFirestoreCollection<T>(refInZone, query, this);\n  }\n\n  /**\n   * Create a reference to a Firestore Collection Group based on a collectionId\n   * and an optional query function to narrow the result\n   * set.\n   */\n  collectionGroup<T>(collectionId: string, queryGroupFn?: QueryGroupFn<T>): AngularFirestoreCollectionGroup<T> {\n    const queryFn = queryGroupFn || (ref => ref);\n    const collectionGroup: Query<T> = this.firestore.collectionGroup(collectionId) as firebase.firestore.Query<T>;\n    return new AngularFirestoreCollectionGroup<T>(queryFn(collectionGroup), this);\n  }\n\n  /**\n   * Create a reference to a Firestore Document based on a path or\n   * DocumentReference. Note that documents are not queryable because they are\n   * simply objects. However, documents have sub-collections that return a\n   * Collection reference and can be queried.\n   */\n  doc<T>(path: string): AngularFirestoreDocument<T>;\n  // tslint:disable-next-line:unified-signatures\n  doc<T>(ref: DocumentReference): AngularFirestoreDocument<T>;\n  doc<T>(pathOrRef: string | DocumentReference<T>): AngularFirestoreDocument<T> {\n    let ref: DocumentReference<T>;\n    if (typeof pathOrRef === 'string') {\n      ref = this.firestore.doc(pathOrRef) as firebase.firestore.DocumentReference<T>;\n    } else {\n      ref = pathOrRef;\n    }\n    const refInZone = this.schedulers.ngZone.run(() => ref);\n    return new AngularFirestoreDocument<T>(refInZone, this);\n  }\n\n  /**\n   * Returns a generated Firestore Document Id.\n   */\n  createId() {\n    return this.firestore.collection('_').doc().id;\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { PersistenceSettings } from './interfaces';\nimport { AngularFirestore, ENABLE_PERSISTENCE, PERSISTENCE_SETTINGS } from './firestore';\n\n@NgModule({\n  providers: [ AngularFirestore ]\n})\nexport class AngularFirestoreModule {\n  /**\n   * Attempt to enable persistent storage, if possible\n   */\n  static enablePersistence(persistenceSettings?: PersistenceSettings): ModuleWithProviders<AngularFirestoreModule> {\n    return {\n      ngModule: AngularFirestoreModule,\n      providers: [\n        { provide: ENABLE_PERSISTENCE, useValue: true },\n        { provide: PERSISTENCE_SETTINGS, useValue: persistenceSettings },\n      ]\n    };\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"]},"metadata":{},"sourceType":"module"}