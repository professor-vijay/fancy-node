{"ast":null,"code":"\"use strict\"; // Experimental API below\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * get input values\n *\n * Extended by: Gabriel Schuster <github.com@actra.de>\n * Now gets values of inputs (including \"checked\" status radios, checkboxes), textareas and selects (including multiselects)\n * Tries to identify the elements as exact as possible, falls back to numeric index when identification fails\n * WIP refactor by: PatrickJS\n */\n\nfunction __getInputValues() {\n  var _inputs = document.querySelectorAll('input, textarea, select');\n\n  var inputs = Array.prototype.slice.call(_inputs);\n  return inputs.map(function (input) {\n    var inputTagName = input.tagName.toLowerCase();\n    var inputType = input.type;\n    var inputId = input.id && typeof input.id === 'string' ? input.id : null;\n    var inputName = input.name && typeof input.name === 'string' ? input.name : null;\n    var inputValue = input.value && typeof input.value === 'string' ? input.value : null;\n    var inputChildNodes = input.childNodes;\n    var inputSelected = Boolean(input.selected);\n    var elementStore = {\n      'tag': inputTagName,\n      'type': null,\n      'id': inputId,\n      'name': inputName,\n      'value': '',\n      'checked': false,\n      'options': []\n    };\n\n    if ('input' === inputTagName || 'textarea' === inputTagName) {\n      elementStore['type'] = inputType;\n\n      if ('input' !== inputTagName) {\n        elementStore['value'] = inputValue;\n        return elementStore;\n      }\n\n      switch (inputType) {\n        case 'checkbox':\n        case 'radio':\n          elementStore['checked'] = inputSelected;\n          elementStore['value'] = inputValue;\n          return elementStore;\n\n        case 'image':\n        case 'button':\n        case 'submit':\n        case 'reset':\n        default:\n          // These types don't need any config and thus need no update, they only were stored because they match \"input\"\n          return elementStore;\n      }\n    } else if ('select' === inputTagName) {\n      var childNodes = Array.prototype.slice.call(inputChildNodes);\n      var options = childNodes.map(function (option, i) {\n        return {\n          value: option['value'],\n          selected: Boolean(option['selected'])\n        };\n      });\n      elementStore['options'] = options;\n      return elementStore;\n    }\n\n    return elementStore;\n  });\n}\n\nexports.__getInputValues = __getInputValues;\n/**\n * set input values\n *\n * Extended by: Gabriel Schuster <github.com@actra.de>\n * WIP refactor by: PatrickJS\n */\n\nfunction __setInputValues($inputs) {\n  var inputs = document.querySelectorAll('input, textarea');\n  $inputs.forEach(function (store, i) {\n    if ('input' === store.tag || 'textarea' === store.tag) {\n      if ('input' === store.tag && ('checkbox' === store.type || 'radio' === store.type)) {\n        var selector = 'input' + (null !== store.id ? '#' + store.id : '') + '[type=\"' + store.type + '\"]' + (null !== store.name ? '[name=\"' + store.name + '\"]' : '') + '[value=\"' + store.value + '\"]';\n        var element = document.body.querySelector(selector);\n\n        if (element && Boolean(store['checked'])) {\n          element['checked'] = 'checked';\n          element.dispatchEvent(new CustomEvent('input', {\n            detail: element['checked']\n          }));\n        }\n      } else if ('input' === store.tagName.toLowerCase() && ('image' === store.type || 'button' === store.type || 'submit' === store.type || 'reset' === store.type)) {// These types don't need any config and thus need no update, they only were stored because they match \"input\"\n      } else {\n        if (null === store.id && null === store.name) {\n          if (store.value.length && inputs[i] && inputs[i].tagName.toLowerCase() === store.tag && ('textarea' === store.tag || inputs[i].getAttribute('type') === store.type) && ('string' !== typeof inputs[i].id || !inputs[i].id.length) && ('string' !== typeof inputs[i].getAttribute('name') || !inputs[i].getAttribute('name').length)) {\n            inputs[i]['value'] = store.value;\n            inputs[i].dispatchEvent(new CustomEvent('input', {\n              detail: inputs[i]['value']\n            }));\n          }\n        } else {\n          var selector = 'input' + (null !== store.id ? '#' + store.id : '') + ('input' === store.tag ? '[type=\"' + store.type + '\"]' : '') + (null !== store.name ? '[name=\"' + store.name + '\"]' : '');\n          var element = document.body.querySelector(selector);\n\n          if (element && store.value.length) {\n            element['value'] = store.value;\n            element.dispatchEvent(new CustomEvent('input', {\n              detail: element['value']\n            }));\n          }\n        }\n      }\n    } else if ('select' === store.tag) {\n      var select_1 = null;\n\n      if (null === store.id && null === store.name) {\n        if (inputs[i] && inputs[i].tagName.toLowerCase() === store.tag && ('string' !== typeof inputs[i].id || !inputs[i].id.length) && ('string' !== typeof inputs[i].getAttribute('name') || !inputs[i].getAttribute('name').length)) {\n          select_1 = inputs[i];\n        }\n      } else {\n        var selector = 'select' + (null !== store.id ? '#' + store.id : '') + (null !== store.name ? '[name=\"' + store.name + '\"]' : '');\n        var element = document.body.querySelector(selector);\n\n        if (element) {\n          select_1 = element;\n        }\n      }\n\n      if (select_1) {\n        store.options.forEach(function (storedOption, j) {\n          var option = select_1.querySelector('option[value=\"' + storedOption.value + '\"]');\n\n          if (!option && select_1.childNodes[j] && ('string' !== typeof select_1.childNodes[j]['value'] || !select_1.childNodes[j]['value'].length)) {\n            option = select_1.childNodes[j];\n          }\n\n          if (option && !!storedOption.selected) {\n            option['selected'] = 'selected';\n            option.dispatchEvent(new CustomEvent('input', {\n              detail: option['selected']\n            }));\n          }\n        });\n      }\n    }\n  });\n}\n\nexports.__setInputValues = __setInputValues;\n\nfunction __createInputTransfer() {\n  var $inputs = __getInputValues();\n\n  return function restoreInputValues() {\n    return __setInputValues($inputs);\n  };\n}\n\nexports.__createInputTransfer = __createInputTransfer;","map":{"version":3,"sources":["../src/experimental.ts"],"names":[],"mappings":"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","sourcesContent":["// Experimental API below\n\n/**\n * get input values\n *\n * Extended by: Gabriel Schuster <github.com@actra.de>\n * Now gets values of inputs (including \"checked\" status radios, checkboxes), textareas and selects (including multiselects)\n * Tries to identify the elements as exact as possible, falls back to numeric index when identification fails\n * WIP refactor by: PatrickJS\n */\nexport function __getInputValues() {\n  const _inputs = document.querySelectorAll('input, textarea, select');\n  const inputs = Array.prototype.slice.call(_inputs);\n\n  return inputs.map(function(input: any) {\n    const inputTagName = input.tagName.toLowerCase();\n    const inputType = input.type;\n    const inputId = (input.id && typeof input.id === 'string') ? input.id : null;\n    const inputName = (input.name && typeof input.name === 'string') ? input.name : null;\n    const inputValue = (input.value && typeof input.value === 'string') ? input.value : null;\n    const inputChildNodes = input.childNodes;\n    const inputSelected = Boolean(input.selected);\n\n    type InputOption = {value: string, selected: boolean};\n    type HmrStore = {\n      tag: string;\n      type: string;\n      id: string;\n      name: string;\n      value: string;\n      checked: boolean;\n      options: Array<InputOption>;\n    };\n\n    let elementStore: HmrStore = {\n      'tag': inputTagName,\n      'type': null,\n      'id': inputId,\n      'name': inputName,\n      'value': '',\n      'checked': false,\n      'options': []\n    };\n\n    if ('input' === inputTagName || 'textarea' === inputTagName) {\n      elementStore['type'] = inputType;\n\n      if ('input' !== inputTagName) {\n        elementStore['value'] = inputValue;\n        return elementStore;\n      }\n      switch (inputType) {\n        case 'checkbox':\n        case 'radio':\n          elementStore['checked'] = inputSelected;\n          elementStore['value'] = inputValue;\n          return elementStore;\n        case 'image':\n        case 'button':\n        case 'submit':\n        case 'reset':\n        default:\n          // These types don't need any config and thus need no update, they only were stored because they match \"input\"\n          return elementStore;\n      }\n    } else if ('select' === inputTagName) {\n      const childNodes = Array.prototype.slice.call(inputChildNodes);\n\n      const options: Array<InputOption> = childNodes.map((option: any, i: number) => {\n        return { value: option['value'], selected: Boolean(option['selected']) };\n      });\n\n      elementStore['options'] = options;\n      return elementStore;\n    }\n\n    return elementStore;\n  });\n}\n\n/**\n * set input values\n *\n * Extended by: Gabriel Schuster <github.com@actra.de>\n * WIP refactor by: PatrickJS\n */\nexport function __setInputValues($inputs: any) {\n  const inputs: any = document.querySelectorAll('input, textarea');\n\n  $inputs.forEach((store: any, i: number) => {\n\n    if ('input' === store.tag || 'textarea' === store.tag) {\n      if ('input' === store.tag && ('checkbox' === store.type || 'radio' === store.type)) {\n        let selector = 'input' + (\n          null !== store.id ? '#' + store.id : ''\n        ) + '[type=\"' + store.type + '\"]' + (null !== store.name ? '[name=\"' + store.name + '\"]' : '') +\n                       '[value=\"' + store.value + '\"]';\n        let element: any  = document.body.querySelector(selector);\n\n        if (element && Boolean(store['checked'])) {\n          element['checked'] = 'checked';\n\n          element.dispatchEvent(new CustomEvent('input', {detail: element['checked']}));\n        }\n      } else if ('input' === store.tagName.toLowerCase() &&\n        ('image' === store.type || 'button' === store.type || 'submit' === store.type || 'reset' === store.type)) {\n          // These types don't need any config and thus need no update, they only were stored because they match \"input\"\n      } else {\n        if (null === store.id && null === store.name) {\n          if (store.value.length &&\n            inputs[i] &&\n            inputs[i].tagName.toLowerCase() === store.tag &&\n            ('textarea' === store.tag || inputs[i].getAttribute('type') === store.type) &&\n            ('string' !== typeof inputs[i].id || !inputs[i].id.length) &&\n            ('string' !== typeof inputs[i].getAttribute('name') ||\n            !inputs[i].getAttribute('name').length)) {\n\n              inputs[i]['value'] = store.value;\n              inputs[i].dispatchEvent(new CustomEvent('input', {detail: inputs[i]['value']}));\n          }\n        } else {\n          let selector = 'input' +\n            (null !== store.id ? '#' + store.id : '') + ('input' === store.tag ? '[type=\"' + store.type + '\"]' : '') +\n            (null !== store.name ? '[name=\"' + store.name + '\"]' : '');\n          let element: any  = document.body.querySelector(selector);\n\n          if (element && store.value.length) {\n            element['value'] = store.value;\n            element.dispatchEvent(new CustomEvent('input', {detail: element['value']}));\n          }\n        }\n      }\n  } else if ('select' === store.tag) {\n      let select: any = null;\n\n      if (null === store.id && null === store.name) {\n        if (inputs[i] && inputs[i].tagName.toLowerCase() === store.tag && ('string' !== typeof inputs[i].id || !inputs[i].id.length) &&\n           ('string' !== typeof inputs[i].getAttribute('name') || !inputs[i].getAttribute('name').length)) {\n            select = inputs[i];\n        }\n      } else {\n        let selector = 'select' + (null !== store.id ? '#' + store.id : '') + (null !== store.name ? '[name=\"' + store.name + '\"]' : '');\n        let element: any  = document.body.querySelector(selector);\n        if (element) {\n          select = element;\n        }\n      }\n\n      if (select) {\n        store.options.forEach((storedOption: any, j: number) => {\n          let option: any = select.querySelector('option[value=\"' + storedOption.value + '\"]');\n\n          if (\n            !option &&\n            select.childNodes[j] &&\n            ('string' !== typeof select.childNodes[j]['value'] || !select.childNodes[j]['value'].length)\n          ) {\n            option = select.childNodes[j];\n          }\n          if (option && !!storedOption.selected) {\n            option['selected'] = 'selected';\n\n            option.dispatchEvent(new CustomEvent('input', {detail: option['selected']}));\n          }\n        });\n      }\n    }\n  });\n}\n\nexport function __createInputTransfer() {\n  const $inputs = __getInputValues();\n  return function restoreInputValues() {\n    return __setInputValues($inputs);\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}