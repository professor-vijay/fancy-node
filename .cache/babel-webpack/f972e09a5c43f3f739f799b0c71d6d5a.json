{"ast":null,"code":"import _classCallCheck from \"D:/queen-supermarket/Biz1Market_EXE/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/queen-supermarket/Biz1Market_EXE/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { DOCUMENT } from '@angular/common';\nimport { Injectable, Inject, ɵɵdefineInjectable, ɵɵinject, InjectionToken, EventEmitter, Directive, NgZone, Optional, Input, Output, NgModule } from '@angular/core';\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/clipboard/pending-copy.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A pending copy-to-clipboard operation.\n *\n * The implementation of copying text to the clipboard modifies the DOM and\n * forces a relayout. This relayout can take too long if the string is large,\n * causing the execCommand('copy') to happen too long after the user clicked.\n * This results in the browser refusing to copy. This object lets the\n * relayout happen in a separate tick from copying by providing a copy function\n * that can be called later.\n *\n * Destroy must be called when no longer in use, regardless of whether `copy` is\n * called.\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nvar PendingCopy = /*#__PURE__*/function () {\n  /**\n   * @param {?} text\n   * @param {?} _document\n   */\n  function PendingCopy(text, _document) {\n    _classCallCheck(this, PendingCopy);\n\n    this._document = _document;\n    /** @type {?} */\n\n    var textarea = this._textarea = this._document.createElement('textarea');\n    /** @type {?} */\n\n\n    var styles = textarea.style; // Hide the element for display and accessibility. Set an\n    // absolute position so the page layout isn't affected.\n\n    styles.opacity = '0';\n    styles.position = 'absolute';\n    styles.left = styles.top = '-999em';\n    textarea.setAttribute('aria-hidden', 'true');\n    textarea.value = text;\n\n    this._document.body.appendChild(textarea);\n  }\n  /**\n   * Finishes copying the text.\n   * @return {?}\n   */\n\n\n  _createClass(PendingCopy, [{\n    key: \"copy\",\n    value: function copy() {\n      /** @type {?} */\n      var textarea = this._textarea;\n      /** @type {?} */\n\n      var successful = false;\n\n      try {\n        // Older browsers could throw if copy is not supported.\n        if (textarea) {\n          /** @type {?} */\n          var currentFocus =\n          /** @type {?} */\n          this._document.activeElement;\n          textarea.select();\n          textarea.setSelectionRange(0, textarea.value.length);\n          successful = this._document.execCommand('copy');\n\n          if (currentFocus) {\n            currentFocus.focus();\n          }\n        }\n      } catch (_a) {// Discard error.\n        // Initial setting of {@code successful} will represent failure here.\n      }\n\n      return successful;\n    }\n    /**\n     * Cleans up DOM changes used to perform the copy operation.\n     * @return {?}\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      /** @type {?} */\n      var textarea = this._textarea;\n\n      if (textarea) {\n        if (textarea.parentNode) {\n          textarea.parentNode.removeChild(textarea);\n        }\n\n        this._textarea = undefined;\n      }\n    }\n  }]);\n\n  return PendingCopy;\n}();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  PendingCopy.prototype._textarea;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  PendingCopy.prototype._document;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/clipboard/clipboard.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * A service for copying text to the clipboard.\n */\n\n\nvar Clipboard = /*#__PURE__*/function () {\n  /**\n   * @param {?} document\n   */\n  function Clipboard(document) {\n    _classCallCheck(this, Clipboard);\n\n    this._document = document;\n  }\n  /**\n   * Copies the provided text into the user's clipboard.\n   *\n   * @param {?} text The string to copy.\n   * @return {?} Whether the operation was successful.\n   */\n\n\n  _createClass(Clipboard, [{\n    key: \"copy\",\n    value: function copy(text) {\n      /** @type {?} */\n      var pendingCopy = this.beginCopy(text);\n      /** @type {?} */\n\n      var successful = pendingCopy.copy();\n      pendingCopy.destroy();\n      return successful;\n    }\n    /**\n     * Prepares a string to be copied later. This is useful for large strings\n     * which take too long to successfully render and be copied in the same tick.\n     *\n     * The caller must call `destroy` on the returned `PendingCopy`.\n     *\n     * @param {?} text The string to copy.\n     * @return {?} the pending copy operation.\n     */\n\n  }, {\n    key: \"beginCopy\",\n    value: function beginCopy(text) {\n      return new PendingCopy(text, this._document);\n    }\n  }]);\n\n  return Clipboard;\n}();\n\nClipboard.ɵfac = function Clipboard_Factory(t) {\n  return new (t || Clipboard)(ɵngcc0.ɵɵinject(DOCUMENT));\n};\n/** @nocollapse */\n\n\nClipboard.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }];\n};\n/** @nocollapse */\n\n\nClipboard.ɵprov = ɵɵdefineInjectable({\n  factory: function Clipboard_Factory() {\n    return new Clipboard(ɵɵinject(DOCUMENT));\n  },\n  token: Clipboard,\n  providedIn: \"root\"\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(Clipboard, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  Clipboard.prototype._document;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/clipboard/copy-to-clipboard.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Object that can be used to configure the default options for `CdkCopyToClipboard`.\n * @record\n */\n\n\nfunction CdkCopyToClipboardConfig() {}\n\nif (false) {\n  /**\n   * Default number of attempts to make when copying text to the clipboard.\n   * @type {?|undefined}\n   */\n  CdkCopyToClipboardConfig.prototype.attempts;\n}\n/**\n * Injection token that can be used to provide the default options to `CdkCopyToClipboard`.\n * @type {?}\n */\n\n\nvar CKD_COPY_TO_CLIPBOARD_CONFIG = new InjectionToken('CKD_COPY_TO_CLIPBOARD_CONFIG');\n/**\n * Provides behavior for a button that when clicked copies content into user's\n * clipboard.\n */\n\nvar CdkCopyToClipboard = /*#__PURE__*/function () {\n  /**\n   * @param {?} _clipboard\n   * @param {?=} _ngZone\n   * @param {?=} config\n   */\n  function CdkCopyToClipboard(_clipboard, _ngZone, config) {\n    _classCallCheck(this, CdkCopyToClipboard);\n\n    this._clipboard = _clipboard;\n    this._ngZone = _ngZone;\n    /**\n     * Content to be copied.\n     */\n\n    this.text = '';\n    /**\n     * How many times to attempt to copy the text. This may be necessary for longer text, because\n     * the browser needs time to fill an intermediate textarea element and copy the content.\n     */\n\n    this.attempts = 1;\n    /**\n     * Emits when some text is copied to the clipboard. The\n     * emitted value indicates whether copying was successful.\n     */\n\n    this.copied = new EventEmitter();\n    /**\n     * Emits when some text is copied to the clipboard. The\n     * emitted value indicates whether copying was successful.\n     * @deprecated Use `cdkCopyToClipboardCopied` instead.\n     * \\@breaking-change 10.0.0\n     */\n\n    this._deprecatedCopied = this.copied;\n    /**\n     * Copies that are currently being attempted.\n     */\n\n    this._pending = new Set();\n\n    if (config && config.attempts != null) {\n      this.attempts = config.attempts;\n    }\n  }\n  /**\n   * Copies the current text to the clipboard.\n   * @param {?=} attempts\n   * @return {?}\n   */\n\n\n  _createClass(CdkCopyToClipboard, [{\n    key: \"copy\",\n    value: function copy() {\n      var _this = this;\n\n      var attempts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.attempts;\n\n      if (attempts > 1) {\n        /** @type {?} */\n        var remainingAttempts = attempts;\n        /** @type {?} */\n\n        var pending = this._clipboard.beginCopy(this.text);\n\n        this._pending.add(pending);\n        /** @type {?} */\n\n\n        var attempt =\n        /**\n        * @return {?}\n        */\n        function attempt() {\n          /** @type {?} */\n          var successful = pending.copy();\n\n          if (!successful && --remainingAttempts && !_this._destroyed) {\n            // @breaking-change 10.0.0 Remove null check for `_ngZone`.\n            if (_this._ngZone) {\n              _this._currentTimeout = _this._ngZone.runOutsideAngular(\n              /**\n              * @return {?}\n              */\n              function () {\n                return setTimeout(attempt, 1);\n              });\n            } else {\n              // We use 1 for the timeout since it's more predictable when flushing in unit tests.\n              _this._currentTimeout = setTimeout(attempt, 1);\n            }\n          } else {\n            _this._currentTimeout = null;\n\n            _this._pending.delete(pending);\n\n            pending.destroy();\n\n            _this.copied.emit(successful);\n          }\n        };\n\n        attempt();\n      } else {\n        this.copied.emit(this._clipboard.copy(this.text));\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this._currentTimeout) {\n        clearTimeout(this._currentTimeout);\n      }\n\n      this._pending.forEach(\n      /**\n      * @param {?} copy\n      * @return {?}\n      */\n      function (copy) {\n        return copy.destroy();\n      });\n\n      this._pending.clear();\n\n      this._destroyed = true;\n    }\n  }]);\n\n  return CdkCopyToClipboard;\n}();\n\nCdkCopyToClipboard.ɵfac = function CdkCopyToClipboard_Factory(t) {\n  return new (t || CdkCopyToClipboard)(ɵngcc0.ɵɵdirectiveInject(Clipboard), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(CKD_COPY_TO_CLIPBOARD_CONFIG, 8));\n};\n\nCdkCopyToClipboard.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkCopyToClipboard,\n  selectors: [[\"\", \"cdkCopyToClipboard\", \"\"]],\n  hostBindings: function CdkCopyToClipboard_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function CdkCopyToClipboard_click_HostBindingHandler() {\n        return ctx.copy();\n      });\n    }\n  },\n  inputs: {\n    text: [\"cdkCopyToClipboard\", \"text\"],\n    attempts: [\"cdkCopyToClipboardAttempts\", \"attempts\"]\n  },\n  outputs: {\n    copied: \"cdkCopyToClipboardCopied\",\n    _deprecatedCopied: \"copied\"\n  }\n});\n/** @nocollapse */\n\nCdkCopyToClipboard.ctorParameters = function () {\n  return [{\n    type: Clipboard\n  }, {\n    type: NgZone\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [CKD_COPY_TO_CLIPBOARD_CONFIG]\n    }]\n  }];\n};\n\nCdkCopyToClipboard.propDecorators = {\n  text: [{\n    type: Input,\n    args: ['cdkCopyToClipboard']\n  }],\n  attempts: [{\n    type: Input,\n    args: ['cdkCopyToClipboardAttempts']\n  }],\n  copied: [{\n    type: Output,\n    args: ['cdkCopyToClipboardCopied']\n  }],\n  _deprecatedCopied: [{\n    type: Output,\n    args: ['copied']\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CdkCopyToClipboard, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkCopyToClipboard]',\n      host: {\n        '(click)': 'copy()'\n      }\n    }]\n  }], function () {\n    return [{\n      type: Clipboard\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [CKD_COPY_TO_CLIPBOARD_CONFIG]\n      }]\n    }];\n  }, {\n    text: [{\n      type: Input,\n      args: ['cdkCopyToClipboard']\n    }],\n    attempts: [{\n      type: Input,\n      args: ['cdkCopyToClipboardAttempts']\n    }],\n    copied: [{\n      type: Output,\n      args: ['cdkCopyToClipboardCopied']\n    }],\n    _deprecatedCopied: [{\n      type: Output,\n      args: ['copied']\n    }]\n  });\n})();\n\nif (false) {\n  /**\n   * Content to be copied.\n   * @type {?}\n   */\n  CdkCopyToClipboard.prototype.text;\n  /**\n   * How many times to attempt to copy the text. This may be necessary for longer text, because\n   * the browser needs time to fill an intermediate textarea element and copy the content.\n   * @type {?}\n   */\n\n  CdkCopyToClipboard.prototype.attempts;\n  /**\n   * Emits when some text is copied to the clipboard. The\n   * emitted value indicates whether copying was successful.\n   * @type {?}\n   */\n\n  CdkCopyToClipboard.prototype.copied;\n  /**\n   * Emits when some text is copied to the clipboard. The\n   * emitted value indicates whether copying was successful.\n   * @deprecated Use `cdkCopyToClipboardCopied` instead.\n   * \\@breaking-change 10.0.0\n   * @type {?}\n   */\n\n  CdkCopyToClipboard.prototype._deprecatedCopied;\n  /**\n   * Copies that are currently being attempted.\n   * @type {?}\n   * @private\n   */\n\n  CdkCopyToClipboard.prototype._pending;\n  /**\n   * Whether the directive has been destroyed.\n   * @type {?}\n   * @private\n   */\n\n  CdkCopyToClipboard.prototype._destroyed;\n  /**\n   * Timeout for the current copy attempt.\n   * @type {?}\n   * @private\n   */\n\n  CdkCopyToClipboard.prototype._currentTimeout;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  CdkCopyToClipboard.prototype._clipboard;\n  /**\n   * @deprecated _ngZone parameter to become required.\n   * \\@breaking-change 10.0.0\n   * @type {?}\n   * @private\n   */\n\n  CdkCopyToClipboard.prototype._ngZone;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/clipboard/clipboard-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar ClipboardModule = /*#__PURE__*/_createClass(function ClipboardModule() {\n  _classCallCheck(this, ClipboardModule);\n});\n\nClipboardModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: ClipboardModule\n});\nClipboardModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function ClipboardModule_Factory(t) {\n    return new (t || ClipboardModule)();\n  }\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClipboardModule, {\n    declarations: [CdkCopyToClipboard],\n    exports: [CdkCopyToClipboard]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(ClipboardModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [CdkCopyToClipboard],\n      exports: [CdkCopyToClipboard]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/clipboard/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CKD_COPY_TO_CLIPBOARD_CONFIG, CdkCopyToClipboard, Clipboard, ClipboardModule, PendingCopy };","map":{"version":3,"sources":["../../../../../../src/cdk/clipboard/pending-copy.ts","../../../../../../src/cdk/clipboard/clipboard.ts","../../../../../../src/cdk/clipboard/copy-to-clipboard.ts","../../../../../../src/cdk/clipboard/clipboard-module.ts","../../../../../../src/cdk/clipboard/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A pending copy-to-clipboard operation.\n *\n * The implementation of copying text to the clipboard modifies the DOM and\n * forces a relayout. This relayout can take too long if the string is large,\n * causing the execCommand('copy') to happen too long after the user clicked.\n * This results in the browser refusing to copy. This object lets the\n * relayout happen in a separate tick from copying by providing a copy function\n * that can be called later.\n *\n * Destroy must be called when no longer in use, regardless of whether `copy` is\n * called.\n */\nexport class PendingCopy {\n  private _textarea: HTMLTextAreaElement|undefined;\n\n  constructor(text: string, private readonly _document: Document) {\n    const textarea = this._textarea = this._document.createElement('textarea');\n    const styles = textarea.style;\n\n    // Hide the element for display and accessibility. Set an\n    // absolute position so the page layout isn't affected.\n    styles.opacity = '0';\n    styles.position = 'absolute';\n    styles.left = styles.top = '-999em';\n    textarea.setAttribute('aria-hidden', 'true');\n    textarea.value = text;\n    this._document.body.appendChild(textarea);\n  }\n\n  /** Finishes copying the text. */\n  copy(): boolean {\n    const textarea = this._textarea;\n    let successful = false;\n\n    try {  // Older browsers could throw if copy is not supported.\n      if (textarea) {\n        const currentFocus = this._document.activeElement as HTMLOrSVGElement | null;\n\n        textarea.select();\n        textarea.setSelectionRange(0, textarea.value.length);\n        successful = this._document.execCommand('copy');\n\n        if (currentFocus) {\n          currentFocus.focus();\n        }\n      }\n    } catch {\n      // Discard error.\n      // Initial setting of {@code successful} will represent failure here.\n    }\n\n    return successful;\n  }\n\n  /** Cleans up DOM changes used to perform the copy operation. */\n  destroy() {\n    const textarea = this._textarea;\n\n    if (textarea) {\n      if (textarea.parentNode) {\n        textarea.parentNode.removeChild(textarea);\n      }\n\n      this._textarea = undefined;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable} from '@angular/core';\nimport {PendingCopy} from './pending-copy';\n\n\n/**\n * A service for copying text to the clipboard.\n */\n@Injectable({providedIn: 'root'})\nexport class Clipboard {\n  private readonly _document: Document;\n\n  constructor(@Inject(DOCUMENT) document: any) {\n    this._document = document;\n  }\n\n  /**\n   * Copies the provided text into the user's clipboard.\n   *\n   * @param text The string to copy.\n   * @returns Whether the operation was successful.\n   */\n  copy(text: string): boolean {\n    const pendingCopy = this.beginCopy(text);\n    const successful = pendingCopy.copy();\n    pendingCopy.destroy();\n\n    return successful;\n  }\n\n  /**\n   * Prepares a string to be copied later. This is useful for large strings\n   * which take too long to successfully render and be copied in the same tick.\n   *\n   * The caller must call `destroy` on the returned `PendingCopy`.\n   *\n   * @param text The string to copy.\n   * @returns the pending copy operation.\n   */\n  beginCopy(text: string): PendingCopy {\n    return new PendingCopy(text, this._document);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  Output,\n  NgZone,\n  InjectionToken,\n  Inject,\n  Optional,\n  OnDestroy,\n} from '@angular/core';\nimport {Clipboard} from './clipboard';\nimport {PendingCopy} from './pending-copy';\n\n/** Object that can be used to configure the default options for `CdkCopyToClipboard`. */\nexport interface CdkCopyToClipboardConfig {\n  /** Default number of attempts to make when copying text to the clipboard. */\n  attempts?: number;\n}\n\n/** Injection token that can be used to provide the default options to `CdkCopyToClipboard`. */\nexport const CKD_COPY_TO_CLIPBOARD_CONFIG =\n    new InjectionToken<CdkCopyToClipboardConfig>('CKD_COPY_TO_CLIPBOARD_CONFIG');\n\n/**\n * Provides behavior for a button that when clicked copies content into user's\n * clipboard.\n */\n@Directive({\n  selector: '[cdkCopyToClipboard]',\n  host: {\n    '(click)': 'copy()',\n  }\n})\nexport class CdkCopyToClipboard implements OnDestroy {\n  /** Content to be copied. */\n  @Input('cdkCopyToClipboard') text: string = '';\n\n  /**\n   * How many times to attempt to copy the text. This may be necessary for longer text, because\n   * the browser needs time to fill an intermediate textarea element and copy the content.\n   */\n  @Input('cdkCopyToClipboardAttempts') attempts: number = 1;\n\n  /**\n   * Emits when some text is copied to the clipboard. The\n   * emitted value indicates whether copying was successful.\n   */\n  @Output('cdkCopyToClipboardCopied') copied = new EventEmitter<boolean>();\n\n  /**\n   * Emits when some text is copied to the clipboard. The\n   * emitted value indicates whether copying was successful.\n   * @deprecated Use `cdkCopyToClipboardCopied` instead.\n   * @breaking-change 10.0.0\n   */\n  @Output('copied') _deprecatedCopied = this.copied;\n\n  /** Copies that are currently being attempted. */\n  private _pending = new Set<PendingCopy>();\n\n  /** Whether the directive has been destroyed. */\n  private _destroyed: boolean;\n\n  /** Timeout for the current copy attempt. */\n  private _currentTimeout: any;\n\n  constructor(\n    private _clipboard: Clipboard,\n    /**\n     * @deprecated _ngZone parameter to become required.\n     * @breaking-change 10.0.0\n     */\n    private _ngZone?: NgZone,\n    @Optional() @Inject(CKD_COPY_TO_CLIPBOARD_CONFIG) config?: CdkCopyToClipboardConfig) {\n\n    if (config && config.attempts != null) {\n      this.attempts = config.attempts;\n    }\n  }\n\n  /** Copies the current text to the clipboard. */\n  copy(attempts: number = this.attempts): void {\n    if (attempts > 1) {\n      let remainingAttempts = attempts;\n      const pending = this._clipboard.beginCopy(this.text);\n      this._pending.add(pending);\n\n      const attempt = () => {\n        const successful = pending.copy();\n        if (!successful && --remainingAttempts && !this._destroyed) {\n          // @breaking-change 10.0.0 Remove null check for `_ngZone`.\n          if (this._ngZone) {\n            this._currentTimeout = this._ngZone.runOutsideAngular(() => setTimeout(attempt, 1));\n          } else {\n            // We use 1 for the timeout since it's more predictable when flushing in unit tests.\n            this._currentTimeout = setTimeout(attempt, 1);\n          }\n        } else {\n          this._currentTimeout = null;\n          this._pending.delete(pending);\n          pending.destroy();\n          this.copied.emit(successful);\n        }\n      };\n      attempt();\n    } else {\n      this.copied.emit(this._clipboard.copy(this.text));\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._currentTimeout) {\n      clearTimeout(this._currentTimeout);\n    }\n\n    this._pending.forEach(copy => copy.destroy());\n    this._pending.clear();\n    this._destroyed = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkCopyToClipboard} from './copy-to-clipboard';\n\n@NgModule({\n  declarations: [CdkCopyToClipboard],\n  exports: [CdkCopyToClipboard],\n})\nexport class ClipboardModule {\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}