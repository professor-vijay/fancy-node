{"ast":null,"code":"import _inherits from \"D:/Biz1-Market-0.01/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"D:/Biz1-Market-0.01/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"D:/Biz1-Market-0.01/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/Biz1-Market-0.01/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Injectable, NgModule } from '@angular/core';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nvar ElectronService = /*#__PURE__*/function () {\n  function ElectronService() {\n    _classCallCheck(this, ElectronService);\n  }\n\n  _createClass(ElectronService, [{\n    key: \"electron\",\n    get:\n    /**\n     * @private\n     * @return {?}\n     */\n    function get() {\n      if (!this._electron) {\n        if (window && window.require) {\n          this._electron = window.require('electron');\n          return this._electron;\n        }\n\n        return null;\n      }\n\n      return this._electron;\n    }\n    /**\n     * determines if SPA is running in Electron\n     * @return {?}\n     */\n\n  }, {\n    key: \"isElectronApp\",\n    get: function get() {\n      return !!window.navigator.userAgent.match(/Electron/);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"isMacOS\",\n    get: function get() {\n      return this.isElectronApp && process.platform === 'darwin';\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"isWindows\",\n    get: function get() {\n      return this.isElectronApp && process.platform === 'win32';\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"isLinux\",\n    get: function get() {\n      return this.isElectronApp && process.platform === 'linux';\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"isX86\",\n    get: function get() {\n      return this.isElectronApp && process.arch === 'ia32';\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"isX64\",\n    get: function get() {\n      return this.isElectronApp && process.arch === 'x64';\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"isArm\",\n    get: function get() {\n      return this.isElectronApp && process.arch === 'arm';\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"desktopCapturer\",\n    get: function get() {\n      return this.electron ? this.electron.desktopCapturer : null;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ipcRenderer\",\n    get: function get() {\n      return this.electron ? this.electron.ipcRenderer : null;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"remote\",\n    get: function get() {\n      return this.electron ? this.electron.remote : null;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"webFrame\",\n    get: function get() {\n      return this.electron ? this.electron.webFrame : null;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"clipboard\",\n    get: function get() {\n      return this.electron ? this.electron.clipboard : null;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"crashReporter\",\n    get: function get() {\n      return this.electron ? this.electron.crashReporter : null;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"process\",\n    get: function get() {\n      return this.remote ? this.remote.process : null;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"nativeImage\",\n    get: function get() {\n      return this.electron ? this.electron.nativeImage : null;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"screen\",\n    get: function get() {\n      return this.electron ? this.remote.screen : null;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"shell\",\n    get: function get() {\n      return this.electron ? this.electron.shell : null;\n    }\n  }]);\n\n  return ElectronService;\n}();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  ElectronService.prototype._electron;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar ElectronServiceRef = /*#__PURE__*/function (_ElectronService) {\n  _inherits(ElectronServiceRef, _ElectronService);\n\n  var _super = _createSuper(ElectronServiceRef);\n\n  function ElectronServiceRef() {\n    _classCallCheck(this, ElectronServiceRef);\n\n    return _super.call(this);\n  }\n\n  return _createClass(ElectronServiceRef);\n}(ElectronService);\n\nElectronServiceRef.ɵfac = function ElectronServiceRef_Factory(t) {\n  return new (t || ElectronServiceRef)();\n};\n\nElectronServiceRef.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: ElectronServiceRef,\n  factory: ElectronServiceRef.ɵfac\n});\n/** @nocollapse */\n\nElectronServiceRef.ctorParameters = function () {\n  return [];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(ElectronServiceRef, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar NgxElectronModule = /*#__PURE__*/_createClass(function NgxElectronModule() {\n  _classCallCheck(this, NgxElectronModule);\n});\n\nNgxElectronModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: NgxElectronModule\n});\nNgxElectronModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function NgxElectronModule_Factory(t) {\n    return new (t || NgxElectronModule)();\n  },\n  providers: [{\n    provide: ElectronService,\n    useClass: ElectronServiceRef\n  }]\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NgxElectronModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [],\n      exports: [],\n      providers: [{\n        provide: ElectronService,\n        useClass: ElectronServiceRef\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { ElectronService, ElectronServiceRef, NgxElectronModule };","map":{"version":3,"sources":["ngx-electron/lib/electron.service.ts","ngx-electron/lib/electron.service.ref.ts","ngx-electron/public_api.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Electron from 'electron';\nimport { ElectronWindow } from './typings/electron.window';\n\ndeclare let window: ElectronWindow;\n\nexport class ElectronService {\n    private _electron: Electron.RendererInterface;\n\n    private get electron(): Electron.RendererInterface {\n        if (!this._electron) {\n            if (window && window.require) {\n                this._electron = window.require('electron');\n                return this._electron;\n            }\n            return null;\n        }\n        return this._electron;\n    }\n\n    /**\n     * determines if SPA is running in Electron\n     */\n    public get isElectronApp(): boolean {\n        return !!window.navigator.userAgent.match(/Electron/);\n    }\n\n    public get isMacOS(): boolean {\n        return this.isElectronApp && process.platform === 'darwin';\n    }\n\n    public get isWindows(): boolean {\n        return this.isElectronApp && process.platform === 'win32';\n    }\n\n    public get isLinux(): boolean {\n        return this.isElectronApp && process.platform === 'linux';\n    }\n\n    public get isX86(): boolean {\n        return this.isElectronApp && process.arch === 'ia32';\n    }\n\n    public get isX64(): boolean {\n        return this.isElectronApp && process.arch === 'x64';\n    }\n\n    public get isArm(): boolean {\n        return this.isElectronApp && process.arch === 'arm';\n    }\n\n    public get desktopCapturer(): Electron.DesktopCapturer {\n        return this.electron ? this.electron.desktopCapturer : null;\n    }\n\n    public get ipcRenderer(): Electron.IpcRenderer {\n        return this.electron ? this.electron.ipcRenderer : null;\n    }\n\n    public get remote(): Electron.Remote {\n        return this.electron ? this.electron.remote : null;\n    }\n\n    public get webFrame(): Electron.WebFrame {\n        return this.electron ? this.electron.webFrame : null;\n    }\n\n    public get clipboard(): Electron.Clipboard {\n        return this.electron ? this.electron.clipboard : null;\n    }\n\n    public get crashReporter(): Electron.CrashReporter {\n        return this.electron ? this.electron.crashReporter : null;\n    }\n\n    public get process(): any {\n        return this.remote ? this.remote.process : null;\n    }\n\n    public get nativeImage(): typeof Electron.nativeImage {\n        return this.electron ? this.electron.nativeImage : null;\n    }\n\n    public get screen(): Electron.Screen {\n        return this.electron ? this.remote.screen : null;\n    }\n\n    public get shell(): Electron.Shell {\n        return this.electron ? this.electron.shell : null;\n    }\n}\n","import { ElectronService } from './electron.service';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class ElectronServiceRef extends ElectronService {\n\n    constructor() {\n        super();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { ElectronService } from './lib/electron.service';\nimport { ElectronServiceRef } from './lib/electron.service.ref';\n\nexport * from './lib/electron.service';\nexport * from './lib/electron.service.ref';\n\n@NgModule({\n    declarations: [],\n    exports: [],\n    providers: [{ provide: ElectronService, useClass: ElectronServiceRef }]\n})\nexport class NgxElectronModule {\n\n}\n"]},"metadata":{},"sourceType":"module"}