{"ast":null,"code":"import _classCallCheck from \"D:/master-sp-new/Biz1Maket_Single_Store/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/master-sp-new/Biz1Maket_Single_Store/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { InjectionToken, Injectable, ɵɵdefineInjectable, EventEmitter, Directive, Optional, Inject, ElementRef, NgZone, Renderer2, Input, Output, NgModule } from '@angular/core';\nimport Sortable from 'sortablejs';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nvar GLOBALS = new InjectionToken('Global config for sortablejs');\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nvar SortablejsBinding = /*#__PURE__*/function () {\n  /**\n   * @param {?} target\n   */\n  function SortablejsBinding(target) {\n    _classCallCheck(this, SortablejsBinding);\n\n    this.target = target;\n  }\n  /**\n   * @param {?} index\n   * @param {?} item\n   * @return {?}\n   */\n\n\n  _createClass(SortablejsBinding, [{\n    key: \"insert\",\n    value: function insert(index, item) {\n      if (this.isFormArray) {\n        this.target.insert(index, item);\n      } else {\n        this.target.splice(index, 0, item);\n      }\n    }\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(index) {\n      return this.isFormArray ? this.target.at(index) : this.target[index];\n    }\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(index) {\n      /** @type {?} */\n      var item;\n\n      if (this.isFormArray) {\n        item = this.target.at(index);\n        this.target.removeAt(index);\n      } else {\n        item = this.target.splice(index, 1)[0];\n      }\n\n      return item;\n    } // we need this to identify that the target is a FormArray\n    // we don't want to have a dependency on @angular/forms just for that\n\n    /**\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"isFormArray\",\n    get: function get() {\n      // just checking for random FormArray methods not available on a standard array\n      return !!this.target.at && !!this.target.insert && !!this.target.reset;\n    }\n  }]);\n\n  return SortablejsBinding;\n}();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  SortablejsBinding.prototype.target;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar SortablejsBindings = /*#__PURE__*/function () {\n  /**\n   * @param {?} bindingTargets\n   */\n  function SortablejsBindings(bindingTargets) {\n    _classCallCheck(this, SortablejsBindings);\n\n    this.bindings = bindingTargets.map(\n    /**\n    * @param {?} target\n    * @return {?}\n    */\n    function (target) {\n      return new SortablejsBinding(target);\n    });\n  }\n  /**\n   * @param {?} index\n   * @param {?} items\n   * @return {?}\n   */\n\n\n  _createClass(SortablejsBindings, [{\n    key: \"injectIntoEvery\",\n    value: function injectIntoEvery(index, items) {\n      this.bindings.forEach(\n      /**\n      * @param {?} b\n      * @param {?} i\n      * @return {?}\n      */\n      function (b, i) {\n        return b.insert(index, items[i]);\n      });\n    }\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n\n  }, {\n    key: \"getFromEvery\",\n    value: function getFromEvery(index) {\n      return this.bindings.map(\n      /**\n      * @param {?} b\n      * @return {?}\n      */\n      function (b) {\n        return b.get(index);\n      });\n    }\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n\n  }, {\n    key: \"extractFromEvery\",\n    value: function extractFromEvery(index) {\n      return this.bindings.map(\n      /**\n      * @param {?} b\n      * @return {?}\n      */\n      function (b) {\n        return b.remove(index);\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"provided\",\n    get: function get() {\n      return !!this.bindings.length;\n    }\n  }]);\n\n  return SortablejsBindings;\n}();\n\nif (false) {\n  /** @type {?} */\n  SortablejsBindings.prototype.bindings;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar SortablejsService = /*#__PURE__*/_createClass(function SortablejsService() {\n  _classCallCheck(this, SortablejsService);\n});\n\nSortablejsService.ɵfac = function SortablejsService_Factory(t) {\n  return new (t || SortablejsService)();\n};\n\nSortablejsService.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: SortablejsService,\n  factory: SortablejsService.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nSortablejsService.ngInjectableDef = ɵɵdefineInjectable({\n  factory: function SortablejsService_Factory() {\n    return new SortablejsService();\n  },\n  token: SortablejsService,\n  providedIn: \"root\"\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(SortablejsService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n\nif (false) {\n  /** @type {?} */\n  SortablejsService.prototype.transfer;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar getIndexesFromEvent =\n/**\n* @param {?} event\n* @return {?}\n*/\nfunction getIndexesFromEvent(event) {\n  if (event.hasOwnProperty('newDraggableIndex') && event.hasOwnProperty('oldDraggableIndex')) {\n    return {\n      new: event.newDraggableIndex,\n      old: event.oldDraggableIndex\n    };\n  } else {\n    return {\n      new: event.newIndex,\n      old: event.oldIndex\n    };\n  }\n};\n\nvar ɵ0 = getIndexesFromEvent;\n\nvar SortablejsDirective = /*#__PURE__*/function () {\n  /**\n   * @param {?} globalConfig\n   * @param {?} service\n   * @param {?} element\n   * @param {?} zone\n   * @param {?} renderer\n   */\n  function SortablejsDirective(globalConfig, service, element, zone, renderer) {\n    _classCallCheck(this, SortablejsDirective);\n\n    this.globalConfig = globalConfig;\n    this.service = service;\n    this.element = element;\n    this.zone = zone;\n    this.renderer = renderer;\n    this.runInsideAngular = false; // to be deprecated\n    // to be deprecated\n\n    this.sortablejsInit = new EventEmitter();\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(SortablejsDirective, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this = this;\n\n      if (Sortable && Sortable.create) {\n        // Sortable does not exist in angular universal (SSR)\n        if (this.runInsideAngular) {\n          this.create();\n        } else {\n          this.zone.runOutsideAngular(\n          /**\n          * @return {?}\n          */\n          function () {\n            return _this.create();\n          });\n        }\n      }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      var _this2 = this;\n\n      /** @type {?} */\n      var optionsChange = changes.sortablejsOptions;\n\n      if (optionsChange && !optionsChange.isFirstChange()) {\n        /** @type {?} */\n        var previousOptions = optionsChange.previousValue;\n        /** @type {?} */\n\n        var currentOptions = optionsChange.currentValue;\n        Object.keys(currentOptions).forEach(\n        /**\n        * @param {?} optionName\n        * @return {?}\n        */\n        function (optionName) {\n          if (currentOptions[optionName] !== previousOptions[optionName]) {\n            // use low-level option setter\n            _this2.sortableInstance.option(optionName, _this2.options[optionName]);\n          }\n        });\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this.sortableInstance) {\n        this.sortableInstance.destroy();\n      }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"create\",\n    value: function create() {\n      var _this3 = this;\n\n      /** @type {?} */\n      var container = this.sortablejsContainer ? this.element.nativeElement.querySelector(this.sortablejsContainer) : this.element.nativeElement;\n      setTimeout(\n      /**\n      * @return {?}\n      */\n      function () {\n        _this3.sortableInstance = Sortable.create(container, _this3.options);\n\n        _this3.sortablejsInit.emit(_this3.sortableInstance);\n      }, 0);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"getBindings\",\n    value: function getBindings() {\n      if (!this.sortablejs) {\n        return new SortablejsBindings([]);\n      } else if (this.sortablejs instanceof SortablejsBindings) {\n        return this.sortablejs;\n      } else {\n        return new SortablejsBindings([this.sortablejs]);\n      }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"options\",\n    get: function get() {\n      return Object.assign({}, this.optionsWithoutEvents, this.overridenOptions);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"optionsWithoutEvents\",\n    get: function get() {\n      return Object.assign({}, this.globalConfig || {}, this.sortablejsOptions || {});\n    }\n    /**\n     * @private\n     * @param {?} eventName\n     * @param {...?} params\n     * @return {?}\n     */\n\n  }, {\n    key: \"proxyEvent\",\n    value: function proxyEvent(eventName) {\n      var _this4 = this;\n\n      for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        params[_key - 1] = arguments[_key];\n      }\n\n      this.zone.run(\n      /**\n      * @return {?}\n      */\n      function () {\n        if (_this4.optionsWithoutEvents && _this4.optionsWithoutEvents[eventName]) {\n          var _this4$optionsWithout;\n\n          (_this4$optionsWithout = _this4.optionsWithoutEvents)[eventName].apply(_this4$optionsWithout, params);\n        }\n      });\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"isCloning\",\n    get: function get() {\n      return this.sortableInstance.options.group.checkPull(this.sortableInstance, this.sortableInstance) === 'clone';\n    }\n    /**\n     * @private\n     * @template T\n     * @param {?} item\n     * @return {?}\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone(item) {\n      // by default pass the item through, no cloning performed\n      return (this.sortablejsCloneFunction ||\n      /**\n      * @param {?} subitem\n      * @return {?}\n      */\n      function (subitem) {\n        return subitem;\n      })(item);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"overridenOptions\",\n    get: function get() {\n      var _this5 = this;\n\n      // always intercept standard events but act only in case items are set (bindingEnabled)\n      // allows to forget about tracking this.items changes\n      return {\n        onAdd:\n        /**\n        * @param {?} event\n        * @return {?}\n        */\n        function onAdd(event) {\n          _this5.service.transfer =\n          /**\n          * @param {?} items\n          * @return {?}\n          */\n          function (items) {\n            _this5.getBindings().injectIntoEvery(event.newIndex, items);\n\n            _this5.proxyEvent('onAdd', event);\n          };\n\n          _this5.proxyEvent('onAddOriginal', event);\n        },\n        onRemove:\n        /**\n        * @param {?} event\n        * @return {?}\n        */\n        function onRemove(event) {\n          /** @type {?} */\n          var bindings = _this5.getBindings();\n\n          if (bindings.provided) {\n            if (_this5.isCloning) {\n              _this5.service.transfer(bindings.getFromEvery(event.oldIndex).map(\n              /**\n              * @param {?} item\n              * @return {?}\n              */\n              function (item) {\n                return _this5.clone(item);\n              })); // great thanks to https://github.com/tauu\n              // event.item is the original item from the source list which is moved to the target list\n              // event.clone is a clone of the original item and will be added to source list\n              // If bindings are provided, adding the item dom element to the target list causes artifacts\n              // as it interferes with the rendering performed by the angular template.\n              // Therefore we remove it immediately and also move the original item back to the source list.\n              // (event handler may be attached to the original item and not its clone, therefore keeping\n              // the original dom node, circumvents side effects )\n\n\n              _this5.renderer.removeChild(event.item.parentNode, event.item);\n\n              _this5.renderer.insertBefore(event.clone.parentNode, event.item, event.clone);\n\n              _this5.renderer.removeChild(event.clone.parentNode, event.clone);\n            } else {\n              _this5.service.transfer(bindings.extractFromEvery(event.oldIndex));\n            }\n\n            _this5.service.transfer = null;\n          }\n\n          _this5.proxyEvent('onRemove', event);\n        },\n        onUpdate:\n        /**\n        * @param {?} event\n        * @return {?}\n        */\n        function onUpdate(event) {\n          /** @type {?} */\n          var bindings = _this5.getBindings();\n          /** @type {?} */\n\n\n          var indexes = getIndexesFromEvent(event);\n          bindings.injectIntoEvery(indexes.new, bindings.extractFromEvery(indexes.old));\n\n          _this5.proxyEvent('onUpdate', event);\n        }\n      };\n    }\n  }]);\n\n  return SortablejsDirective;\n}();\n\nSortablejsDirective.ɵfac = function SortablejsDirective_Factory(t) {\n  return new (t || SortablejsDirective)(ɵngcc0.ɵɵdirectiveInject(GLOBALS, 8), ɵngcc0.ɵɵdirectiveInject(SortablejsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2));\n};\n\nSortablejsDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: SortablejsDirective,\n  selectors: [[\"\", \"sortablejs\", \"\"]],\n  inputs: {\n    runInsideAngular: \"runInsideAngular\",\n    sortablejs: \"sortablejs\",\n    sortablejsContainer: \"sortablejsContainer\",\n    sortablejsOptions: \"sortablejsOptions\",\n    sortablejsCloneFunction: \"sortablejsCloneFunction\"\n  },\n  outputs: {\n    sortablejsInit: \"sortablejsInit\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\n/** @nocollapse */\n\nSortablejsDirective.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [GLOBALS]\n    }]\n  }, {\n    type: SortablejsService\n  }, {\n    type: ElementRef\n  }, {\n    type: NgZone\n  }, {\n    type: Renderer2\n  }];\n};\n\nSortablejsDirective.propDecorators = {\n  sortablejs: [{\n    type: Input\n  }],\n  sortablejsContainer: [{\n    type: Input\n  }],\n  sortablejsOptions: [{\n    type: Input\n  }],\n  sortablejsCloneFunction: [{\n    type: Input\n  }],\n  runInsideAngular: [{\n    type: Input\n  }],\n  sortablejsInit: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(SortablejsDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[sortablejs]'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [GLOBALS]\n      }]\n    }, {\n      type: SortablejsService\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc0.Renderer2\n    }];\n  }, {\n    runInsideAngular: [{\n      type: Input\n    }],\n    sortablejsInit: [{\n      type: Output\n    }],\n    sortablejs: [{\n      type: Input\n    }],\n    sortablejsContainer: [{\n      type: Input\n    }],\n    sortablejsOptions: [{\n      type: Input\n    }],\n    sortablejsCloneFunction: [{\n      type: Input\n    }]\n  });\n})();\n\nif (false) {\n  /** @type {?} */\n  SortablejsDirective.prototype.sortablejs;\n  /** @type {?} */\n\n  SortablejsDirective.prototype.sortablejsContainer;\n  /** @type {?} */\n\n  SortablejsDirective.prototype.sortablejsOptions;\n  /** @type {?} */\n\n  SortablejsDirective.prototype.sortablejsCloneFunction;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  SortablejsDirective.prototype.sortableInstance;\n  /** @type {?} */\n\n  SortablejsDirective.prototype.runInsideAngular;\n  /** @type {?} */\n\n  SortablejsDirective.prototype.sortablejsInit;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  SortablejsDirective.prototype.globalConfig;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  SortablejsDirective.prototype.service;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  SortablejsDirective.prototype.element;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  SortablejsDirective.prototype.zone;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  SortablejsDirective.prototype.renderer;\n}\n/**\n * @record\n */\n\n\nfunction SortableEvent() {}\n\nif (false) {\n  /** @type {?} */\n  SortableEvent.prototype.oldIndex;\n  /** @type {?} */\n\n  SortableEvent.prototype.newIndex;\n  /** @type {?|undefined} */\n\n  SortableEvent.prototype.oldDraggableIndex;\n  /** @type {?|undefined} */\n\n  SortableEvent.prototype.newDraggableIndex;\n  /** @type {?} */\n\n  SortableEvent.prototype.item;\n  /** @type {?} */\n\n  SortableEvent.prototype.clone;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar SortablejsModule = /*#__PURE__*/function () {\n  function SortablejsModule() {\n    _classCallCheck(this, SortablejsModule);\n  }\n\n  _createClass(SortablejsModule, null, [{\n    key: \"forRoot\",\n    value:\n    /**\n     * @param {?} globalOptions\n     * @return {?}\n     */\n    function forRoot(globalOptions) {\n      return {\n        ngModule: SortablejsModule,\n        providers: [{\n          provide: GLOBALS,\n          useValue: globalOptions\n        }]\n      };\n    }\n  }]);\n\n  return SortablejsModule;\n}();\n\nSortablejsModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: SortablejsModule\n});\nSortablejsModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function SortablejsModule_Factory(t) {\n    return new (t || SortablejsModule)();\n  }\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SortablejsModule, {\n    declarations: [SortablejsDirective],\n    exports: [SortablejsDirective]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(SortablejsModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [SortablejsDirective],\n      exports: [SortablejsDirective]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { SortablejsDirective, SortablejsModule, GLOBALS as ɵa, SortablejsService as ɵb };","map":{"version":3,"sources":["ngx-sortablejs/lib/globals.ts","ngx-sortablejs/lib/sortablejs-binding.ts","ngx-sortablejs/lib/sortablejs-bindings.ts","ngx-sortablejs/lib/sortablejs.service.ts","ngx-sortablejs/lib/sortablejs.directive.ts","ngx-sortablejs/lib/sortablejs.module.ts"],"names":[],"mappings":"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","sourcesContent":["import { InjectionToken } from '@angular/core';\nimport { SortablejsOptions } from './sortablejs-options';\n\nexport const GLOBALS: InjectionToken<SortablejsOptions> = new InjectionToken('Global config for sortablejs');\n","import { SortablejsBindingTarget } from './sortablejs-binding-target';\n\nexport class SortablejsBinding {\n\n  constructor(private target: SortablejsBindingTarget) { }\n\n  insert(index: number, item: any) {\n    if (this.isFormArray) {\n      this.target.insert(index, item);\n    } else {\n      this.target.splice(index, 0, item);\n    }\n  }\n\n  get(index: number) {\n    return this.isFormArray ? this.target.at(index) : this.target[index];\n  }\n\n  remove(index: number) {\n    let item;\n\n    if (this.isFormArray) {\n      item = this.target.at(index);\n      this.target.removeAt(index);\n    } else {\n      item = this.target.splice(index, 1)[0];\n    }\n\n    return item;\n  }\n\n  // we need this to identify that the target is a FormArray\n  // we don't want to have a dependency on @angular/forms just for that\n  private get isFormArray() {\n    // just checking for random FormArray methods not available on a standard array\n    return !!this.target.at && !!this.target.insert && !!this.target.reset;\n  }\n\n}\n","import { SortablejsBinding } from './sortablejs-binding';\nimport { SortablejsBindingTarget } from './sortablejs-binding-target';\n\nexport class SortablejsBindings {\n\n  bindings: SortablejsBinding[];\n\n  constructor(bindingTargets: SortablejsBindingTarget[]) {\n    this.bindings = bindingTargets.map(target => new SortablejsBinding(target));\n  }\n\n  injectIntoEvery(index: number, items: any[]) {\n    this.bindings.forEach((b, i) => b.insert(index, items[i]));\n  }\n\n  getFromEvery(index: number) {\n    return this.bindings.map(b => b.get(index));\n  }\n\n  extractFromEvery(index: number) {\n    return this.bindings.map(b => b.remove(index));\n  }\n\n  get provided() {\n    return !!this.bindings.length;\n  }\n\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SortablejsService {\n\n  // original library calls the events in unnatural order\n  // first the item is added, then removed from the previous array\n  // this is a temporary event to work this around\n  // as long as only one sortable takes place at a certain time\n  // this is enough to have a single `global` event\n  transfer: (items: any[]) => void;\n\n}\n","import { Directive, ElementRef, EventEmitter, Inject, Input, NgZone, OnChanges, OnDestroy, OnInit, Optional, Output, Renderer2, SimpleChange } from '@angular/core';\nimport Sortable from 'sortablejs';\nimport { GLOBALS } from './globals';\nimport { SortablejsBindingTarget } from './sortablejs-binding-target';\nimport { SortablejsBindings } from './sortablejs-bindings';\nimport { SortablejsOptions } from './sortablejs-options';\nimport { SortablejsService } from './sortablejs.service';\n\nconst getIndexesFromEvent = (event: SortableEvent) => {\n  if (event.hasOwnProperty('newDraggableIndex') && event.hasOwnProperty('oldDraggableIndex')) {\n      return {\n        new: event.newDraggableIndex,\n        old: event.oldDraggableIndex,\n      };\n  } else {\n    return {\n      new: event.newIndex,\n      old: event.oldIndex,\n    };\n  }\n};\n\n@Directive({\n  selector: '[sortablejs]',\n})\nexport class SortablejsDirective implements OnInit, OnChanges, OnDestroy {\n\n  @Input()\n  sortablejs: SortablejsBindingTarget; // array or a FormArray\n\n  @Input()\n  sortablejsContainer: string;\n\n  @Input()\n  sortablejsOptions: SortablejsOptions;\n\n  @Input()\n  sortablejsCloneFunction: <T>(item: T) => T;\n\n  private sortableInstance: any;\n\n  @Input() runInsideAngular = false; // to be deprecated\n\n  @Output() sortablejsInit = new EventEmitter();\n\n  constructor(\n    @Optional() @Inject(GLOBALS) private globalConfig: SortablejsOptions,\n    private service: SortablejsService,\n    private element: ElementRef,\n    private zone: NgZone,\n    private renderer: Renderer2,\n  ) { }\n\n  ngOnInit() {\n    if (Sortable && Sortable.create) { // Sortable does not exist in angular universal (SSR)\n      if (this.runInsideAngular) {\n        this.create();\n      } else {\n        this.zone.runOutsideAngular(() => this.create());\n      }\n    }\n  }\n\n  ngOnChanges(changes: { [prop in keyof SortablejsDirective]: SimpleChange }) {\n    const optionsChange: SimpleChange = changes.sortablejsOptions;\n\n    if (optionsChange && !optionsChange.isFirstChange()) {\n      const previousOptions: SortablejsOptions = optionsChange.previousValue;\n      const currentOptions: SortablejsOptions = optionsChange.currentValue;\n\n      Object.keys(currentOptions).forEach(optionName => {\n        if (currentOptions[optionName] !== previousOptions[optionName]) {\n          // use low-level option setter\n          this.sortableInstance.option(optionName, this.options[optionName]);\n        }\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.sortableInstance) {\n      this.sortableInstance.destroy();\n    }\n  }\n\n  private create() {\n    const container = this.sortablejsContainer ? this.element.nativeElement.querySelector(this.sortablejsContainer) : this.element.nativeElement;\n\n    setTimeout(() => {\n      this.sortableInstance = Sortable.create(container, this.options);\n      this.sortablejsInit.emit(this.sortableInstance);\n    }, 0);\n  }\n\n  private getBindings(): SortablejsBindings {\n    if (!this.sortablejs) {\n      return new SortablejsBindings([]);\n    } else if (this.sortablejs instanceof SortablejsBindings) {\n      return this.sortablejs;\n    } else {\n      return new SortablejsBindings([this.sortablejs]);\n    }\n  }\n\n  private get options() {\n    return { ...this.optionsWithoutEvents, ...this.overridenOptions };\n  }\n\n  private get optionsWithoutEvents() {\n    return { ...(this.globalConfig || {}), ...(this.sortablejsOptions || {}) };\n  }\n\n  private proxyEvent(eventName: string, ...params: any[]) {\n    this.zone.run(() => { // re-entering zone, see https://github.com/SortableJS/angular-sortablejs/issues/110#issuecomment-408874600\n      if (this.optionsWithoutEvents && this.optionsWithoutEvents[eventName]) {\n        this.optionsWithoutEvents[eventName](...params);\n      }\n    });\n  }\n\n  private get isCloning() {\n    return this.sortableInstance.options.group.checkPull(this.sortableInstance, this.sortableInstance) === 'clone';\n  }\n\n  private clone<T>(item: T): T {\n    // by default pass the item through, no cloning performed\n    return (this.sortablejsCloneFunction || (subitem => subitem))(item);\n  }\n\n  private get overridenOptions(): SortablejsOptions {\n    // always intercept standard events but act only in case items are set (bindingEnabled)\n    // allows to forget about tracking this.items changes\n    return {\n      onAdd: (event: SortableEvent) => {\n        this.service.transfer = (items: any[]) => {\n          this.getBindings().injectIntoEvery(event.newIndex, items);\n          this.proxyEvent('onAdd', event);\n        };\n\n        this.proxyEvent('onAddOriginal', event);\n      },\n      onRemove: (event: SortableEvent) => {\n        const bindings = this.getBindings();\n\n        if (bindings.provided) {\n          if (this.isCloning) {\n            this.service.transfer(bindings.getFromEvery(event.oldIndex).map(item => this.clone(item)));\n\n            // great thanks to https://github.com/tauu\n            // event.item is the original item from the source list which is moved to the target list\n            // event.clone is a clone of the original item and will be added to source list\n            // If bindings are provided, adding the item dom element to the target list causes artifacts\n            // as it interferes with the rendering performed by the angular template.\n            // Therefore we remove it immediately and also move the original item back to the source list.\n            // (event handler may be attached to the original item and not its clone, therefore keeping\n            // the original dom node, circumvents side effects )\n            this.renderer.removeChild(event.item.parentNode, event.item);\n            this.renderer.insertBefore(event.clone.parentNode, event.item, event.clone);\n            this.renderer.removeChild(event.clone.parentNode, event.clone);\n          } else {\n            this.service.transfer(bindings.extractFromEvery(event.oldIndex));\n          }\n\n          this.service.transfer = null;\n        }\n\n        this.proxyEvent('onRemove', event);\n      },\n      onUpdate: (event: SortableEvent) => {\n        const bindings = this.getBindings();\n        const indexes = getIndexesFromEvent(event);\n\n        bindings.injectIntoEvery(indexes.new, bindings.extractFromEvery(indexes.old));\n        this.proxyEvent('onUpdate', event);\n      },\n    };\n  }\n\n}\n\ninterface SortableEvent {\n  oldIndex: number;\n  newIndex: number;\n  oldDraggableIndex?: number;\n  newDraggableIndex?: number;\n  item: HTMLElement;\n  clone: HTMLElement;\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { GLOBALS } from './globals';\nimport { SortablejsOptions } from './sortablejs-options';\nimport { SortablejsDirective } from './sortablejs.directive';\n\n@NgModule({\n  declarations: [SortablejsDirective],\n  exports: [SortablejsDirective],\n})\nexport class SortablejsModule {\n\n  public static forRoot(globalOptions: SortablejsOptions): ModuleWithProviders {\n    return {\n      ngModule: SortablejsModule,\n      providers: [\n        { provide: GLOBALS, useValue: globalOptions },\n      ],\n    };\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}