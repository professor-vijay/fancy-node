{"ast":null,"code":"import _classCallCheck from \"D:/queen-supermarket/Biz1Market_EXE/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/queen-supermarket/Biz1Market_EXE/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"D:/queen-supermarket/Biz1Market_EXE/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"D:/queen-supermarket/Biz1Market_EXE/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"D:/queen-supermarket/Biz1Market_EXE/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Inject, Optional, PLATFORM_ID, NgZone, NgModule } from '@angular/core';\nimport { asyncScheduler, Observable, of, merge } from 'rxjs';\nimport { map, share, switchMap, scan, distinctUntilChanged, withLatestFrom, skipWhile } from 'rxjs/operators';\nimport * as i1 from '@angular/fire';\nimport { ɵAngularFireSchedulers, ɵkeepUnstableUntilFirstFactory, ɵfirebaseAppFactory, ɵlogAuthEmulatorError, ɵfetchInstance, FIREBASE_OPTIONS, FIREBASE_APP_NAME } from '@angular/fire';\nimport 'firebase/database';\nimport * as i2 from '@angular/fire/auth';\nimport { USE_EMULATOR as USE_EMULATOR$1 } from '@angular/fire/auth';\nimport firebase from 'firebase/app';\nimport * as ɵngcc0 from '@angular/core';\n\nfunction isString(value) {\n  return typeof value === 'string';\n}\n\nfunction isFirebaseDataSnapshot(value) {\n  return typeof value.exportVal === 'function';\n}\n\nfunction isNil(obj) {\n  return obj === undefined || obj === null;\n}\n\nfunction isFirebaseRef(value) {\n  return typeof value.set === 'function';\n}\n/**\n * Returns a database reference given a Firebase App and an\n * absolute or relative path.\n * @param database - Firebase Database\n * @param pathRef - Database path, relative or absolute\n */\n\n\nfunction getRef(database, pathRef) {\n  // if a db ref was passed in, just return it\n  return isFirebaseRef(pathRef) ? pathRef : database.ref(pathRef);\n}\n\nfunction checkOperationCases(item, cases) {\n  if (isString(item)) {\n    return cases.stringCase();\n  } else if (isFirebaseRef(item)) {\n    return cases.firebaseCase();\n  } else if (isFirebaseDataSnapshot(item)) {\n    return cases.snapshotCase();\n  }\n\n  throw new Error(\"Expects a string, snapshot, or reference. Got: \".concat(typeof item));\n}\n/**\n * Create an observable from a Database Reference or Database Query.\n * @param ref Database Reference\n * @param event Listen event type ('value', 'added', 'changed', 'removed', 'moved')\n * @param listenType 'on' or 'once'\n * @param scheduler - Rxjs scheduler\n */\n\n\nfunction fromRef(ref, event) {\n  var listenType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'on';\n  var scheduler = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : asyncScheduler;\n  return new Observable(function (subscriber) {\n    var fn = null;\n    fn = ref[listenType](event, function (snapshot, prevKey) {\n      scheduler.schedule(function () {\n        subscriber.next({\n          snapshot: snapshot,\n          prevKey: prevKey\n        });\n      });\n\n      if (listenType === 'once') {\n        scheduler.schedule(function () {\n          return subscriber.complete();\n        });\n      }\n    }, function (err) {\n      scheduler.schedule(function () {\n        return subscriber.error(err);\n      });\n    });\n\n    if (listenType === 'on') {\n      return {\n        unsubscribe: function unsubscribe() {\n          if (fn != null) {\n            ref.off(event, fn);\n          }\n        }\n      };\n    } else {\n      return {\n        unsubscribe: function unsubscribe() {}\n      };\n    }\n  }).pipe(map(function (payload) {\n    var snapshot = payload.snapshot,\n        prevKey = payload.prevKey;\n    var key = null;\n\n    if (snapshot.exists()) {\n      key = snapshot.key;\n    }\n\n    return {\n      type: event,\n      payload: snapshot,\n      prevKey: prevKey,\n      key: key\n    };\n  }), share());\n}\n\nfunction listChanges(ref, events, scheduler) {\n  return fromRef(ref, 'value', 'once', scheduler).pipe(switchMap(function (snapshotAction) {\n    var childEvent$ = [of(snapshotAction)];\n    events.forEach(function (event) {\n      return childEvent$.push(fromRef(ref, event, 'on', scheduler));\n    });\n    return merge.apply(void 0, childEvent$).pipe(scan(buildView, []));\n  }), distinctUntilChanged());\n}\n\nfunction positionFor(changes, key) {\n  var len = changes.length;\n\n  for (var i = 0; i < len; i++) {\n    if (changes[i].payload.key === key) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\nfunction positionAfter(changes, prevKey) {\n  if (isNil(prevKey)) {\n    return 0;\n  } else {\n    var i = positionFor(changes, prevKey);\n\n    if (i === -1) {\n      return changes.length;\n    } else {\n      return i + 1;\n    }\n  }\n}\n\nfunction buildView(current, action) {\n  var payload = action.payload,\n      prevKey = action.prevKey,\n      key = action.key;\n  var currentKeyPosition = positionFor(current, key);\n  var afterPreviousKeyPosition = positionAfter(current, prevKey);\n\n  switch (action.type) {\n    case 'value':\n      if (action.payload && action.payload.exists()) {\n        var _prevKey = null;\n        action.payload.forEach(function (payload) {\n          var action = {\n            payload: payload,\n            type: 'value',\n            prevKey: _prevKey,\n            key: payload.key\n          };\n          _prevKey = payload.key;\n          current = [].concat(_toConsumableArray(current), [action]);\n          return false;\n        });\n      }\n\n      return current;\n\n    case 'child_added':\n      if (currentKeyPosition > -1) {\n        // check that the previouskey is what we expect, else reorder\n        var previous = current[currentKeyPosition - 1];\n\n        if ((previous && previous.key || null) !== prevKey) {\n          current = current.filter(function (x) {\n            return x.payload.key !== payload.key;\n          });\n          current.splice(afterPreviousKeyPosition, 0, action);\n        }\n      } else if (prevKey == null) {\n        return [action].concat(_toConsumableArray(current));\n      } else {\n        current = current.slice();\n        current.splice(afterPreviousKeyPosition, 0, action);\n      }\n\n      return current;\n\n    case 'child_removed':\n      return current.filter(function (x) {\n        return x.payload.key !== payload.key;\n      });\n\n    case 'child_changed':\n      return current.map(function (x) {\n        return x.payload.key === key ? action : x;\n      });\n\n    case 'child_moved':\n      if (currentKeyPosition > -1) {\n        var data = current.splice(currentKeyPosition, 1)[0];\n        current = current.slice();\n        current.splice(afterPreviousKeyPosition, 0, data);\n        return current;\n      }\n\n      return current;\n    // default will also remove null results\n\n    default:\n      return current;\n  }\n}\n\nfunction validateEventsArray(events) {\n  if (isNil(events) || events.length === 0) {\n    events = ['child_added', 'child_removed', 'child_changed', 'child_moved'];\n  }\n\n  return events;\n}\n\nfunction _snapshotChanges(query, events, scheduler) {\n  events = validateEventsArray(events);\n  return listChanges(query, events, scheduler);\n}\n\nfunction _stateChanges(query, events, scheduler) {\n  events = validateEventsArray(events);\n  var childEvent$ = events.map(function (event) {\n    return fromRef(query, event, 'on', scheduler);\n  });\n  return merge.apply(void 0, _toConsumableArray(childEvent$));\n}\n\nfunction _auditTrail(query, events, scheduler) {\n  var auditTrail$ = _stateChanges(query, events).pipe(scan(function (current, action) {\n    return [].concat(_toConsumableArray(current), [action]);\n  }, []));\n\n  return waitForLoaded(query, auditTrail$, scheduler);\n}\n\nfunction loadedData(query, scheduler) {\n  // Create an observable of loaded values to retrieve the\n  // known dataset. This will allow us to know what key to\n  // emit the \"whole\" array at when listening for child events.\n  return fromRef(query, 'value', 'on', scheduler).pipe(map(function (data) {\n    // Store the last key in the data set\n    var lastKeyToLoad; // Loop through loaded dataset to find the last key\n\n    data.payload.forEach(function (child) {\n      lastKeyToLoad = child.key;\n      return false;\n    }); // return data set and the current last key loaded\n\n    return {\n      data: data,\n      lastKeyToLoad: lastKeyToLoad\n    };\n  }));\n}\n\nfunction waitForLoaded(query, action$, scheduler) {\n  var loaded$ = loadedData(query, scheduler);\n  return loaded$.pipe(withLatestFrom(action$), // Get the latest values from the \"loaded\" and \"child\" datasets\n  // We can use both datasets to form an array of the latest values.\n  map(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        loaded = _ref2[0],\n        actions = _ref2[1];\n\n    // Store the last key in the data set\n    var lastKeyToLoad = loaded.lastKeyToLoad; // Store all child keys loaded at this point\n\n    var loadedKeys = actions.map(function (snap) {\n      return snap.key;\n    });\n    return {\n      actions: actions,\n      lastKeyToLoad: lastKeyToLoad,\n      loadedKeys: loadedKeys\n    };\n  }), // This is the magical part, only emit when the last load key\n  // in the dataset has been loaded by a child event. At this point\n  // we can assume the dataset is \"whole\".\n  skipWhile(function (meta) {\n    return meta.loadedKeys.indexOf(meta.lastKeyToLoad) === -1;\n  }), // Pluck off the meta data because the user only cares\n  // to iterate through the snapshots\n  map(function (meta) {\n    return meta.actions;\n  }));\n}\n\nfunction createDataOperationMethod(ref, operation) {\n  return function dataOperation(item, value) {\n    return checkOperationCases(item, {\n      stringCase: function stringCase() {\n        return ref.child(item)[operation](value);\n      },\n      firebaseCase: function firebaseCase() {\n        return item[operation](value);\n      },\n      snapshotCase: function snapshotCase() {\n        return item.ref[operation](value);\n      }\n    });\n  };\n} // TODO(davideast): Find out why TS thinks this returns firebase.Primise\n// instead of Promise.\n\n\nfunction createRemoveMethod(ref) {\n  return function remove(item) {\n    if (!item) {\n      return ref.remove();\n    }\n\n    return checkOperationCases(item, {\n      stringCase: function stringCase() {\n        return ref.child(item).remove();\n      },\n      firebaseCase: function firebaseCase() {\n        return item.remove();\n      },\n      snapshotCase: function snapshotCase() {\n        return item.ref.remove();\n      }\n    });\n  };\n}\n\nfunction createListReference(query, afDatabase) {\n  var outsideAngularScheduler = afDatabase.schedulers.outsideAngular;\n  var refInZone = afDatabase.schedulers.ngZone.run(function () {\n    return query.ref;\n  });\n  return {\n    query: query,\n    update: createDataOperationMethod(refInZone, 'update'),\n    set: createDataOperationMethod(refInZone, 'set'),\n    push: function push(data) {\n      return refInZone.push(data);\n    },\n    remove: createRemoveMethod(refInZone),\n    snapshotChanges: function snapshotChanges(events) {\n      return _snapshotChanges(query, events, outsideAngularScheduler).pipe(afDatabase.keepUnstableUntilFirst);\n    },\n    stateChanges: function stateChanges(events) {\n      return _stateChanges(query, events, outsideAngularScheduler).pipe(afDatabase.keepUnstableUntilFirst);\n    },\n    auditTrail: function auditTrail(events) {\n      return _auditTrail(query, events, outsideAngularScheduler).pipe(afDatabase.keepUnstableUntilFirst);\n    },\n    valueChanges: function valueChanges(events, options) {\n      var snapshotChanges$ = _snapshotChanges(query, events, outsideAngularScheduler);\n\n      return snapshotChanges$.pipe(map(function (actions) {\n        return actions.map(function (a) {\n          if (options && options.idField) {\n            return Object.assign(Object.assign({}, a.payload.val()), _defineProperty({}, options.idField, a.key));\n          } else {\n            return a.payload.val();\n          }\n        });\n      }), afDatabase.keepUnstableUntilFirst);\n    }\n  };\n}\n\nfunction createObjectSnapshotChanges(query, scheduler) {\n  return function snapshotChanges() {\n    return fromRef(query, 'value', 'on', scheduler);\n  };\n}\n\nfunction createObjectReference(query, afDatabase) {\n  return {\n    query: query,\n    snapshotChanges: function snapshotChanges() {\n      return createObjectSnapshotChanges(query, afDatabase.schedulers.outsideAngular)().pipe(afDatabase.keepUnstableUntilFirst);\n    },\n    update: function update(data) {\n      return query.ref.update(data);\n    },\n    set: function set(data) {\n      return query.ref.set(data);\n    },\n    remove: function remove() {\n      return query.ref.remove();\n    },\n    valueChanges: function valueChanges() {\n      var snapshotChanges$ = createObjectSnapshotChanges(query, afDatabase.schedulers.outsideAngular)();\n      return snapshotChanges$.pipe(afDatabase.keepUnstableUntilFirst, map(function (action) {\n        return action.payload.exists() ? action.payload.val() : null;\n      }));\n    }\n  };\n}\n\nvar URL = new InjectionToken('angularfire2.realtimeDatabaseURL');\nvar USE_EMULATOR = new InjectionToken('angularfire2.database.use-emulator');\n\nvar AngularFireDatabase = /*#__PURE__*/function () {\n  function AngularFireDatabase(options, nameOrConfig, databaseURL, // tslint:disable-next-line:ban-types\n  platformId, zone, _useEmulator, // tuple isn't working here\n  useAuthEmulator) {\n    _classCallCheck(this, AngularFireDatabase);\n\n    this.schedulers = new ɵAngularFireSchedulers(zone);\n    this.keepUnstableUntilFirst = ɵkeepUnstableUntilFirstFactory(this.schedulers);\n    var useEmulator = _useEmulator;\n    var app = ɵfirebaseAppFactory(options, zone, nameOrConfig);\n\n    if (!firebase.auth && useAuthEmulator) {\n      ɵlogAuthEmulatorError();\n    }\n\n    this.database = ɵfetchInstance(\"\".concat(app.name, \".database.\").concat(databaseURL), 'AngularFireDatabase', app, function () {\n      var database = zone.runOutsideAngular(function () {\n        return app.database(databaseURL || undefined);\n      });\n\n      if (useEmulator) {\n        database.useEmulator.apply(database, _toConsumableArray(useEmulator));\n      }\n\n      return database;\n    }, [useEmulator]);\n  }\n\n  _createClass(AngularFireDatabase, [{\n    key: \"list\",\n    value: function list(pathOrRef, queryFn) {\n      var _this = this;\n\n      var ref = this.schedulers.ngZone.runOutsideAngular(function () {\n        return getRef(_this.database, pathOrRef);\n      });\n      var query = ref;\n\n      if (queryFn) {\n        query = queryFn(ref);\n      }\n\n      return createListReference(query, this);\n    }\n  }, {\n    key: \"object\",\n    value: function object(pathOrRef) {\n      var _this2 = this;\n\n      var ref = this.schedulers.ngZone.runOutsideAngular(function () {\n        return getRef(_this2.database, pathOrRef);\n      });\n      return createObjectReference(ref, this);\n    }\n  }, {\n    key: \"createPushId\",\n    value: function createPushId() {\n      var _this3 = this;\n\n      var ref = this.schedulers.ngZone.runOutsideAngular(function () {\n        return _this3.database.ref();\n      });\n      return ref.push().key;\n    }\n  }]);\n\n  return AngularFireDatabase;\n}();\n\nAngularFireDatabase.ɵfac = function AngularFireDatabase_Factory(t) {\n  return new (t || AngularFireDatabase)(ɵngcc0.ɵɵinject(FIREBASE_OPTIONS), ɵngcc0.ɵɵinject(FIREBASE_APP_NAME, 8), ɵngcc0.ɵɵinject(URL, 8), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(USE_EMULATOR, 8), ɵngcc0.ɵɵinject(USE_EMULATOR$1, 8));\n};\n/** @nocollapse */\n\n\nAngularFireDatabase.ɵprov = i0.ɵɵdefineInjectable({\n  factory: function AngularFireDatabase_Factory() {\n    return new AngularFireDatabase(i0.ɵɵinject(i1.FIREBASE_OPTIONS), i0.ɵɵinject(i1.FIREBASE_APP_NAME, 8), i0.ɵɵinject(URL, 8), i0.ɵɵinject(i0.PLATFORM_ID), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(USE_EMULATOR, 8), i0.ɵɵinject(i2.USE_EMULATOR, 8));\n  },\n  token: AngularFireDatabase,\n  providedIn: \"any\"\n});\n/** @nocollapse */\n\nAngularFireDatabase.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [FIREBASE_OPTIONS]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [FIREBASE_APP_NAME]\n    }]\n  }, {\n    type: String,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [URL]\n    }]\n  }, {\n    type: Object,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }, {\n    type: NgZone\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [USE_EMULATOR]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [USE_EMULATOR$1]\n    }]\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AngularFireDatabase, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'any'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [FIREBASE_OPTIONS]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [FIREBASE_APP_NAME]\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [URL]\n      }]\n    }, {\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [USE_EMULATOR]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [USE_EMULATOR$1]\n      }]\n    }];\n  }, null);\n})();\n\nvar AngularFireDatabaseModule = /*#__PURE__*/_createClass(function AngularFireDatabaseModule() {\n  _classCallCheck(this, AngularFireDatabaseModule);\n});\n\nAngularFireDatabaseModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: AngularFireDatabaseModule\n});\nAngularFireDatabaseModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function AngularFireDatabaseModule_Factory(t) {\n    return new (t || AngularFireDatabaseModule)();\n  },\n  providers: [AngularFireDatabase]\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AngularFireDatabaseModule, [{\n    type: NgModule,\n    args: [{\n      providers: [AngularFireDatabase]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { AngularFireDatabase, AngularFireDatabaseModule, URL, USE_EMULATOR, _auditTrail as auditTrail, createListReference, fromRef, listChanges, _snapshotChanges as snapshotChanges, _stateChanges as stateChanges };","map":{"version":3,"sources":["../../../src/database/utils.ts","../../../src/database/observable/fromRef.ts","../../../src/database/list/changes.ts","../../../src/database/list/utils.ts","../../../src/database/list/snapshot-changes.ts","../../../src/database/list/state-changes.ts","../../../src/database/list/audit-trail.ts","../../../src/database/list/data-operation.ts","../../../src/database/list/remove.ts","../../../src/database/list/create-reference.ts","../../../src/database/object/snapshot-changes.ts","../../../src/database/object/create-reference.ts","../../../src/database/database.ts","../../../src/database/database.module.ts","../../../src/database/angular-fire-database.ts"],"names":["USE_AUTH_EMULATOR"],"mappings":"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","sourcesContent":["import { DatabaseReference, FirebaseOperation, FirebaseOperationCases, PathReference } from './interfaces';\nimport firebase from 'firebase/app';\n\nexport function isString(value: any): boolean {\n  return typeof value === 'string';\n}\n\nexport function isFirebaseDataSnapshot(value: any): boolean {\n  return typeof value.exportVal === 'function';\n}\n\nexport function isNil(obj: any): boolean {\n  return obj === undefined || obj === null;\n}\n\nexport function isFirebaseRef(value: any): boolean {\n  return typeof value.set === 'function';\n}\n\n/**\n * Returns a database reference given a Firebase App and an\n * absolute or relative path.\n * @param database - Firebase Database\n * @param pathRef - Database path, relative or absolute\n */\nexport function getRef(database: firebase.database.Database, pathRef: PathReference): DatabaseReference {\n  // if a db ref was passed in, just return it\n  return isFirebaseRef(pathRef) ? pathRef as DatabaseReference\n    : database.ref(pathRef as string);\n}\n\nexport function checkOperationCases(item: FirebaseOperation, cases: FirebaseOperationCases): Promise<void> {\n  if (isString(item)) {\n    return cases.stringCase();\n  } else if (isFirebaseRef(item)) {\n    return cases.firebaseCase();\n  } else if (isFirebaseDataSnapshot(item)) {\n    return cases.snapshotCase();\n  }\n  throw new Error(`Expects a string, snapshot, or reference. Got: ${typeof item}`);\n}\n","import { AngularFireAction, DatabaseQuery, DatabaseSnapshot, ListenEvent } from '../interfaces';\nimport { asyncScheduler, Observable, SchedulerLike } from 'rxjs';\nimport { map, share } from 'rxjs/operators';\n\ninterface SnapshotPrevKey<T> {\n  snapshot: DatabaseSnapshot<T>;\n  prevKey: string | null | undefined;\n}\n\n/**\n * Create an observable from a Database Reference or Database Query.\n * @param ref Database Reference\n * @param event Listen event type ('value', 'added', 'changed', 'removed', 'moved')\n * @param listenType 'on' or 'once'\n * @param scheduler - Rxjs scheduler\n */\nexport function fromRef<T>(ref: DatabaseQuery,\n                           event: ListenEvent,\n                           listenType = 'on',\n                           scheduler: SchedulerLike = asyncScheduler\n): Observable<AngularFireAction<DatabaseSnapshot<T>>> {\n  return new Observable<SnapshotPrevKey<T>>(subscriber => {\n    let fn: any | null = null;\n    fn = ref[listenType](event, (snapshot, prevKey) => {\n      scheduler.schedule(() => {\n        subscriber.next({ snapshot, prevKey });\n      });\n      if (listenType === 'once') {\n        scheduler.schedule(() => subscriber.complete());\n      }\n    }, err => {\n      scheduler.schedule(() => subscriber.error(err));\n    });\n\n    if (listenType === 'on') {\n      return {\n        unsubscribe() {\n          if (fn != null) {\n            ref.off(event, fn);\n          }\n        }\n      };\n    } else {\n      return {\n        unsubscribe() {\n        }\n      };\n    }\n  }).pipe(\n    map(payload => {\n      const { snapshot, prevKey } = payload;\n      let key: string | null = null;\n      if (snapshot.exists()) {\n        key = snapshot.key;\n      }\n      return { type: event, payload: snapshot, prevKey, key };\n    }),\n    share()\n  );\n}\n","import { fromRef } from '../observable/fromRef';\nimport { merge, Observable, of, SchedulerLike } from 'rxjs';\n\nimport { ChildEvent, DatabaseQuery, SnapshotAction } from '../interfaces';\nimport { isNil } from '../utils';\n\nimport { distinctUntilChanged, scan, switchMap } from 'rxjs/operators';\n\nexport function listChanges<T = any>(ref: DatabaseQuery, events: ChildEvent[], scheduler?: SchedulerLike): Observable<SnapshotAction<T>[]> {\n  return fromRef(ref, 'value', 'once', scheduler).pipe(\n    switchMap(snapshotAction => {\n      const childEvent$ = [of(snapshotAction)];\n      events.forEach(event => childEvent$.push(fromRef(ref, event, 'on', scheduler)));\n      return merge(...childEvent$).pipe(scan(buildView, []));\n    }),\n    distinctUntilChanged()\n  );\n}\n\nfunction positionFor<T>(changes: SnapshotAction<T>[], key) {\n  const len = changes.length;\n  for (let i = 0; i < len; i++) {\n    if (changes[i].payload.key === key) {\n      return i;\n    }\n  }\n  return -1;\n}\n\nfunction positionAfter<T>(changes: SnapshotAction<T>[], prevKey?: string) {\n  if (isNil(prevKey)) {\n    return 0;\n  } else {\n    const i = positionFor(changes, prevKey);\n    if (i === -1) {\n      return changes.length;\n    } else {\n      return i + 1;\n    }\n  }\n}\n\nfunction buildView(current, action) {\n  const { payload, prevKey, key } = action;\n  const currentKeyPosition = positionFor(current, key);\n  const afterPreviousKeyPosition = positionAfter(current, prevKey);\n  switch (action.type) {\n    case 'value':\n      if (action.payload && action.payload.exists()) {\n        let prevKey = null;\n        action.payload.forEach(payload => {\n          const action = { payload, type: 'value', prevKey, key: payload.key };\n          prevKey = payload.key;\n          current = [...current, action];\n          return false;\n        });\n      }\n      return current;\n    case 'child_added':\n      if (currentKeyPosition > -1) {\n        // check that the previouskey is what we expect, else reorder\n        const previous = current[currentKeyPosition - 1];\n        if ((previous && previous.key || null) !== prevKey) {\n          current = current.filter(x => x.payload.key !== payload.key);\n          current.splice(afterPreviousKeyPosition, 0, action);\n        }\n      } else if (prevKey == null) {\n        return [action, ...current];\n      } else {\n        current = current.slice();\n        current.splice(afterPreviousKeyPosition, 0, action);\n      }\n      return current;\n    case 'child_removed':\n      return current.filter(x => x.payload.key !== payload.key);\n    case 'child_changed':\n      return current.map(x => x.payload.key === key ? action : x);\n    case 'child_moved':\n      if (currentKeyPosition > -1) {\n        const data = current.splice(currentKeyPosition, 1)[0];\n        current = current.slice();\n        current.splice(afterPreviousKeyPosition, 0, data);\n        return current;\n      }\n      return current;\n    // default will also remove null results\n    default:\n      return current;\n  }\n}\n","import { isNil } from '../utils';\n\nexport function validateEventsArray(events?: any[]) {\n  if (isNil(events) || events.length === 0) {\n    events = ['child_added', 'child_removed', 'child_changed', 'child_moved'];\n  }\n  return events;\n}\n","import { Observable, SchedulerLike } from 'rxjs';\nimport { listChanges } from './changes';\nimport { ChildEvent, DatabaseQuery, SnapshotAction } from '../interfaces';\nimport { validateEventsArray } from './utils';\n\nexport function snapshotChanges<T>(\n  query: DatabaseQuery,\n  events?: ChildEvent[],\n  scheduler?: SchedulerLike\n): Observable<SnapshotAction<T>[]> {\n  events = validateEventsArray(events);\n  return listChanges<T>(query, events, scheduler);\n}\n","import { ChildEvent, DatabaseQuery } from '../interfaces';\nimport { fromRef } from '../observable/fromRef';\nimport { validateEventsArray } from './utils';\nimport { merge, SchedulerLike } from 'rxjs';\n\nexport function stateChanges<T>(query: DatabaseQuery, events?: ChildEvent[], scheduler?: SchedulerLike) {\n  events = validateEventsArray(events);\n  const childEvent$ = events.map(event => fromRef<T>(query, event, 'on', scheduler));\n  return merge(...childEvent$);\n}\n","import { AngularFireAction, ChildEvent, DatabaseQuery, DataSnapshot, SnapshotAction } from '../interfaces';\nimport { stateChanges } from './state-changes';\nimport { Observable, SchedulerLike } from 'rxjs';\nimport { fromRef } from '../observable/fromRef';\n\nimport { map, scan, skipWhile, withLatestFrom } from 'rxjs/operators';\n\nexport function auditTrail<T>(query: DatabaseQuery, events?: ChildEvent[], scheduler?: SchedulerLike): Observable<SnapshotAction<T>[]> {\n  const auditTrail$ = stateChanges<T>(query, events)\n    .pipe(\n      scan((current, action) => [...current, action], [])\n    );\n  return waitForLoaded<T>(query, auditTrail$, scheduler);\n}\n\ninterface LoadedMetadata {\n  data: AngularFireAction<DataSnapshot>;\n  lastKeyToLoad: any;\n}\n\nfunction loadedData<T>(query: DatabaseQuery, scheduler?: SchedulerLike): Observable<LoadedMetadata> {\n  // Create an observable of loaded values to retrieve the\n  // known dataset. This will allow us to know what key to\n  // emit the \"whole\" array at when listening for child events.\n  return fromRef<T>(query, 'value', 'on', scheduler)\n  .pipe(\n    map(data => {\n      // Store the last key in the data set\n      let lastKeyToLoad;\n      // Loop through loaded dataset to find the last key\n      data.payload.forEach(child => {\n        lastKeyToLoad = child.key; return false;\n      });\n      // return data set and the current last key loaded\n      return { data, lastKeyToLoad };\n    })\n  );\n}\n\nfunction waitForLoaded<T>(query: DatabaseQuery, action$: Observable<SnapshotAction<T>[]>, scheduler?: SchedulerLike) {\n  const loaded$ = loadedData<T>(query, scheduler);\n  return loaded$\n    .pipe(\n      withLatestFrom(action$),\n      // Get the latest values from the \"loaded\" and \"child\" datasets\n      // We can use both datasets to form an array of the latest values.\n      map(([loaded, actions]) => {\n        // Store the last key in the data set\n        const lastKeyToLoad = loaded.lastKeyToLoad;\n        // Store all child keys loaded at this point\n        const loadedKeys = actions.map(snap => snap.key);\n        return { actions, lastKeyToLoad, loadedKeys };\n      }),\n      // This is the magical part, only emit when the last load key\n      // in the dataset has been loaded by a child event. At this point\n      // we can assume the dataset is \"whole\".\n      skipWhile(meta => meta.loadedKeys.indexOf(meta.lastKeyToLoad) === -1),\n      // Pluck off the meta data because the user only cares\n      // to iterate through the snapshots\n      map(meta => meta.actions)\n    );\n}\n","import { DatabaseReference, DatabaseSnapshot, FirebaseOperation } from '../interfaces';\nimport { checkOperationCases } from '../utils';\n\nexport function createDataOperationMethod<T>(ref: DatabaseReference, operation: string) {\n  return function dataOperation<T>(item: FirebaseOperation, value: T) {\n    return checkOperationCases(item, {\n      stringCase: () => ref.child(item as string)[operation](value),\n      firebaseCase: () => (item as DatabaseReference)[operation](value),\n      snapshotCase: () => (item as DatabaseSnapshot<T>).ref[operation](value)\n    });\n  };\n}\n","import { DatabaseReference, DatabaseSnapshot, FirebaseOperation } from '../interfaces';\nimport { checkOperationCases } from '../utils';\n\n// TODO(davideast): Find out why TS thinks this returns firebase.Primise\n// instead of Promise.\nexport function createRemoveMethod<T>(ref: DatabaseReference) {\n  return function remove(item?: FirebaseOperation): any {\n    if (!item) { return ref.remove(); }\n    return checkOperationCases(item, {\n      stringCase: () => ref.child(item as string).remove(),\n      firebaseCase: () => (item as DatabaseReference).remove(),\n      snapshotCase: () => (item as DatabaseSnapshot<T>).ref.remove()\n    });\n  };\n}\n","import { AngularFireList, ChildEvent, DatabaseQuery } from '../interfaces';\nimport { snapshotChanges } from './snapshot-changes';\nimport { stateChanges } from './state-changes';\nimport { auditTrail } from './audit-trail';\nimport { createDataOperationMethod } from './data-operation';\nimport { createRemoveMethod } from './remove';\nimport { AngularFireDatabase } from '../database';\nimport { map } from 'rxjs/operators';\n\nexport function createListReference<T= any>(query: DatabaseQuery, afDatabase: AngularFireDatabase): AngularFireList<T> {\n  const outsideAngularScheduler = afDatabase.schedulers.outsideAngular;\n  const refInZone = afDatabase.schedulers.ngZone.run(() => query.ref);\n  return {\n    query,\n    update: createDataOperationMethod<Partial<T>>(refInZone, 'update'),\n    set: createDataOperationMethod<T>(refInZone, 'set'),\n    push: (data: T) => refInZone.push(data),\n    remove: createRemoveMethod(refInZone),\n    snapshotChanges(events?: ChildEvent[]) {\n      return snapshotChanges<T>(query, events, outsideAngularScheduler).pipe(afDatabase.keepUnstableUntilFirst);\n    },\n    stateChanges(events?: ChildEvent[]) {\n      return stateChanges<T>(query, events, outsideAngularScheduler).pipe(afDatabase.keepUnstableUntilFirst);\n    },\n    auditTrail(events?: ChildEvent[]) {\n      return auditTrail<T>(query, events, outsideAngularScheduler).pipe(afDatabase.keepUnstableUntilFirst);\n    },\n    valueChanges<K extends string>(events?: ChildEvent[], options?: {idField?: K}) {\n      const snapshotChanges$ = snapshotChanges<T>(query, events, outsideAngularScheduler);\n      return snapshotChanges$.pipe(\n        map(actions => actions.map(a => {\n          if (options && options.idField) {\n            return {\n              ...a.payload.val() as T,\n              ...{\n                [options.idField]: a.key\n              }\n            };\n          } else {\n            return a.payload.val() as T;\n          }\n        })),\n        afDatabase.keepUnstableUntilFirst\n      );\n    }\n  };\n}\n","import { Observable, SchedulerLike } from 'rxjs';\nimport { fromRef } from '../observable/fromRef';\nimport { DatabaseQuery, SnapshotAction } from '../interfaces';\n\nexport function createObjectSnapshotChanges<T>(query: DatabaseQuery, scheduler?: SchedulerLike) {\n  return function snapshotChanges(): Observable<SnapshotAction<T>> {\n    return fromRef(query, 'value', 'on', scheduler);\n  };\n}\n","import { map } from 'rxjs/operators';\nimport { AngularFireObject, DatabaseQuery } from '../interfaces';\nimport { createObjectSnapshotChanges } from './snapshot-changes';\nimport { AngularFireDatabase } from '../database';\n\nexport function createObjectReference<T= any>(query: DatabaseQuery, afDatabase: AngularFireDatabase): AngularFireObject<T> {\n  return {\n    query,\n    snapshotChanges<T>() {\n      return createObjectSnapshotChanges<T>(query, afDatabase.schedulers.outsideAngular)().pipe(\n        afDatabase.keepUnstableUntilFirst\n      );\n    },\n    update(data: Partial<T>) { return query.ref.update(data as any) as Promise<void>; },\n    set(data: T) { return query.ref.set(data) as Promise<void>; },\n    remove() { return query.ref.remove() as Promise<void>; },\n    valueChanges<T>() {\n      const snapshotChanges$ = createObjectSnapshotChanges(query, afDatabase.schedulers.outsideAngular)();\n      return snapshotChanges$.pipe(\n        afDatabase.keepUnstableUntilFirst,\n        map(action => action.payload.exists() ? action.payload.val() as T : null)\n      );\n    },\n  };\n}\n","import { Inject, Injectable, InjectionToken, NgZone, Optional, PLATFORM_ID } from '@angular/core';\nimport { AngularFireList, AngularFireObject, DatabaseQuery, PathReference, QueryFn } from './interfaces';\nimport { getRef } from './utils';\nimport { createListReference } from './list/create-reference';\nimport { createObjectReference } from './object/create-reference';\nimport {\n  FIREBASE_APP_NAME,\n  FIREBASE_OPTIONS,\n  FirebaseAppConfig,\n  FirebaseOptions,\n  ɵAngularFireSchedulers,\n  ɵfirebaseAppFactory,\n  ɵkeepUnstableUntilFirstFactory,\n} from '@angular/fire';\nimport { Observable } from 'rxjs';\nimport 'firebase/database';\nimport { USE_EMULATOR as USE_AUTH_EMULATOR } from '@angular/fire/auth';\nimport firebase from 'firebase/app';\nimport { ɵfetchInstance, ɵlogAuthEmulatorError } from '@angular/fire';\n\nexport const URL = new InjectionToken<string>('angularfire2.realtimeDatabaseURL');\n\n// SEMVER(7): use Parameters to detirmine the useEmulator arguments\n// TODO(jamesdaniels): don't hardcode, but having tyepscript issues with firebase.database.Database\n// type UseEmulatorArguments = Parameters<typeof firebase.database.Database.prototype.useEmulator>;\ntype UseEmulatorArguments = [string, number];\nexport const USE_EMULATOR = new InjectionToken<UseEmulatorArguments>('angularfire2.database.use-emulator');\n\n@Injectable({\n  providedIn: 'any'\n})\nexport class AngularFireDatabase {\n  public readonly database: firebase.database.Database;\n\n  public readonly schedulers: ɵAngularFireSchedulers;\n  public readonly keepUnstableUntilFirst: <T>(obs$: Observable<T>) => Observable<T>;\n\n  constructor(\n    @Inject(FIREBASE_OPTIONS) options: FirebaseOptions,\n    @Optional() @Inject(FIREBASE_APP_NAME) nameOrConfig: string | FirebaseAppConfig | null | undefined,\n    @Optional() @Inject(URL) databaseURL: string | null,\n    // tslint:disable-next-line:ban-types\n    @Inject(PLATFORM_ID) platformId: Object,\n    zone: NgZone,\n    @Optional() @Inject(USE_EMULATOR) _useEmulator: any, // tuple isn't working here\n    @Optional() @Inject(USE_AUTH_EMULATOR) useAuthEmulator: any,\n  ) {\n    this.schedulers = new ɵAngularFireSchedulers(zone);\n    this.keepUnstableUntilFirst = ɵkeepUnstableUntilFirstFactory(this.schedulers);\n\n    const useEmulator: UseEmulatorArguments | null = _useEmulator;\n    const app = ɵfirebaseAppFactory(options, zone, nameOrConfig);\n\n    if (!firebase.auth && useAuthEmulator) {\n      ɵlogAuthEmulatorError();\n    }\n\n    this.database = ɵfetchInstance(`${app.name}.database.${databaseURL}`, 'AngularFireDatabase', app, () => {\n      const database = zone.runOutsideAngular(() => app.database(databaseURL || undefined));\n      if (useEmulator) {\n        database.useEmulator(...useEmulator);\n      }\n      return database;\n    }, [useEmulator]);\n  }\n\n  list<T>(pathOrRef: PathReference, queryFn?: QueryFn): AngularFireList<T> {\n    const ref = this.schedulers.ngZone.runOutsideAngular(() => getRef(this.database, pathOrRef));\n    let query: DatabaseQuery = ref;\n    if (queryFn) {\n      query = queryFn(ref);\n    }\n    return createListReference<T>(query, this);\n  }\n\n  object<T>(pathOrRef: PathReference): AngularFireObject<T> {\n    const ref = this.schedulers.ngZone.runOutsideAngular(() => getRef(this.database, pathOrRef));\n    return createObjectReference<T>(ref, this);\n  }\n\n  createPushId() {\n    const ref = this.schedulers.ngZone.runOutsideAngular(() => this.database.ref());\n    return ref.push().key;\n  }\n\n}\n\nexport {\n  PathReference,\n  DatabaseSnapshot,\n  ChildEvent,\n  ListenEvent,\n  QueryFn,\n  AngularFireList,\n  AngularFireObject,\n  AngularFireAction,\n  Action,\n  SnapshotAction\n} from './interfaces';\n","import { NgModule } from '@angular/core';\nimport { AngularFireDatabase } from './database';\n\n@NgModule({\n  providers: [ AngularFireDatabase ]\n})\nexport class AngularFireDatabaseModule { }\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"]},"metadata":{},"sourceType":"module"}