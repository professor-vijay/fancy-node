{"ast":null,"code":"import _classCallCheck from \"D:/queen-supermarket/Biz1Market_EXE/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/queen-supermarket/Biz1Market_EXE/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { finalize } from 'rxjs/operators';\nimport { NgProgress } from '@ngx-progressbar/core';\nimport { InjectionToken, Injectable, Optional, Inject, NgModule } from '@angular/core';\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/** @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@ngx-progressbar/core';\nvar NG_PROGRESS_HTTP_CONFIG = new InjectionToken('ngProgressHttpConfig');\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\nvar NgProgressInterceptor = /*#__PURE__*/function () {\n  /**\r\n   * @param {?} ngProgress\r\n   * @param {?=} config\r\n   */\n  function NgProgressInterceptor(ngProgress, config) {\n    _classCallCheck(this, NgProgressInterceptor);\n\n    this._inProgressCount = 0;\n    this._config = {\n      id: 'root',\n      silentApis: []\n    };\n    this._config = config ? Object.assign({}, this._config, config) : this._config;\n    this._progressRef = ngProgress.ref(this._config.id);\n  }\n  /**\r\n   * @param {?} req\r\n   * @param {?} next\r\n   * @return {?}\r\n   */\n\n\n  _createClass(NgProgressInterceptor, [{\n    key: \"intercept\",\n    value: function intercept(req, next) {\n      var _this = this;\n\n      // Ignore by request headers\n      if (req.headers.has('ignoreProgressBar')) {\n        return next.handle(req.clone({\n          headers: req.headers.delete('ignoreProgressBar')\n        }));\n      } // Ignore silent api requests\n\n\n      if (this.checkUrl(req)) {\n        return next.handle(req);\n      }\n\n      this._inProgressCount++;\n\n      if (!this._progressRef.isStarted) {\n        this._progressRef.start();\n      }\n\n      return next.handle(req).pipe(finalize(\n      /**\r\n      * @return {?}\r\n      */\n      function () {\n        _this._inProgressCount--;\n\n        if (_this._inProgressCount === 0) {\n          _this._progressRef.complete();\n        }\n      }));\n    }\n    /**\r\n     * Check if request is silent.\r\n     * @private\r\n     * @param {?} req request\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"checkUrl\",\n    value: function checkUrl(req) {\n      /** @type {?} */\n      var url = req.url.toLowerCase();\n      /** @type {?} */\n\n      var found = this._config.silentApis.find(\n      /**\r\n      * @param {?} u\r\n      * @return {?}\r\n      */\n      function (u) {\n        return url.startsWith(u);\n      });\n\n      return !!found;\n    }\n  }]);\n\n  return NgProgressInterceptor;\n}();\n\nNgProgressInterceptor.ɵfac = function NgProgressInterceptor_Factory(t) {\n  return new (t || NgProgressInterceptor)(ɵngcc0.ɵɵinject(ɵngcc1.NgProgress), ɵngcc0.ɵɵinject(NG_PROGRESS_HTTP_CONFIG, 8));\n};\n\nNgProgressInterceptor.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: NgProgressInterceptor,\n  factory: NgProgressInterceptor.ɵfac\n});\n/** @nocollapse */\n\nNgProgressInterceptor.ctorParameters = function () {\n  return [{\n    type: NgProgress\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [NG_PROGRESS_HTTP_CONFIG]\n    }]\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NgProgressInterceptor, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: ɵngcc1.NgProgress\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [NG_PROGRESS_HTTP_CONFIG]\n      }]\n    }];\n  }, null);\n})();\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n\nvar NgProgressHttpModule = /*#__PURE__*/function () {\n  function NgProgressHttpModule() {\n    _classCallCheck(this, NgProgressHttpModule);\n  }\n\n  _createClass(NgProgressHttpModule, null, [{\n    key: \"withConfig\",\n    value:\n    /**\r\n     * @param {?} config\r\n     * @return {?}\r\n     */\n    function withConfig(config) {\n      return {\n        ngModule: NgProgressHttpModule,\n        providers: [{\n          provide: NG_PROGRESS_HTTP_CONFIG,\n          useValue: config\n        }]\n      };\n    }\n  }]);\n\n  return NgProgressHttpModule;\n}();\n\nNgProgressHttpModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: NgProgressHttpModule\n});\nNgProgressHttpModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function NgProgressHttpModule_Factory(t) {\n    return new (t || NgProgressHttpModule)();\n  },\n  providers: [{\n    provide: HTTP_INTERCEPTORS,\n    useClass: NgProgressInterceptor,\n    multi: true\n  }]\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NgProgressHttpModule, [{\n    type: NgModule,\n    args: [{\n      providers: [{\n        provide: HTTP_INTERCEPTORS,\n        useClass: NgProgressInterceptor,\n        multi: true\n      }]\n    }]\n  }], null, null);\n})();\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n\nexport { NgProgressHttpModule, NG_PROGRESS_HTTP_CONFIG as ɵc, NgProgressInterceptor as ɵa };","map":{"version":3,"sources":["@ngx-progressbar/http/lib/ng-progress-http.interface.ts","@ngx-progressbar/http/lib/ng-progress.interceptor.ts","@ngx-progressbar/http/lib/ng-progress-http.module.ts"],"names":[],"mappings":"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","sourcesContent":["import { InjectionToken } from '@angular/core';\r\n\r\nexport interface NgProgressHttpConfig {\r\n  id?: string;\r\n  silentApis?: string[];\r\n}\r\n\r\nexport const NG_PROGRESS_HTTP_CONFIG = new InjectionToken<NgProgressHttpConfig>('ngProgressHttpConfig');\r\n","import { Injectable, Optional, Inject } from '@angular/core';\r\nimport { HttpInterceptor, HttpEvent, HttpHandler, HttpRequest } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { finalize } from 'rxjs/operators';\r\nimport { NgProgress, NgProgressRef } from '@ngx-progressbar/core';\r\nimport { NgProgressHttpConfig, NG_PROGRESS_HTTP_CONFIG } from './ng-progress-http.interface';\r\n\r\n@Injectable()\r\nexport class NgProgressInterceptor implements HttpInterceptor {\r\n\r\n  private _inProgressCount = 0;\r\n  private _progressRef: NgProgressRef;\r\n  private readonly _config: NgProgressHttpConfig = {\r\n    id: 'root',\r\n    silentApis: []\r\n  };\r\n\r\n  constructor(ngProgress: NgProgress, @Optional() @Inject(NG_PROGRESS_HTTP_CONFIG) config?: NgProgressHttpConfig) {\r\n    this._config = config ? {...this._config, ...config} : this._config;\r\n    this._progressRef = ngProgress.ref(this._config.id);\r\n  }\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n\r\n    // Ignore by request headers\r\n    if (req.headers.has('ignoreProgressBar')) {\r\n      return next.handle(req.clone({headers: req.headers.delete('ignoreProgressBar')}));\r\n    }\r\n\r\n    // Ignore silent api requests\r\n    if (this.checkUrl(req)) {\r\n      return next.handle(req);\r\n    }\r\n\r\n    this._inProgressCount++;\r\n\r\n    if (!this._progressRef.isStarted) {\r\n      this._progressRef.start();\r\n    }\r\n\r\n    return next.handle(req).pipe(\r\n      finalize(() => {\r\n        this._inProgressCount--;\r\n        if (this._inProgressCount === 0) {\r\n          this._progressRef.complete();\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Check if request is silent.\r\n   * @param req request\r\n   */\r\n  private checkUrl(req: HttpRequest<any>) {\r\n    const url = req.url.toLowerCase();\r\n    const found = this._config.silentApis.find((u) => url.startsWith(u));\r\n    return !!found;\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { NgProgressInterceptor } from './ng-progress.interceptor';\r\nimport { NgProgressHttpConfig, NG_PROGRESS_HTTP_CONFIG } from './ng-progress-http.interface';\r\n\r\n@NgModule({\r\n  providers: [\r\n    { provide: HTTP_INTERCEPTORS, useClass: NgProgressInterceptor, multi: true }\r\n  ]\r\n})\r\nexport class NgProgressHttpModule {\r\n  static withConfig(config: NgProgressHttpConfig): ModuleWithProviders {\r\n    return {\r\n      ngModule: NgProgressHttpModule,\r\n      providers: [\r\n        { provide: NG_PROGRESS_HTTP_CONFIG, useValue: config }\r\n      ]\r\n    };\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}