{"ast":null,"code":"import _classCallCheck from \"D:/master-sp-new/Biz1Maket_Single_Store/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/master-sp-new/Biz1Maket_Single_Store/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { __decorate, __metadata } from 'tslib';\nimport { ContentObserver, ObserversModule } from '@angular/cdk/observers';\nimport { TemplateRef, Component, ViewEncapsulation, ChangeDetectionStrategy, Renderer2, ElementRef, ChangeDetectorRef, NgZone, ViewChild, Input, NgModule } from '@angular/core';\nimport { zoomBadgeMotion } from 'ng-zorro-antd/core/animation';\nimport { NzConfigService, WithConfig } from 'ng-zorro-antd/core/config';\nimport { isEmpty, InputBoolean } from 'ng-zorro-antd/core/util';\nimport { Subject } from 'rxjs';\nimport { take, startWith, takeUntil } from 'rxjs/operators';\nimport { CommonModule } from '@angular/common';\nimport { NzOutletModule } from 'ng-zorro-antd/core/outlet';\n/**\n * @fileoverview added by tsickle\n * Generated from: preset-colors.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/** @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from 'ng-zorro-antd/core/config';\nimport * as ɵngcc2 from '@angular/cdk/observers';\nimport * as ɵngcc3 from '@angular/common';\nimport * as ɵngcc4 from 'ng-zorro-antd/core/outlet';\nvar _c0 = [\"contentElement\"];\n\nfunction NzBadgeComponent_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"span\", 4);\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassMapInterpolate1(\"ant-badge-status-dot ant-badge-status-\", ctx_r1.nzStatus || ctx_r1.presetColor, \"\");\n    ɵngcc0.ɵɵstyleProp(\"background\", !ctx_r1.presetColor && ctx_r1.nzColor);\n    ɵngcc0.ɵɵproperty(\"ngStyle\", ctx_r1.nzStyle);\n  }\n}\n\nfunction NzBadgeComponent_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 5);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r2.nzText);\n  }\n}\n\nfunction NzBadgeComponent_ng_container_5_sup_1_ng_container_1_span_1_ng_container_1_p_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"p\", 13);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var p_r12 = ctx.$implicit;\n    var i_r8 = ɵngcc0.ɵɵnextContext(3).index;\n    var ctx_r11 = ɵngcc0.ɵɵnextContext(3);\n    ɵngcc0.ɵɵclassProp(\"current\", p_r12 === ctx_r11.countArray[i_r8]);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", p_r12, \" \");\n  }\n}\n\nfunction NzBadgeComponent_ng_container_5_sup_1_ng_container_1_span_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, NzBadgeComponent_ng_container_5_sup_1_ng_container_1_span_1_ng_container_1_p_1_Template, 2, 3, \"p\", 12);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r10 = ɵngcc0.ɵɵnextContext(5);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r10.countSingleArray);\n  }\n}\n\nfunction NzBadgeComponent_ng_container_5_sup_1_ng_container_1_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 11);\n    ɵngcc0.ɵɵtemplate(1, NzBadgeComponent_ng_container_5_sup_1_ng_container_1_span_1_ng_container_1_Template, 2, 1, \"ng-container\", 9);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var i_r8 = ɵngcc0.ɵɵnextContext().index;\n    var ctx_r9 = ɵngcc0.ɵɵnextContext(3);\n    ɵngcc0.ɵɵstyleProp(\"transform\", \"translateY(\" + -ctx_r9.countArray[i_r8] * 100 + \"%)\");\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r9.nzDot && ctx_r9.countArray[i_r8] !== undefined);\n  }\n}\n\nfunction NzBadgeComponent_ng_container_5_sup_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, NzBadgeComponent_ng_container_5_sup_1_ng_container_1_span_1_Template, 2, 3, \"span\", 10);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r5 = ɵngcc0.ɵɵnextContext(3);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r5.count <= ctx_r5.nzOverflowCount);\n  }\n}\n\nfunction NzBadgeComponent_ng_container_5_sup_1_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r6 = ɵngcc0.ɵɵnextContext(3);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\"\", ctx_r6.nzOverflowCount, \"+\");\n  }\n}\n\nfunction NzBadgeComponent_ng_container_5_sup_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"sup\", 7);\n    ɵngcc0.ɵɵtemplate(1, NzBadgeComponent_ng_container_5_sup_1_ng_container_1_Template, 2, 1, \"ng-container\", 8);\n    ɵngcc0.ɵɵtemplate(2, NzBadgeComponent_ng_container_5_sup_1_ng_container_2_Template, 2, 1, \"ng-container\", 9);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r4 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵstyleProp(\"right\", ctx_r4.nzOffset && ctx_r4.nzOffset[0] ? -ctx_r4.nzOffset[0] : null, \"px\")(\"margin-top\", ctx_r4.nzOffset && ctx_r4.nzOffset[1] ? ctx_r4.nzOffset[1] : null, \"px\");\n    ɵngcc0.ɵɵclassProp(\"ant-badge-count\", !ctx_r4.nzDot)(\"ant-badge-dot\", ctx_r4.nzDot)(\"ant-badge-multiple-words\", ctx_r4.countArray.length >= 2);\n    ɵngcc0.ɵɵproperty(\"@.disabled\", ctx_r4.notWrapper)(\"@zoomBadgeMotion\", undefined)(\"ngStyle\", ctx_r4.nzStyle);\n    ɵngcc0.ɵɵattribute(\"title\", ctx_r4.nzTitle === null ? \"\" : ctx_r4.nzTitle || ctx_r4.nzCount);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r4.maxNumberArray);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r4.count > ctx_r4.nzOverflowCount);\n  }\n}\n\nfunction NzBadgeComponent_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, NzBadgeComponent_ng_container_5_sup_1_Template, 3, 16, \"sup\", 6);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r3.showSup && ctx_r3.viewInit);\n  }\n}\n\nvar _c1 = [\"*\"];\nvar badgePresetColors = ['pink', 'red', 'yellow', 'orange', 'cyan', 'green', 'blue', 'purple', 'geekblue', 'magenta', 'volcano', 'gold', 'lime'];\n/**\n * @fileoverview added by tsickle\n * Generated from: badge.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\nvar NZ_CONFIG_COMPONENT_NAME = 'backTop';\n\nvar NzBadgeComponent = /*#__PURE__*/function () {\n  /**\n   * @param {?} nzConfigService\n   * @param {?} renderer\n   * @param {?} elementRef\n   * @param {?} contentObserver\n   * @param {?} cdr\n   * @param {?} ngZone\n   */\n  function NzBadgeComponent(nzConfigService, renderer, elementRef, contentObserver, cdr, ngZone) {\n    _classCallCheck(this, NzBadgeComponent);\n\n    this.nzConfigService = nzConfigService;\n    this.renderer = renderer;\n    this.elementRef = elementRef;\n    this.contentObserver = contentObserver;\n    this.cdr = cdr;\n    this.ngZone = ngZone;\n    this.destroy$ = new Subject();\n    this.notWrapper = true;\n    this.viewInit = false;\n    this.maxNumberArray = [];\n    this.countArray = [];\n    this.countSingleArray = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n    this.presetColor = null;\n    this.count = 0;\n    this.nzShowZero = false;\n    this.nzShowDot = true;\n    this.nzDot = false;\n    this.nzOverflowCount = 99;\n    this.nzColor = undefined;\n    this.nzStyle = null;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(NzBadgeComponent, [{\n    key: \"checkContent\",\n    value: function checkContent() {\n      var _a;\n\n      this.notWrapper = isEmpty((_a = this.contentElement) === null || _a === void 0 ? void 0 : _a.nativeElement);\n\n      if (this.notWrapper) {\n        this.renderer.addClass(this.elementRef.nativeElement, 'ant-badge-not-a-wrapper');\n      } else {\n        this.renderer.removeClass(this.elementRef.nativeElement, 'ant-badge-not-a-wrapper');\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"showSup\",\n    get: function get() {\n      return this.nzShowDot && this.nzDot || this.count > 0 || this.count === 0 && this.nzShowZero;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"generateMaxNumberArray\",\n    value: function generateMaxNumberArray() {\n      this.maxNumberArray = this.nzOverflowCount.toString().split('');\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this.generateMaxNumberArray();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var _this = this;\n\n      this.ngZone.onStable.pipe(take(1)).subscribe(\n      /**\n      * @return {?}\n      */\n      function () {\n        _this.viewInit = true;\n\n        _this.cdr.detectChanges();\n      });\n      this.contentObserver.observe(\n      /** @type {?} */\n      this.contentElement).pipe(startWith(true), takeUntil(this.destroy$)).subscribe(\n      /**\n      * @return {?}\n      */\n      function () {\n        _this.checkContent();\n      });\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      var nzOverflowCount = changes.nzOverflowCount,\n          nzCount = changes.nzCount,\n          nzColor = changes.nzColor;\n\n      if (nzCount && !(nzCount.currentValue instanceof TemplateRef)) {\n        this.count = Math.max(0, nzCount.currentValue);\n        this.countArray = this.count.toString().split('').map(\n        /**\n        * @param {?} item\n        * @return {?}\n        */\n        function (item) {\n          return +item;\n        });\n      }\n\n      if (nzOverflowCount) {\n        this.generateMaxNumberArray();\n      }\n\n      if (nzColor) {\n        this.presetColor = this.nzColor && badgePresetColors.indexOf(this.nzColor) !== -1 ? this.nzColor : null;\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.destroy$.next();\n      this.destroy$.complete();\n    }\n  }]);\n\n  return NzBadgeComponent;\n}();\n\nNzBadgeComponent.ɵfac = function NzBadgeComponent_Factory(t) {\n  return new (t || NzBadgeComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NzConfigService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ContentObserver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n};\n\nNzBadgeComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: NzBadgeComponent,\n  selectors: [[\"nz-badge\"]],\n  viewQuery: function NzBadgeComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c0, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.contentElement = _t.first);\n    }\n  },\n  hostAttrs: [1, \"ant-badge\"],\n  hostVars: 2,\n  hostBindings: function NzBadgeComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"ant-badge-status\", ctx.nzStatus);\n    }\n  },\n  inputs: {\n    nzShowZero: \"nzShowZero\",\n    nzShowDot: \"nzShowDot\",\n    nzDot: \"nzDot\",\n    nzOverflowCount: \"nzOverflowCount\",\n    nzColor: \"nzColor\",\n    nzStyle: \"nzStyle\",\n    nzText: \"nzText\",\n    nzTitle: \"nzTitle\",\n    nzStatus: \"nzStatus\",\n    nzCount: \"nzCount\",\n    nzOffset: \"nzOffset\"\n  },\n  exportAs: [\"nzBadge\"],\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c1,\n  decls: 6,\n  vars: 3,\n  consts: [[\"contentElement\", \"\"], [3, \"class\", \"background\", \"ngStyle\", 4, \"ngIf\"], [\"class\", \"ant-badge-status-text\", 4, \"ngIf\"], [4, \"nzStringTemplateOutlet\"], [3, \"ngStyle\"], [1, \"ant-badge-status-text\"], [\"class\", \"ant-scroll-number\", 3, \"ngStyle\", \"right\", \"marginTop\", \"ant-badge-count\", \"ant-badge-dot\", \"ant-badge-multiple-words\", 4, \"ngIf\"], [1, \"ant-scroll-number\", 3, \"ngStyle\"], [4, \"ngFor\", \"ngForOf\"], [4, \"ngIf\"], [\"class\", \"ant-scroll-number-only\", 3, \"transform\", 4, \"ngIf\"], [1, \"ant-scroll-number-only\"], [\"class\", \"ant-scroll-number-only-unit\", 3, \"current\", 4, \"ngFor\", \"ngForOf\"], [1, \"ant-scroll-number-only-unit\"]],\n  template: function NzBadgeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"span\", null, 0);\n      ɵngcc0.ɵɵprojection(2);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtemplate(3, NzBadgeComponent_span_3_Template, 1, 6, \"span\", 1);\n      ɵngcc0.ɵɵtemplate(4, NzBadgeComponent_span_4_Template, 2, 1, \"span\", 2);\n      ɵngcc0.ɵɵtemplate(5, NzBadgeComponent_ng_container_5_Template, 2, 1, \"ng-container\", 3);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(3);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.nzStatus || ctx.nzColor);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.nzStatus || ctx.nzColor);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"nzStringTemplateOutlet\", ctx.nzCount);\n    }\n  },\n  directives: [ɵngcc3.NgIf, ɵngcc4.NzStringTemplateOutletDirective, ɵngcc3.NgStyle, ɵngcc3.NgForOf],\n  encapsulation: 2,\n  data: {\n    animation: [zoomBadgeMotion]\n  },\n  changeDetection: 0\n});\n/** @nocollapse */\n\nNzBadgeComponent.ctorParameters = function () {\n  return [{\n    type: NzConfigService\n  }, {\n    type: Renderer2\n  }, {\n    type: ElementRef\n  }, {\n    type: ContentObserver\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: NgZone\n  }];\n};\n\nNzBadgeComponent.propDecorators = {\n  contentElement: [{\n    type: ViewChild,\n    args: ['contentElement', {\n      static: false\n    }]\n  }],\n  nzShowZero: [{\n    type: Input\n  }],\n  nzShowDot: [{\n    type: Input\n  }],\n  nzDot: [{\n    type: Input\n  }],\n  nzOverflowCount: [{\n    type: Input\n  }],\n  nzColor: [{\n    type: Input\n  }],\n  nzStyle: [{\n    type: Input\n  }],\n  nzText: [{\n    type: Input\n  }],\n  nzTitle: [{\n    type: Input\n  }],\n  nzStatus: [{\n    type: Input\n  }],\n  nzCount: [{\n    type: Input\n  }],\n  nzOffset: [{\n    type: Input\n  }]\n};\n\n__decorate([InputBoolean(), __metadata(\"design:type\", Boolean)], NzBadgeComponent.prototype, \"nzShowZero\", void 0);\n\n__decorate([InputBoolean(), __metadata(\"design:type\", Object)], NzBadgeComponent.prototype, \"nzShowDot\", void 0);\n\n__decorate([InputBoolean(), __metadata(\"design:type\", Object)], NzBadgeComponent.prototype, \"nzDot\", void 0);\n\n__decorate([WithConfig(NZ_CONFIG_COMPONENT_NAME), __metadata(\"design:type\", Number)], NzBadgeComponent.prototype, \"nzOverflowCount\", void 0);\n\n__decorate([WithConfig(NZ_CONFIG_COMPONENT_NAME), __metadata(\"design:type\", String)], NzBadgeComponent.prototype, \"nzColor\", void 0);\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NzBadgeComponent, [{\n    type: Component,\n    args: [{\n      selector: 'nz-badge',\n      exportAs: 'nzBadge',\n      preserveWhitespaces: false,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [zoomBadgeMotion],\n      template: \"\\n    <span #contentElement><ng-content></ng-content></span>\\n    <span\\n      class=\\\"ant-badge-status-dot ant-badge-status-{{ nzStatus || presetColor }}\\\"\\n      [style.background]=\\\"!presetColor && nzColor\\\"\\n      *ngIf=\\\"nzStatus || nzColor\\\"\\n      [ngStyle]=\\\"nzStyle\\\"\\n    ></span>\\n    <span class=\\\"ant-badge-status-text\\\" *ngIf=\\\"nzStatus || nzColor\\\">{{ nzText }}</span>\\n    <ng-container *nzStringTemplateOutlet=\\\"nzCount\\\">\\n      <sup\\n        class=\\\"ant-scroll-number\\\"\\n        *ngIf=\\\"showSup && viewInit\\\"\\n        [@.disabled]=\\\"notWrapper\\\"\\n        [@zoomBadgeMotion]\\n        [ngStyle]=\\\"nzStyle\\\"\\n        [attr.title]=\\\"nzTitle === null ? '' : nzTitle || nzCount\\\"\\n        [style.right.px]=\\\"nzOffset && nzOffset[0] ? -nzOffset[0] : null\\\"\\n        [style.marginTop.px]=\\\"nzOffset && nzOffset[1] ? nzOffset[1] : null\\\"\\n        [class.ant-badge-count]=\\\"!nzDot\\\"\\n        [class.ant-badge-dot]=\\\"nzDot\\\"\\n        [class.ant-badge-multiple-words]=\\\"countArray.length >= 2\\\"\\n      >\\n        <ng-container *ngFor=\\\"let n of maxNumberArray; let i = index\\\">\\n          <span\\n            class=\\\"ant-scroll-number-only\\\"\\n            *ngIf=\\\"count <= nzOverflowCount\\\"\\n            [style.transform]=\\\"'translateY(' + -countArray[i] * 100 + '%)'\\\"\\n          >\\n            <ng-container *ngIf=\\\"!nzDot && countArray[i] !== undefined\\\">\\n              <p *ngFor=\\\"let p of countSingleArray\\\" class=\\\"ant-scroll-number-only-unit\\\" [class.current]=\\\"p === countArray[i]\\\">\\n                {{ p }}\\n              </p>\\n            </ng-container>\\n          </span>\\n        </ng-container>\\n        <ng-container *ngIf=\\\"count > nzOverflowCount\\\">{{ nzOverflowCount }}+</ng-container>\\n      </sup>\\n    </ng-container>\\n  \",\n      host: {\n        class: 'ant-badge',\n        '[class.ant-badge-status]': 'nzStatus'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.NzConfigService\n    }, {\n      type: ɵngcc0.Renderer2\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc2.ContentObserver\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, {\n    nzShowZero: [{\n      type: Input\n    }],\n    nzShowDot: [{\n      type: Input\n    }],\n    nzDot: [{\n      type: Input\n    }],\n    nzOverflowCount: [{\n      type: Input\n    }],\n    nzColor: [{\n      type: Input\n    }],\n    nzStyle: [{\n      type: Input\n    }],\n    contentElement: [{\n      type: ViewChild,\n      args: ['contentElement', {\n        static: false\n      }]\n    }],\n    nzText: [{\n      type: Input\n    }],\n    nzTitle: [{\n      type: Input\n    }],\n    nzStatus: [{\n      type: Input\n    }],\n    nzCount: [{\n      type: Input\n    }],\n    nzOffset: [{\n      type: Input\n    }]\n  });\n})();\n\nif (false) {\n  /** @type {?} */\n  NzBadgeComponent.ngAcceptInputType_nzShowZero;\n  /** @type {?} */\n\n  NzBadgeComponent.ngAcceptInputType_nzShowDot;\n  /** @type {?} */\n\n  NzBadgeComponent.ngAcceptInputType_nzDot;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NzBadgeComponent.prototype.destroy$;\n  /** @type {?} */\n\n  NzBadgeComponent.prototype.notWrapper;\n  /** @type {?} */\n\n  NzBadgeComponent.prototype.viewInit;\n  /** @type {?} */\n\n  NzBadgeComponent.prototype.maxNumberArray;\n  /** @type {?} */\n\n  NzBadgeComponent.prototype.countArray;\n  /** @type {?} */\n\n  NzBadgeComponent.prototype.countSingleArray;\n  /** @type {?} */\n\n  NzBadgeComponent.prototype.presetColor;\n  /** @type {?} */\n\n  NzBadgeComponent.prototype.count;\n  /** @type {?} */\n\n  NzBadgeComponent.prototype.contentElement;\n  /** @type {?} */\n\n  NzBadgeComponent.prototype.nzShowZero;\n  /** @type {?} */\n\n  NzBadgeComponent.prototype.nzShowDot;\n  /** @type {?} */\n\n  NzBadgeComponent.prototype.nzDot;\n  /** @type {?} */\n\n  NzBadgeComponent.prototype.nzOverflowCount;\n  /** @type {?} */\n\n  NzBadgeComponent.prototype.nzColor;\n  /** @type {?} */\n\n  NzBadgeComponent.prototype.nzStyle;\n  /** @type {?} */\n\n  NzBadgeComponent.prototype.nzText;\n  /** @type {?} */\n\n  NzBadgeComponent.prototype.nzTitle;\n  /** @type {?} */\n\n  NzBadgeComponent.prototype.nzStatus;\n  /** @type {?} */\n\n  NzBadgeComponent.prototype.nzCount;\n  /** @type {?} */\n\n  NzBadgeComponent.prototype.nzOffset;\n  /** @type {?} */\n\n  NzBadgeComponent.prototype.nzConfigService;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NzBadgeComponent.prototype.renderer;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NzBadgeComponent.prototype.elementRef;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NzBadgeComponent.prototype.contentObserver;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NzBadgeComponent.prototype.cdr;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NzBadgeComponent.prototype.ngZone;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: badge.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar NzBadgeModule = /*#__PURE__*/_createClass(function NzBadgeModule() {\n  _classCallCheck(this, NzBadgeModule);\n});\n\nNzBadgeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: NzBadgeModule\n});\nNzBadgeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function NzBadgeModule_Factory(t) {\n    return new (t || NzBadgeModule)();\n  },\n  imports: [[CommonModule, ObserversModule, NzOutletModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NzBadgeModule, {\n    declarations: function declarations() {\n      return [NzBadgeComponent];\n    },\n    imports: function imports() {\n      return [CommonModule, ObserversModule, NzOutletModule];\n    },\n    exports: function exports() {\n      return [NzBadgeComponent];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NzBadgeModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [NzBadgeComponent],\n      exports: [NzBadgeComponent],\n      imports: [CommonModule, ObserversModule, NzOutletModule]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: ng-zorro-antd-badge.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { NzBadgeComponent, NzBadgeModule };","map":{"version":3,"sources":["ng-zorro-antd/badge/preset-colors.ts","ng-zorro-antd/badge/badge.component.ts","ng-zorro-antd/badge/badge.module.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nexport const badgePresetColors: ReadonlyArray<string> = [\n  'pink',\n  'red',\n  'yellow',\n  'orange',\n  'cyan',\n  'green',\n  'blue',\n  'purple',\n  'geekblue',\n  'magenta',\n  'volcano',\n  'gold',\n  'lime'\n];\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { ContentObserver } from '@angular/cdk/observers';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport { zoomBadgeMotion } from 'ng-zorro-antd/core/animation';\nimport { NzConfigService, WithConfig } from 'ng-zorro-antd/core/config';\nimport { BooleanInput, NzSafeAny } from 'ng-zorro-antd/core/types';\nimport { InputBoolean, isEmpty } from 'ng-zorro-antd/core/util';\nimport { Subject } from 'rxjs';\nimport { startWith, take, takeUntil } from 'rxjs/operators';\n\nimport { badgePresetColors } from './preset-colors';\nimport { NzBadgeStatusType } from './types';\n\nconst NZ_CONFIG_COMPONENT_NAME = 'backTop';\n\n@Component({\n  selector: 'nz-badge',\n  exportAs: 'nzBadge',\n  preserveWhitespaces: false,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [zoomBadgeMotion],\n  template: `\n    <span #contentElement><ng-content></ng-content></span>\n    <span\n      class=\"ant-badge-status-dot ant-badge-status-{{ nzStatus || presetColor }}\"\n      [style.background]=\"!presetColor && nzColor\"\n      *ngIf=\"nzStatus || nzColor\"\n      [ngStyle]=\"nzStyle\"\n    ></span>\n    <span class=\"ant-badge-status-text\" *ngIf=\"nzStatus || nzColor\">{{ nzText }}</span>\n    <ng-container *nzStringTemplateOutlet=\"nzCount\">\n      <sup\n        class=\"ant-scroll-number\"\n        *ngIf=\"showSup && viewInit\"\n        [@.disabled]=\"notWrapper\"\n        [@zoomBadgeMotion]\n        [ngStyle]=\"nzStyle\"\n        [attr.title]=\"nzTitle === null ? '' : nzTitle || nzCount\"\n        [style.right.px]=\"nzOffset && nzOffset[0] ? -nzOffset[0] : null\"\n        [style.marginTop.px]=\"nzOffset && nzOffset[1] ? nzOffset[1] : null\"\n        [class.ant-badge-count]=\"!nzDot\"\n        [class.ant-badge-dot]=\"nzDot\"\n        [class.ant-badge-multiple-words]=\"countArray.length >= 2\"\n      >\n        <ng-container *ngFor=\"let n of maxNumberArray; let i = index\">\n          <span\n            class=\"ant-scroll-number-only\"\n            *ngIf=\"count <= nzOverflowCount\"\n            [style.transform]=\"'translateY(' + -countArray[i] * 100 + '%)'\"\n          >\n            <ng-container *ngIf=\"!nzDot && countArray[i] !== undefined\">\n              <p *ngFor=\"let p of countSingleArray\" class=\"ant-scroll-number-only-unit\" [class.current]=\"p === countArray[i]\">\n                {{ p }}\n              </p>\n            </ng-container>\n          </span>\n        </ng-container>\n        <ng-container *ngIf=\"count > nzOverflowCount\">{{ nzOverflowCount }}+</ng-container>\n      </sup>\n    </ng-container>\n  `,\n  host: {\n    class: 'ant-badge',\n    '[class.ant-badge-status]': 'nzStatus'\n  }\n})\nexport class NzBadgeComponent implements OnInit, AfterViewInit, OnChanges, OnDestroy {\n  static ngAcceptInputType_nzShowZero: BooleanInput;\n  static ngAcceptInputType_nzShowDot: BooleanInput;\n  static ngAcceptInputType_nzDot: BooleanInput;\n\n  private destroy$ = new Subject();\n  notWrapper = true;\n  viewInit = false;\n  maxNumberArray: string[] = [];\n  countArray: number[] = [];\n  countSingleArray = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n  presetColor: string | null = null;\n  count: number = 0;\n  @ViewChild('contentElement', { static: false }) contentElement?: ElementRef;\n  @Input() @InputBoolean() nzShowZero: boolean = false;\n  @Input() @InputBoolean() nzShowDot = true;\n  @Input() @InputBoolean() nzDot = false;\n  @Input() @WithConfig(NZ_CONFIG_COMPONENT_NAME) nzOverflowCount: number = 99;\n  @Input() @WithConfig(NZ_CONFIG_COMPONENT_NAME) nzColor?: string = undefined;\n  @Input() nzStyle: { [key: string]: string } | null = null;\n  @Input() nzText?: string;\n  @Input() nzTitle?: string | null | undefined;\n  @Input() nzStatus?: NzBadgeStatusType | string;\n  @Input() nzCount?: number | TemplateRef<NzSafeAny>;\n  @Input() nzOffset?: [number, number];\n\n  checkContent(): void {\n    this.notWrapper = isEmpty(this.contentElement?.nativeElement);\n    if (this.notWrapper) {\n      this.renderer.addClass(this.elementRef.nativeElement, 'ant-badge-not-a-wrapper');\n    } else {\n      this.renderer.removeClass(this.elementRef.nativeElement, 'ant-badge-not-a-wrapper');\n    }\n  }\n\n  get showSup(): boolean {\n    return (this.nzShowDot && this.nzDot) || this.count > 0 || (this.count === 0 && this.nzShowZero);\n  }\n\n  generateMaxNumberArray(): void {\n    this.maxNumberArray = this.nzOverflowCount.toString().split('');\n  }\n\n  constructor(\n    public nzConfigService: NzConfigService,\n    private renderer: Renderer2,\n    private elementRef: ElementRef,\n    private contentObserver: ContentObserver,\n    private cdr: ChangeDetectorRef,\n    private ngZone: NgZone\n  ) {}\n\n  ngOnInit(): void {\n    this.generateMaxNumberArray();\n  }\n\n  ngAfterViewInit(): void {\n    this.ngZone.onStable.pipe(take(1)).subscribe(() => {\n      this.viewInit = true;\n      this.cdr.detectChanges();\n    });\n\n    this.contentObserver\n      .observe(this.contentElement!)\n      .pipe(startWith(true), takeUntil(this.destroy$))\n      .subscribe(() => {\n        this.checkContent();\n      });\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    const { nzOverflowCount, nzCount, nzColor } = changes;\n    if (nzCount && !(nzCount.currentValue instanceof TemplateRef)) {\n      this.count = Math.max(0, nzCount.currentValue);\n      this.countArray = this.count\n        .toString()\n        .split('')\n        .map(item => +item);\n    }\n    if (nzOverflowCount) {\n      this.generateMaxNumberArray();\n    }\n    if (nzColor) {\n      this.presetColor = this.nzColor && badgePresetColors.indexOf(this.nzColor) !== -1 ? this.nzColor : null;\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { ObserversModule } from '@angular/cdk/observers';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { NzOutletModule } from 'ng-zorro-antd/core/outlet';\n\nimport { NzBadgeComponent } from './badge.component';\n\n@NgModule({\n  declarations: [NzBadgeComponent],\n  exports: [NzBadgeComponent],\n  imports: [CommonModule, ObserversModule, NzOutletModule]\n})\nexport class NzBadgeModule {}\n"]},"metadata":{},"sourceType":"module"}