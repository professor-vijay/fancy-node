{"ast":null,"code":"import _classCallCheck from \"D:/Biz1-Market-0.01/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/Biz1-Market-0.01/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { __decorate, __metadata } from 'tslib';\nimport { FocusMonitor, A11yModule } from '@angular/cdk/a11y';\nimport { EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, Renderer2, ElementRef, Output, forwardRef, Optional, ChangeDetectorRef, ViewChild, Input, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { InputBoolean } from 'ng-zorro-antd/core/util';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * Generated from: checkbox-wrapper.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/forms';\nimport * as ɵngcc3 from '@angular/common';\nvar _c0 = [\"*\"];\nvar _c1 = [\"inputElement\"];\nvar _c2 = [\"nz-checkbox\", \"\"];\n\nfunction NzCheckboxGroupComponent_label_0_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r3 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"label\", 1);\n    ɵngcc0.ɵɵlistener(\"nzCheckedChange\", function NzCheckboxGroupComponent_label_0_Template_label_nzCheckedChange_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      var o_r1 = ctx.$implicit;\n      var ctx_r2 = ɵngcc0.ɵɵnextContext();\n      return ctx_r2.onCheckedChange(o_r1, $event);\n    });\n    ɵngcc0.ɵɵelementStart(1, \"span\");\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var o_r1 = ctx.$implicit;\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"nzDisabled\", o_r1.disabled || ctx_r0.nzDisabled)(\"nzChecked\", o_r1.checked);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(o_r1.label);\n  }\n}\n\nvar NzCheckboxWrapperComponent = /*#__PURE__*/function () {\n  /**\n   * @param {?} renderer\n   * @param {?} elementRef\n   */\n  function NzCheckboxWrapperComponent(renderer, elementRef) {\n    _classCallCheck(this, NzCheckboxWrapperComponent);\n\n    this.nzOnChange = new EventEmitter();\n    this.checkboxList = [];\n    renderer.addClass(elementRef.nativeElement, 'ant-checkbox-group');\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  _createClass(NzCheckboxWrapperComponent, [{\n    key: \"addCheckbox\",\n    value: function addCheckbox(value) {\n      this.checkboxList.push(value);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"removeCheckbox\",\n    value: function removeCheckbox(value) {\n      this.checkboxList.splice(this.checkboxList.indexOf(value), 1);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"onChange\",\n    value: function onChange() {\n      /** @type {?} */\n      var listOfCheckedValue = this.checkboxList.filter(\n      /**\n      * @param {?} item\n      * @return {?}\n      */\n      function (item) {\n        return item.nzChecked;\n      }).map(\n      /**\n      * @param {?} item\n      * @return {?}\n      */\n      function (item) {\n        return item.nzValue;\n      });\n      this.nzOnChange.emit(listOfCheckedValue);\n    }\n  }]);\n\n  return NzCheckboxWrapperComponent;\n}();\n\nNzCheckboxWrapperComponent.ɵfac = function NzCheckboxWrapperComponent_Factory(t) {\n  return new (t || NzCheckboxWrapperComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nNzCheckboxWrapperComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: NzCheckboxWrapperComponent,\n  selectors: [[\"nz-checkbox-wrapper\"]],\n  outputs: {\n    nzOnChange: \"nzOnChange\"\n  },\n  exportAs: [\"nzCheckboxWrapper\"],\n  ngContentSelectors: _c0,\n  decls: 1,\n  vars: 0,\n  template: function NzCheckboxWrapperComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵprojection(0);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nNzCheckboxWrapperComponent.ctorParameters = function () {\n  return [{\n    type: Renderer2\n  }, {\n    type: ElementRef\n  }];\n};\n\nNzCheckboxWrapperComponent.propDecorators = {\n  nzOnChange: [{\n    type: Output\n  }]\n};\n\nif (false) {\n  /** @type {?} */\n  NzCheckboxWrapperComponent.prototype.nzOnChange;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NzCheckboxWrapperComponent.prototype.checkboxList;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: checkbox.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar NzCheckboxComponent = /*#__PURE__*/function () {\n  /**\n   * @param {?} elementRef\n   * @param {?} nzCheckboxWrapperComponent\n   * @param {?} cdr\n   * @param {?} focusMonitor\n   */\n  function NzCheckboxComponent(elementRef, nzCheckboxWrapperComponent, cdr, focusMonitor) {\n    _classCallCheck(this, NzCheckboxComponent);\n\n    this.elementRef = elementRef;\n    this.nzCheckboxWrapperComponent = nzCheckboxWrapperComponent;\n    this.cdr = cdr;\n    this.focusMonitor = focusMonitor;\n\n    this.onChange =\n    /**\n    * @return {?}\n    */\n    function () {};\n\n    this.onTouched =\n    /**\n    * @return {?}\n    */\n    function () {};\n\n    this.nzCheckedChange = new EventEmitter();\n    this.nzValue = null;\n    this.nzAutoFocus = false;\n    this.nzDisabled = false;\n    this.nzIndeterminate = false;\n    this.nzChecked = false;\n  }\n  /**\n   * @param {?} e\n   * @return {?}\n   */\n\n\n  _createClass(NzCheckboxComponent, [{\n    key: \"hostClick\",\n    value: function hostClick(e) {\n      e.preventDefault();\n      this.focus();\n      this.innerCheckedChange(!this.nzChecked);\n    }\n    /**\n     * @param {?} checked\n     * @return {?}\n     */\n\n  }, {\n    key: \"innerCheckedChange\",\n    value: function innerCheckedChange(checked) {\n      if (!this.nzDisabled) {\n        this.nzChecked = checked;\n        this.onChange(this.nzChecked);\n        this.nzCheckedChange.emit(this.nzChecked);\n\n        if (this.nzCheckboxWrapperComponent) {\n          this.nzCheckboxWrapperComponent.onChange();\n        }\n      }\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      this.nzChecked = value;\n      this.cdr.markForCheck();\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    /**\n     * @param {?} disabled\n     * @return {?}\n     */\n\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(disabled) {\n      this.nzDisabled = disabled;\n      this.cdr.markForCheck();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this.focusMonitor.focusVia(this.inputElement, 'keyboard');\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      this.inputElement.nativeElement.blur();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this = this;\n\n      this.focusMonitor.monitor(this.elementRef, true).subscribe(\n      /**\n      * @param {?} focusOrigin\n      * @return {?}\n      */\n      function (focusOrigin) {\n        if (!focusOrigin) {\n          Promise.resolve().then(\n          /**\n          * @return {?}\n          */\n          function () {\n            return _this.onTouched();\n          });\n        }\n      });\n\n      if (this.nzCheckboxWrapperComponent) {\n        this.nzCheckboxWrapperComponent.addCheckbox(this);\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      if (this.nzAutoFocus) {\n        this.focus();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.focusMonitor.stopMonitoring(this.elementRef);\n\n      if (this.nzCheckboxWrapperComponent) {\n        this.nzCheckboxWrapperComponent.removeCheckbox(this);\n      }\n    }\n  }]);\n\n  return NzCheckboxComponent;\n}();\n\nNzCheckboxComponent.ɵfac = function NzCheckboxComponent_Factory(t) {\n  return new (t || NzCheckboxComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(NzCheckboxWrapperComponent, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor));\n};\n\nNzCheckboxComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: NzCheckboxComponent,\n  selectors: [[\"\", \"nz-checkbox\", \"\"]],\n  viewQuery: function NzCheckboxComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵstaticViewQuery(_c1, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.inputElement = _t.first);\n    }\n  },\n  hostVars: 4,\n  hostBindings: function NzCheckboxComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function NzCheckboxComponent_click_HostBindingHandler($event) {\n        return ctx.hostClick($event);\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"ant-checkbox-wrapper\", true)(\"ant-checkbox-wrapper-checked\", ctx.nzChecked);\n    }\n  },\n  inputs: {\n    nzValue: \"nzValue\",\n    nzAutoFocus: \"nzAutoFocus\",\n    nzDisabled: \"nzDisabled\",\n    nzIndeterminate: \"nzIndeterminate\",\n    nzChecked: \"nzChecked\"\n  },\n  outputs: {\n    nzCheckedChange: \"nzCheckedChange\"\n  },\n  exportAs: [\"nzCheckbox\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(\n    /**\n    * @return {?}\n    */\n    function () {\n      return NzCheckboxComponent;\n    }),\n    multi: true\n  }])],\n  attrs: _c2,\n  ngContentSelectors: _c0,\n  decls: 6,\n  vars: 10,\n  consts: [[1, \"ant-checkbox\"], [\"type\", \"checkbox\", 1, \"ant-checkbox-input\", 3, \"checked\", \"ngModel\", \"disabled\", \"ngModelChange\", \"click\"], [\"inputElement\", \"\"], [1, \"ant-checkbox-inner\"]],\n  template: function NzCheckboxComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"span\", 0);\n      ɵngcc0.ɵɵelementStart(1, \"input\", 1, 2);\n      ɵngcc0.ɵɵlistener(\"ngModelChange\", function NzCheckboxComponent_Template_input_ngModelChange_1_listener($event) {\n        return ctx.innerCheckedChange($event);\n      })(\"click\", function NzCheckboxComponent_Template_input_click_1_listener($event) {\n        return $event.stopPropagation();\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelement(3, \"span\", 3);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(4, \"span\");\n      ɵngcc0.ɵɵprojection(5);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"ant-checkbox-checked\", ctx.nzChecked && !ctx.nzIndeterminate)(\"ant-checkbox-disabled\", ctx.nzDisabled)(\"ant-checkbox-indeterminate\", ctx.nzIndeterminate);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"checked\", ctx.nzChecked)(\"ngModel\", ctx.nzChecked)(\"disabled\", ctx.nzDisabled);\n      ɵngcc0.ɵɵattribute(\"autofocus\", ctx.nzAutoFocus ? \"autofocus\" : null);\n    }\n  },\n  directives: [ɵngcc2.CheckboxControlValueAccessor, ɵngcc2.NgControlStatus, ɵngcc2.NgModel],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nNzCheckboxComponent.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: NzCheckboxWrapperComponent,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: FocusMonitor\n  }];\n};\n\nNzCheckboxComponent.propDecorators = {\n  inputElement: [{\n    type: ViewChild,\n    args: ['inputElement', {\n      static: true\n    }]\n  }],\n  nzCheckedChange: [{\n    type: Output\n  }],\n  nzValue: [{\n    type: Input\n  }],\n  nzAutoFocus: [{\n    type: Input\n  }],\n  nzDisabled: [{\n    type: Input\n  }],\n  nzIndeterminate: [{\n    type: Input\n  }],\n  nzChecked: [{\n    type: Input\n  }]\n};\n\n__decorate([InputBoolean(), __metadata(\"design:type\", Object)], NzCheckboxComponent.prototype, \"nzAutoFocus\", void 0);\n\n__decorate([InputBoolean(), __metadata(\"design:type\", Object)], NzCheckboxComponent.prototype, \"nzDisabled\", void 0);\n\n__decorate([InputBoolean(), __metadata(\"design:type\", Object)], NzCheckboxComponent.prototype, \"nzIndeterminate\", void 0);\n\n__decorate([InputBoolean(), __metadata(\"design:type\", Object)], NzCheckboxComponent.prototype, \"nzChecked\", void 0);\n\nif (false) {\n  /** @type {?} */\n  NzCheckboxComponent.ngAcceptInputType_nzAutoFocus;\n  /** @type {?} */\n\n  NzCheckboxComponent.ngAcceptInputType_nzDisabled;\n  /** @type {?} */\n\n  NzCheckboxComponent.ngAcceptInputType_nzIndeterminate;\n  /** @type {?} */\n\n  NzCheckboxComponent.ngAcceptInputType_nzChecked;\n  /** @type {?} */\n\n  NzCheckboxComponent.prototype.onChange;\n  /** @type {?} */\n\n  NzCheckboxComponent.prototype.onTouched;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NzCheckboxComponent.prototype.inputElement;\n  /** @type {?} */\n\n  NzCheckboxComponent.prototype.nzCheckedChange;\n  /** @type {?} */\n\n  NzCheckboxComponent.prototype.nzValue;\n  /** @type {?} */\n\n  NzCheckboxComponent.prototype.nzAutoFocus;\n  /** @type {?} */\n\n  NzCheckboxComponent.prototype.nzDisabled;\n  /** @type {?} */\n\n  NzCheckboxComponent.prototype.nzIndeterminate;\n  /** @type {?} */\n\n  NzCheckboxComponent.prototype.nzChecked;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NzCheckboxComponent.prototype.elementRef;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NzCheckboxComponent.prototype.nzCheckboxWrapperComponent;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NzCheckboxComponent.prototype.cdr;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NzCheckboxComponent.prototype.focusMonitor;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: checkbox-group.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @record\n */\n\n\nfunction NzCheckBoxOptionInterface() {}\n\nif (false) {\n  /** @type {?} */\n  NzCheckBoxOptionInterface.prototype.label;\n  /** @type {?} */\n\n  NzCheckBoxOptionInterface.prototype.value;\n  /** @type {?|undefined} */\n\n  NzCheckBoxOptionInterface.prototype.checked;\n  /** @type {?|undefined} */\n\n  NzCheckBoxOptionInterface.prototype.disabled;\n}\n\nvar NzCheckboxGroupComponent = /*#__PURE__*/function () {\n  /**\n   * @param {?} elementRef\n   * @param {?} focusMonitor\n   * @param {?} cdr\n   */\n  function NzCheckboxGroupComponent(elementRef, focusMonitor, cdr) {\n    _classCallCheck(this, NzCheckboxGroupComponent);\n\n    this.elementRef = elementRef;\n    this.focusMonitor = focusMonitor;\n    this.cdr = cdr;\n\n    this.onChange =\n    /**\n    * @return {?}\n    */\n    function () {};\n\n    this.onTouched =\n    /**\n    * @return {?}\n    */\n    function () {};\n\n    this.options = [];\n    this.nzDisabled = false;\n  }\n  /**\n   * @param {?} _\n   * @param {?} option\n   * @return {?}\n   */\n\n\n  _createClass(NzCheckboxGroupComponent, [{\n    key: \"trackByOption\",\n    value: function trackByOption(_, option) {\n      return option.value;\n    }\n    /**\n     * @param {?} option\n     * @param {?} checked\n     * @return {?}\n     */\n\n  }, {\n    key: \"onCheckedChange\",\n    value: function onCheckedChange(option, checked) {\n      option.checked = checked;\n      this.onChange(this.options);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this2 = this;\n\n      this.focusMonitor.monitor(this.elementRef, true).subscribe(\n      /**\n      * @param {?} focusOrigin\n      * @return {?}\n      */\n      function (focusOrigin) {\n        if (!focusOrigin) {\n          Promise.resolve().then(\n          /**\n          * @return {?}\n          */\n          function () {\n            return _this2.onTouched();\n          });\n        }\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.focusMonitor.stopMonitoring(this.elementRef);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      this.options = value;\n      this.cdr.markForCheck();\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    /**\n     * @param {?} disabled\n     * @return {?}\n     */\n\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(disabled) {\n      this.nzDisabled = disabled;\n      this.cdr.markForCheck();\n    }\n  }]);\n\n  return NzCheckboxGroupComponent;\n}();\n\nNzCheckboxGroupComponent.ɵfac = function NzCheckboxGroupComponent_Factory(t) {\n  return new (t || NzCheckboxGroupComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n};\n\nNzCheckboxGroupComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: NzCheckboxGroupComponent,\n  selectors: [[\"nz-checkbox-group\"]],\n  hostVars: 2,\n  hostBindings: function NzCheckboxGroupComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"ant-checkbox-group\", true);\n    }\n  },\n  inputs: {\n    nzDisabled: \"nzDisabled\"\n  },\n  exportAs: [\"nzCheckboxGroup\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(\n    /**\n    * @return {?}\n    */\n    function () {\n      return NzCheckboxGroupComponent;\n    }),\n    multi: true\n  }])],\n  decls: 1,\n  vars: 2,\n  consts: [[\"nz-checkbox\", \"\", \"class\", \"ant-checkbox-group-item\", 3, \"nzDisabled\", \"nzChecked\", \"nzCheckedChange\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"nz-checkbox\", \"\", 1, \"ant-checkbox-group-item\", 3, \"nzDisabled\", \"nzChecked\", \"nzCheckedChange\"]],\n  template: function NzCheckboxGroupComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtemplate(0, NzCheckboxGroupComponent_label_0_Template, 3, 3, \"label\", 0);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.options)(\"ngForTrackBy\", ctx.trackByOption);\n    }\n  },\n  directives: [ɵngcc3.NgForOf, NzCheckboxComponent],\n  encapsulation: 2\n});\n/** @nocollapse */\n\nNzCheckboxGroupComponent.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: FocusMonitor\n  }, {\n    type: ChangeDetectorRef\n  }];\n};\n\nNzCheckboxGroupComponent.propDecorators = {\n  nzDisabled: [{\n    type: Input\n  }]\n};\n\n__decorate([InputBoolean(), __metadata(\"design:type\", Object)], NzCheckboxGroupComponent.prototype, \"nzDisabled\", void 0);\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NzCheckboxWrapperComponent, [{\n    type: Component,\n    args: [{\n      selector: 'nz-checkbox-wrapper',\n      exportAs: 'nzCheckboxWrapper',\n      preserveWhitespaces: false,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      template: \" <ng-content></ng-content> \"\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.Renderer2\n    }, {\n      type: ɵngcc0.ElementRef\n    }];\n  }, {\n    nzOnChange: [{\n      type: Output\n    }]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NzCheckboxComponent, [{\n    type: Component,\n    args: [{\n      selector: '[nz-checkbox]',\n      exportAs: 'nzCheckbox',\n      preserveWhitespaces: false,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      template: \"\\n    <span\\n      class=\\\"ant-checkbox\\\"\\n      [class.ant-checkbox-checked]=\\\"nzChecked && !nzIndeterminate\\\"\\n      [class.ant-checkbox-disabled]=\\\"nzDisabled\\\"\\n      [class.ant-checkbox-indeterminate]=\\\"nzIndeterminate\\\"\\n    >\\n      <input\\n        #inputElement\\n        type=\\\"checkbox\\\"\\n        class=\\\"ant-checkbox-input\\\"\\n        [attr.autofocus]=\\\"nzAutoFocus ? 'autofocus' : null\\\"\\n        [checked]=\\\"nzChecked\\\"\\n        [ngModel]=\\\"nzChecked\\\"\\n        [disabled]=\\\"nzDisabled\\\"\\n        (ngModelChange)=\\\"innerCheckedChange($event)\\\"\\n        (click)=\\\"$event.stopPropagation()\\\"\\n      />\\n      <span class=\\\"ant-checkbox-inner\\\"></span>\\n    </span>\\n    <span><ng-content></ng-content></span>\\n  \",\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(\n        /**\n        * @return {?}\n        */\n        function () {\n          return NzCheckboxComponent;\n        }),\n        multi: true\n      }],\n      host: {\n        '[class.ant-checkbox-wrapper]': 'true',\n        '[class.ant-checkbox-wrapper-checked]': 'nzChecked',\n        '(click)': 'hostClick($event)'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: NzCheckboxWrapperComponent,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc1.FocusMonitor\n    }];\n  }, {\n    nzCheckedChange: [{\n      type: Output\n    }],\n    nzValue: [{\n      type: Input\n    }],\n    nzAutoFocus: [{\n      type: Input\n    }],\n    nzDisabled: [{\n      type: Input\n    }],\n    nzIndeterminate: [{\n      type: Input\n    }],\n    nzChecked: [{\n      type: Input\n    }],\n    inputElement: [{\n      type: ViewChild,\n      args: ['inputElement', {\n        static: true\n      }]\n    }]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NzCheckboxGroupComponent, [{\n    type: Component,\n    args: [{\n      selector: 'nz-checkbox-group',\n      exportAs: 'nzCheckboxGroup',\n      preserveWhitespaces: false,\n      encapsulation: ViewEncapsulation.None,\n      template: \"\\n    <label\\n      nz-checkbox\\n      class=\\\"ant-checkbox-group-item\\\"\\n      *ngFor=\\\"let o of options; trackBy: trackByOption\\\"\\n      [nzDisabled]=\\\"o.disabled || nzDisabled\\\"\\n      [nzChecked]=\\\"o.checked!\\\"\\n      (nzCheckedChange)=\\\"onCheckedChange(o, $event)\\\"\\n    >\\n      <span>{{ o.label }}</span>\\n    </label>\\n  \",\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(\n        /**\n        * @return {?}\n        */\n        function () {\n          return NzCheckboxGroupComponent;\n        }),\n        multi: true\n      }],\n      host: {\n        '[class.ant-checkbox-group]': 'true'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.FocusMonitor\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }];\n  }, {\n    nzDisabled: [{\n      type: Input\n    }]\n  });\n})();\n\nif (false) {\n  /** @type {?} */\n  NzCheckboxGroupComponent.ngAcceptInputType_nzDisabled;\n  /** @type {?} */\n\n  NzCheckboxGroupComponent.prototype.onChange;\n  /** @type {?} */\n\n  NzCheckboxGroupComponent.prototype.onTouched;\n  /** @type {?} */\n\n  NzCheckboxGroupComponent.prototype.options;\n  /** @type {?} */\n\n  NzCheckboxGroupComponent.prototype.nzDisabled;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NzCheckboxGroupComponent.prototype.elementRef;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NzCheckboxGroupComponent.prototype.focusMonitor;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NzCheckboxGroupComponent.prototype.cdr;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: checkbox.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar NzCheckboxModule = /*#__PURE__*/_createClass(function NzCheckboxModule() {\n  _classCallCheck(this, NzCheckboxModule);\n});\n\nNzCheckboxModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: NzCheckboxModule\n});\nNzCheckboxModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function NzCheckboxModule_Factory(t) {\n    return new (t || NzCheckboxModule)();\n  },\n  imports: [[CommonModule, FormsModule, A11yModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NzCheckboxModule, {\n    declarations: function declarations() {\n      return [NzCheckboxComponent, NzCheckboxGroupComponent, NzCheckboxWrapperComponent];\n    },\n    imports: function imports() {\n      return [CommonModule, FormsModule, A11yModule];\n    },\n    exports: function exports() {\n      return [NzCheckboxComponent, NzCheckboxGroupComponent, NzCheckboxWrapperComponent];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NzCheckboxModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, FormsModule, A11yModule],\n      declarations: [NzCheckboxComponent, NzCheckboxGroupComponent, NzCheckboxWrapperComponent],\n      exports: [NzCheckboxComponent, NzCheckboxGroupComponent, NzCheckboxWrapperComponent]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: ng-zorro-antd-checkbox.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { NzCheckboxComponent, NzCheckboxGroupComponent, NzCheckboxModule, NzCheckboxWrapperComponent };","map":{"version":3,"sources":["ng-zorro-antd/checkbox/checkbox-wrapper.component.ts","ng-zorro-antd/checkbox/checkbox.component.ts","ng-zorro-antd/checkbox/checkbox-group.component.ts","ng-zorro-antd/checkbox/checkbox.module.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Output, Renderer2, ViewEncapsulation } from '@angular/core';\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\nimport { NzCheckboxComponent } from './checkbox.component';\n\n@Component({\n  selector: 'nz-checkbox-wrapper',\n  exportAs: 'nzCheckboxWrapper',\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  template: ` <ng-content></ng-content> `\n})\nexport class NzCheckboxWrapperComponent {\n  @Output() readonly nzOnChange = new EventEmitter<NzSafeAny[]>();\n  private checkboxList: NzCheckboxComponent[] = [];\n\n  addCheckbox(value: NzCheckboxComponent): void {\n    this.checkboxList.push(value);\n  }\n\n  removeCheckbox(value: NzCheckboxComponent): void {\n    this.checkboxList.splice(this.checkboxList.indexOf(value), 1);\n  }\n\n  onChange(): void {\n    const listOfCheckedValue = this.checkboxList.filter(item => item.nzChecked).map(item => item.nzValue);\n    this.nzOnChange.emit(listOfCheckedValue);\n  }\n\n  constructor(renderer: Renderer2, elementRef: ElementRef) {\n    renderer.addClass(elementRef.nativeElement, 'ant-checkbox-group');\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { BooleanInput, NzSafeAny, OnChangeType, OnTouchedType } from 'ng-zorro-antd/core/types';\nimport { InputBoolean } from 'ng-zorro-antd/core/util';\nimport { NzCheckboxWrapperComponent } from './checkbox-wrapper.component';\n\n@Component({\n  selector: '[nz-checkbox]',\n  exportAs: 'nzCheckbox',\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  template: `\n    <span\n      class=\"ant-checkbox\"\n      [class.ant-checkbox-checked]=\"nzChecked && !nzIndeterminate\"\n      [class.ant-checkbox-disabled]=\"nzDisabled\"\n      [class.ant-checkbox-indeterminate]=\"nzIndeterminate\"\n    >\n      <input\n        #inputElement\n        type=\"checkbox\"\n        class=\"ant-checkbox-input\"\n        [attr.autofocus]=\"nzAutoFocus ? 'autofocus' : null\"\n        [checked]=\"nzChecked\"\n        [ngModel]=\"nzChecked\"\n        [disabled]=\"nzDisabled\"\n        (ngModelChange)=\"innerCheckedChange($event)\"\n        (click)=\"$event.stopPropagation()\"\n      />\n      <span class=\"ant-checkbox-inner\"></span>\n    </span>\n    <span><ng-content></ng-content></span>\n  `,\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => NzCheckboxComponent),\n      multi: true\n    }\n  ],\n  host: {\n    '[class.ant-checkbox-wrapper]': 'true',\n    '[class.ant-checkbox-wrapper-checked]': 'nzChecked',\n    '(click)': 'hostClick($event)'\n  }\n})\nexport class NzCheckboxComponent implements OnInit, ControlValueAccessor, OnDestroy, AfterViewInit {\n  static ngAcceptInputType_nzAutoFocus: BooleanInput;\n  static ngAcceptInputType_nzDisabled: BooleanInput;\n  static ngAcceptInputType_nzIndeterminate: BooleanInput;\n  static ngAcceptInputType_nzChecked: BooleanInput;\n\n  onChange: OnChangeType = () => {};\n  onTouched: OnTouchedType = () => {};\n  @ViewChild('inputElement', { static: true }) private inputElement!: ElementRef;\n  @Output() readonly nzCheckedChange = new EventEmitter<boolean>();\n  @Input() nzValue: NzSafeAny | null = null;\n  @Input() @InputBoolean() nzAutoFocus = false;\n  @Input() @InputBoolean() nzDisabled = false;\n  @Input() @InputBoolean() nzIndeterminate = false;\n  @Input() @InputBoolean() nzChecked = false;\n\n  hostClick(e: MouseEvent): void {\n    e.preventDefault();\n    this.focus();\n    this.innerCheckedChange(!this.nzChecked);\n  }\n\n  innerCheckedChange(checked: boolean): void {\n    if (!this.nzDisabled) {\n      this.nzChecked = checked;\n      this.onChange(this.nzChecked);\n      this.nzCheckedChange.emit(this.nzChecked);\n      if (this.nzCheckboxWrapperComponent) {\n        this.nzCheckboxWrapperComponent.onChange();\n      }\n    }\n  }\n\n  writeValue(value: boolean): void {\n    this.nzChecked = value;\n    this.cdr.markForCheck();\n  }\n\n  registerOnChange(fn: OnChangeType): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: OnTouchedType): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(disabled: boolean): void {\n    this.nzDisabled = disabled;\n    this.cdr.markForCheck();\n  }\n\n  focus(): void {\n    this.focusMonitor.focusVia(this.inputElement, 'keyboard');\n  }\n\n  blur(): void {\n    this.inputElement.nativeElement.blur();\n  }\n\n  constructor(\n    private elementRef: ElementRef<HTMLElement>,\n    @Optional() private nzCheckboxWrapperComponent: NzCheckboxWrapperComponent,\n    private cdr: ChangeDetectorRef,\n    private focusMonitor: FocusMonitor\n  ) {}\n\n  ngOnInit(): void {\n    this.focusMonitor.monitor(this.elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        Promise.resolve().then(() => this.onTouched());\n      }\n    });\n    if (this.nzCheckboxWrapperComponent) {\n      this.nzCheckboxWrapperComponent.addCheckbox(this);\n    }\n  }\n  ngAfterViewInit(): void {\n    if (this.nzAutoFocus) {\n      this.focus();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.focusMonitor.stopMonitoring(this.elementRef);\n    if (this.nzCheckboxWrapperComponent) {\n      this.nzCheckboxWrapperComponent.removeCheckbox(this);\n    }\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { ChangeDetectorRef, Component, ElementRef, forwardRef, Input, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { BooleanInput, OnChangeType, OnTouchedType } from 'ng-zorro-antd/core/types';\nimport { InputBoolean } from 'ng-zorro-antd/core/util';\n\nexport interface NzCheckBoxOptionInterface {\n  label: string;\n  value: string;\n  checked?: boolean;\n  disabled?: boolean;\n}\n\n@Component({\n  selector: 'nz-checkbox-group',\n  exportAs: 'nzCheckboxGroup',\n  preserveWhitespaces: false,\n  encapsulation: ViewEncapsulation.None,\n  template: `\n    <label\n      nz-checkbox\n      class=\"ant-checkbox-group-item\"\n      *ngFor=\"let o of options; trackBy: trackByOption\"\n      [nzDisabled]=\"o.disabled || nzDisabled\"\n      [nzChecked]=\"o.checked!\"\n      (nzCheckedChange)=\"onCheckedChange(o, $event)\"\n    >\n      <span>{{ o.label }}</span>\n    </label>\n  `,\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => NzCheckboxGroupComponent),\n      multi: true\n    }\n  ],\n  host: {\n    '[class.ant-checkbox-group]': 'true'\n  }\n})\nexport class NzCheckboxGroupComponent implements ControlValueAccessor, OnInit, OnDestroy {\n  static ngAcceptInputType_nzDisabled: BooleanInput;\n\n  onChange: OnChangeType = () => {};\n  onTouched: OnTouchedType = () => {};\n  options: NzCheckBoxOptionInterface[] = [];\n  @Input() @InputBoolean() nzDisabled = false;\n\n  trackByOption(_: number, option: NzCheckBoxOptionInterface): string {\n    return option.value;\n  }\n\n  onCheckedChange(option: NzCheckBoxOptionInterface, checked: boolean): void {\n    option.checked = checked;\n    this.onChange(this.options);\n  }\n\n  constructor(private elementRef: ElementRef, private focusMonitor: FocusMonitor, private cdr: ChangeDetectorRef) {}\n\n  ngOnInit(): void {\n    this.focusMonitor.monitor(this.elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        Promise.resolve().then(() => this.onTouched());\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.focusMonitor.stopMonitoring(this.elementRef);\n  }\n\n  writeValue(value: NzCheckBoxOptionInterface[]): void {\n    this.options = value;\n    this.cdr.markForCheck();\n  }\n\n  registerOnChange(fn: OnChangeType): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: OnTouchedType): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(disabled: boolean): void {\n    this.nzDisabled = disabled;\n    this.cdr.markForCheck();\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { A11yModule } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { NzCheckboxGroupComponent } from './checkbox-group.component';\nimport { NzCheckboxWrapperComponent } from './checkbox-wrapper.component';\nimport { NzCheckboxComponent } from './checkbox.component';\n\n@NgModule({\n  imports: [CommonModule, FormsModule, A11yModule],\n  declarations: [NzCheckboxComponent, NzCheckboxGroupComponent, NzCheckboxWrapperComponent],\n  exports: [NzCheckboxComponent, NzCheckboxGroupComponent, NzCheckboxWrapperComponent]\n})\nexport class NzCheckboxModule {}\n"]},"metadata":{},"sourceType":"module"}