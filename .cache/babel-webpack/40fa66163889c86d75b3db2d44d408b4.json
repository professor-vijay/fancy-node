{"ast":null,"code":"import _classCallCheck from \"D:/Biz1-Market-0.01/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/Biz1-Market-0.01/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Injectable, NgModule, Pipe } from '@angular/core';\nimport * as ɵngcc0 from '@angular/core';\n\nvar Ng2SearchPipe = /*#__PURE__*/function () {\n  function Ng2SearchPipe() {\n    _classCallCheck(this, Ng2SearchPipe);\n  }\n\n  _createClass(Ng2SearchPipe, [{\n    key: \"transform\",\n    value:\n    /**\n     * @param {?} items object from array\n     * @param {?} term term's search\n     * @return {?}\n     */\n    function transform(items, term) {\n      if (!term || !items) return items;\n      return Ng2SearchPipe.filter(items, term);\n    }\n    /**\n     *\n     * @param {?} items List of items to filter\n     * @param {?} term  a string term to compare with every property of the list\n     *\n     * @return {?}\n     */\n\n  }], [{\n    key: \"filter\",\n    value: function filter(items, term) {\n      var\n      /** @type {?} */\n      toCompare = term.toLowerCase();\n      /**\n       * @param {?} item\n       * @param {?} term\n       * @return {?}\n       */\n\n      function checkInside(item, term) {\n        for (var\n        /** @type {?} */\n        property in item) {\n          if (item[property] === null || item[property] == undefined) {\n            continue;\n          }\n\n          if (typeof item[property] === 'object') {\n            if (checkInside(item[property], term)) {\n              return true;\n            }\n          }\n\n          if (item[property].toString().toLowerCase().includes(toCompare)) {\n            return true;\n          }\n        }\n\n        return false;\n      }\n\n      return items.filter(function (item) {\n        return checkInside(item, term);\n      });\n    }\n  }]);\n\n  return Ng2SearchPipe;\n}();\n\nNg2SearchPipe.ɵfac = function Ng2SearchPipe_Factory(t) {\n  return new (t || Ng2SearchPipe)();\n};\n\nNg2SearchPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({\n  name: \"filter\",\n  type: Ng2SearchPipe,\n  pure: false\n});\nNg2SearchPipe.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: Ng2SearchPipe,\n  factory: Ng2SearchPipe.ɵfac\n});\n/**\n * @nocollapse\n */\n\nNg2SearchPipe.ctorParameters = function () {\n  return [];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(Ng2SearchPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'filter',\n      pure: false\n    }]\n  }, {\n    type: Injectable\n  }], null, null);\n})();\n\nvar Ng2SearchPipeModule = /*#__PURE__*/_createClass(function Ng2SearchPipeModule() {\n  _classCallCheck(this, Ng2SearchPipeModule);\n});\n\nNg2SearchPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: Ng2SearchPipeModule\n});\nNg2SearchPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function Ng2SearchPipeModule_Factory(t) {\n    return new (t || Ng2SearchPipeModule)();\n  }\n});\n/**\n * @nocollapse\n */\n\nNg2SearchPipeModule.ctorParameters = function () {\n  return [];\n};\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(Ng2SearchPipeModule, {\n    declarations: [Ng2SearchPipe],\n    exports: [Ng2SearchPipe]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(Ng2SearchPipeModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [Ng2SearchPipe],\n      exports: [Ng2SearchPipe]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { Ng2SearchPipeModule, Ng2SearchPipe };","map":{"version":3,"sources":["ts/src/ng2-filter.pipe.ts","ts/src/ng2-filter.module.ts","ts/ng2-search-filter.ts"],"names":[],"mappings":";;;;;IACA,a;;;;;;;;AAAE;AAAQ;AAA0C;AAErB;AACnB;AAGZ,uBAGG,KAHH,EAGG,IAHH,EAAA;AACI,UAAI,CAGC,IAHD,IAGS,CAAA,KAHb,EAGqB,OAAO,KAAP;AADrB,aAGO,aAAA,CAAc,MAAd,CAAqB,KAArB,EAA4B,IAA5B,CAHP;AACD;AACH;AAEC;AAAO;AACI;AAEA;AAEZ;AAAmB;;;;WAAnB,gBAGG,KAHH,EAGG,IAHH,EAAA;AAEI;AAAA;AAGM,MAAA,SAAA,GAAY,IAAA,CAAK,WAAL,EAHlB;AAMA;AAAY;AAA2B;AACrB;AAAuB;;AAD7C,eAAA,WAAA,CADK,IACL,EADK,IACL,EAAA;AACM,aAAK;AAAA;AADI,QAAA,QACT,IADqB,IACrB,EAD2B;AAEzB,cAAI,IADC,CAAI,QAAJ,CACD,KADmB,IACnB,IAD2B,IAAA,CAAK,QAAL,CAAA,IAAkB,SACjD,EAD4D;AAE1D;AACD;;AACD,cAAI,OADO,IAAA,CAAK,QAAL,CACP,KAD0B,QAC9B,EADwC;AAEtC,gBAAI,WADC,CAAW,IAAC,CAAI,QAAJ,CAAZ,EAA2B,IAA3B,CACL,EADuC;AAErC,qBADO,IACP;AACD;AACF;;AACD,cAAI,IADC,CAAI,QAAJ,CACD,CADe,QACf,GAD0B,WAC1B,GADwC,QACxC,CADiD,SACjD,CAAJ,EADiE;AAE/D,mBADO,IACP;AACD;AACF;;AACD,eADO,KACP;AACD;;AAED,aADO,KAAA,CAAM,MAAN,CAAa,UAAC,IAAD,EACxB;AACM,eADO,WAAA,CAAY,IAAZ,EAAkB,IAAlB,CACP;AAAA,OAFK,CACP;AAGD;;;;;;AAAI,aAAP,CAAA,IAAO,GAAP,SAA2C,qBAA3C,CACc,CADd,EACoB;AAAA,SAAA,KAAA,CAAA,IACZ,aADY,GAAA;AACZ,CAFD;;AAIL,aAAI,CADE,KACN,GADM,MAAA,CAAA,YAAA,CACH;AACH,EAAA,IAAA,EAAA,QADG;AACG,EAAA,IAAW,EAAA,aADd;AAGJ,EAAA,IAAA,EAAA;AAHI,CADG,CACN;;;yBAEA;;AAAC;AAAI;AACP;;AACC,aAAD,CAAA,cAAC,GAAA;AAAA,SAAA,EAAA;AAAA,CAAA;;;;;;;;;;;;;;AAIC,C;;ICzDF,mB;;;;AAG0C,mBAA1C,CAAA,IAA0C,GAA1C,MAA8E,CAF9E,gBAEA,CACQ;AAAA,EAAA,IAAU,EAFhB;AAEM,CADR,CAA0C;AAD5B,mBAGE,CAAA,IAHF,GAGI,MAAa,CAF7B,gBAEgB,CAFhB;AAAO,EAAA,OAGE,EAAA,SAFV,2BAEU,CADV,CACU,EADV;AAAA,WAAA,KAAA,CAAA,IAAA,mBAAA,GAAA;AAAA;AAFC,CAEgB,CAHJ;AAMX;AACA;AAAe;;AACjB,mBAAD,CAAA,cAAC,GAAA;AAAA,SAAA,EAAA;AAAA,CAAA;;;;;;;;;;;;;;;;;;;AAAC,C;ACZF;AACA;AACA;;;AAEA,SAAA,mBAAA,EAAA,aAAA","sourcesContent":["import { Pipe, PipeTransform, Injectable } from '@angular/core';\nexport class Ng2SearchPipe implements PipeTransform {\n/**\n * @param {?} items object from array\n * @param {?} term term's search\n * @return {?}\n */\ntransform(items: any, term: string): any {\n    if (!term || !items) return items;\n\n    return Ng2SearchPipe.filter(items, term);\n  }\n/**\n *\n * @param {?} items List of items to filter\n * @param {?} term  a string term to compare with every property of the list\n * \n * @return {?}\n */\nstatic filter(items: Array<{ [key: string]: any }>, term: string): Array<{ [key: string]: any }> {\n\n    const /** @type {?} */ toCompare = term.toLowerCase();\n/**\n * @param {?} item\n * @param {?} term\n * @return {?}\n */\nfunction checkInside(item: any, term: string) {\n      for (let /** @type {?} */ property in item) {\n        if (item[property] === null || item[property] == undefined) {\n          continue;\n        }\n        if (typeof item[property] === 'object') {\n          if (checkInside(item[property], term)) {\n            return true;\n          }\n        }\n        if (item[property].toString().toLowerCase().includes(toCompare)) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n    return items.filter(function (item) {\n      return checkInside(item, term);\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{\n  name: 'filter',\n  pure: false\n}, ] },\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction Ng2SearchPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nNg2SearchPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNg2SearchPipe.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { Ng2SearchPipe } from './ng2-filter.pipe';\nexport class Ng2SearchPipeModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [Ng2SearchPipe],\n  exports: [Ng2SearchPipe]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction Ng2SearchPipeModule_tsickle_Closure_declarations() {\n/** @type {?} */\nNg2SearchPipeModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNg2SearchPipeModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {Ng2SearchPipeModule,Ng2SearchPipe} from './index';\n"]},"metadata":{},"sourceType":"module"}